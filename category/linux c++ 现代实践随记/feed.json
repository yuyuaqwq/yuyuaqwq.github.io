{
    "version": "https://jsonfeed.org/version/1",
    "title": "鹿鹿鱼鱼 • All posts by \"linux c++ 现代实践随记\" category",
    "description": "人为什么要起床？",
    "home_page_url": "http://yuyuaqwq.github.io",
    "items": [
        {
            "id": "http://yuyuaqwq.github.io/posts/54a8.html",
            "url": "http://yuyuaqwq.github.io/posts/54a8.html",
            "title": "1.VsCode环境配置",
            "date_published": "2023-10-29T03:39:42.000Z",
            "content_html": "<h1 id=\"visual-studio-code-安装\"><a class=\"markdownIt-Anchor\" href=\"#visual-studio-code-安装\">#</a> Visual Studio Code 安装</h1>\n<p>这一块应该没什么好细说的，到<a href=\"https://code.visualstudio.com/\">官网</a>上下载就可以了。</p>\n<h1 id=\"虚拟机-安装\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机-安装\">#</a> 虚拟机 安装</h1>\n<p>我个人的开发环境是，物理机 <code>Windows</code>  + 虚拟机 <code>Ubuntu</code> ，因此需要安装一个虚拟机应用。<br>\n可以看你个人选择自己喜好的虚拟机应用，例如 <code>VMWare Workstation</code>  或 <code>VirtualBox</code> 。<br>\n这里我使用的是 <code>VMWare Workstation</code> 。</p>\n<h1 id=\"ubuntu-安装\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu-安装\">#</a> Ubuntu 安装</h1>\n<p>虚拟机上安装 <code>Ubuntu</code>  的话，网上的教程也很多，也不赘述了，我这里装的是桌面版的。</p>\n<h1 id=\"配置vscode的远程开发\"><a class=\"markdownIt-Anchor\" href=\"#配置vscode的远程开发\">#</a> 配置 VsCode 的远程开发</h1>\n<p>我们需要在 <code>Windows</code>  上进行 <code>Linux</code>  下的开发， <code>VsCode</code>  给我们提供了一个很好的方案，使用 <code>SSH</code>  进行远程开发。</p>\n<h2 id=\"vscode扩展\"><a class=\"markdownIt-Anchor\" href=\"#vscode扩展\">#</a> VsCode 扩展</h2>\n<p>这是 <code>VsCode</code>  中，微软提供的一个扩展。<br>\n首先启动 <code>VsCode</code> ，选择 <code>Extensions(Ctrl+Shift+X)</code>  选项卡，搜索 <code>Remote</code> 。<br>\n安装 <code>Remote - SSH</code>  扩展：</p>\n<ol>\n<li><code>Remote - SSH</code></li>\n<li><code>Remote Explorer</code>\n<ul>\n<li>会被自动安装</li>\n</ul>\n</li>\n<li><code>Remote - SSH: Editing Configuration Files</code>\n<ul>\n<li>会被自动安装</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"openssh\"><a class=\"markdownIt-Anchor\" href=\"#openssh\">#</a> OpenSSH</h2>\n<p>在 <code>Windows</code>  和 <code>Ubuntu</code>  中都需要安装。</p>\n<h3 id=\"windows\"><a class=\"markdownIt-Anchor\" href=\"#windows\">#</a> Windows</h3>\n<p>在虚拟机中测试了一下，似乎 <code>Windows 10</code>  上已经预置了。</p>\n<h3 id=\"ubuntu\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu\">#</a> Ubuntu</h3>\n<p><code>Ubuntu</code>  下的安装相当简单：<br>\n <code>sudo apt-get install openssh-server</code></p>\n<p>以下命令启动 <code>ssh 服务</code> ：<br>\n <code>sudo /etc/init.d/ssh start</code></p>\n<p>以下命令查看 <code>ssh 服务</code> 是否启用：<br>\n <code>ps -e|grep ssh</code></p>\n<p>有进程 <code>sshd</code>  在运行就是 ok 了。</p>\n<h3 id=\"配置免密登录\"><a class=\"markdownIt-Anchor\" href=\"#配置免密登录\">#</a> 配置免密登录</h3>\n<p>我们需要让 <code>Linux端的OpenSSH服务</code> 识别我们的身份，以实现免密登录。</p>\n<h4 id=\"生成密钥对\"><a class=\"markdownIt-Anchor\" href=\"#生成密钥对\">#</a> 生成密钥对</h4>\n<p><code>Windows PowerShell</code>  中输入以下命令：<br>\n <code>ssh-keygen</code></p>\n<p>随后第一个待输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (C:\\Users\\yuyu/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>\n<p>直接回车。</p>\n<p>第二个待输入，可以直接回车不设置密码，如果为了安全你也可以设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Created directory &#x27;C:\\Users\\yuyu/.ssh&#x27;.</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br></pre></td></tr></table></figure>\n<p>接下来要求重复输入密码，忽略了密码就继续回车：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter same passphrase again:</span><br></pre></td></tr></table></figure>\n<p>完成生成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+---[RSA 3072]----+</span><br><span class=\"line\">|                .|</span><br><span class=\"line\">|        . o o . o|</span><br><span class=\"line\">|     . E +o= X .o|</span><br><span class=\"line\">|    . = ++*+= X.o|</span><br><span class=\"line\">|     o .S==o.o.B |</span><br><span class=\"line\">|       ooB.. .o o|</span><br><span class=\"line\">|        +oo    .=|</span><br><span class=\"line\">|          .    oo|</span><br><span class=\"line\">|              .  |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n<p>接下来在以下用户路径中即可找到生成的公钥和私钥文件：<br>\n <code>C:\\Users\\yuyu\\.ssh</code></p>\n<p>其中 <code>yuyu</code>  替换成你自己的用户名。</p>\n<h4 id=\"配置公钥\"><a class=\"markdownIt-Anchor\" href=\"#配置公钥\">#</a> 配置公钥</h4>\n<p>如果你是安装的桌面版 <code>Ubuntu</code> ，就可以很轻松的在 <code>VMWare Workstation</code>  中通过拖动来传输文件。</p>\n<p>在 <code>Ubuntu桌面</code> 中打开文件浏览器，会显示在 Home 目录下 (实际路径是 <code>/Home/你的用户名</code> 、 <code>~</code> )，按下 <code>Ctrl + H</code> ，即可显示隐藏文件。<br>\n可以看到一个目录 <code>.ssh</code> ，进入。</p>\n<p>将 <code>Windows</code>  下生成的公钥文件 <code>id_rsa.pub</code>  复制到 Linux 的 <code>.ssh</code>  目录下。</p>\n<p>在该目录中复制一份 <code>id_rsa.pub</code> ，并更名为 <code>authorized_keys</code> 。</p>\n<h2 id=\"vscode远程连接\"><a class=\"markdownIt-Anchor\" href=\"#vscode远程连接\">#</a> VsCode 远程连接</h2>\n<h3 id=\"查看ip\"><a class=\"markdownIt-Anchor\" href=\"#查看ip\">#</a> 查看 ip</h3>\n<p><code>Linux终端</code> 下输入：<br>\n <code>hostname -I</code></p>\n<p>记下此 ip</p>\n<h3 id=\"配置连接目标\"><a class=\"markdownIt-Anchor\" href=\"#配置连接目标\">#</a> 配置连接目标</h3>\n<p>回到 <code>VsCode</code>  中，由于我们安装了扩展，侧边选项卡新增了一个图标 ( <code>Remote Explorer</code> )。</p>\n<p>选择该选项卡，随后点击 <code>齿轮</code> 按钮。</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/1.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>选择第 1 项：</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/2.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>配置如下：</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/3.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Read more about SSH config files: https://linux.die.net/man/5/ssh_config</span></span><br><span class=\"line\"><span class=\"comment\"># Host alias</span></span><br><span class=\"line\"><span class=\"comment\">#     HostName hostname</span></span><br><span class=\"line\"><span class=\"comment\">#     User user</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">Host</span> <span class=\"string\">Ubuntu</span></span><br><span class=\"line\">    <span class=\"string\">HostName</span> <span class=\"number\">192.168</span><span class=\"number\">.229</span><span class=\"number\">.132</span></span><br><span class=\"line\">    <span class=\"string\">User</span> <span class=\"string\">yuyu</span></span><br><span class=\"line\">    <span class=\"string\">Port</span> <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n<p>将 ip 和用户名 (都是 <code>linux</code>  的) 修改为你的，保存即可。</p>\n<p>点击齿轮旁边的刷新按钮，即出现了你添加的主机，开始连接吧！</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/4.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>这里选择 <code>Linux</code> 。</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/5.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>继续。</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/6.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>由于我们配置了免密登录，此时我们成功连接了！</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/7.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>接下来可以打开一个文件夹了，这里我创建了一个 project 的目录来管理我的项目。</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/8.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>至此，我们的远程开发环境就已经配置完毕了。</p>\n<h1 id=\"在vscode中构建与调试项目\"><a class=\"markdownIt-Anchor\" href=\"#在vscode中构建与调试项目\">#</a> 在 VsCode 中构建与调试项目</h1>\n<h2 id=\"cmake\"><a class=\"markdownIt-Anchor\" href=\"#cmake\">#</a> CMake</h2>\n<p>先前我就纠结过是选择 CMake 还是 XMake 来管理项目工程，最后还是选择了 CMake，因为用的人比较多吧，学习一下总不是坏事。</p>\n<h3 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h3>\n<p><code>Linux终端</code> 输入命令：<br>\n <code>sudo apt install cmake</code></p>\n<h3 id=\"资料\"><a class=\"markdownIt-Anchor\" href=\"#资料\">#</a> 资料</h3>\n<p>这里推荐两篇文章：<br>\n1.<a href=\"https://subingwen.cn/cmake/CMake-primer/index.html\">CMake 保姆级教程（上）</a><br>\n2.<a href=\"https://subingwen.cn/cmake/CMake-advanced/\">CMake 保姆级教程（下）</a></p>\n<p>能够快速上手 CMake 并了解到足够在当前阶段使用的知识。</p>\n<h2 id=\"vscode扩展-2\"><a class=\"markdownIt-Anchor\" href=\"#vscode扩展-2\">#</a> VsCode 扩展</h2>\n<ol>\n<li><code>C/C++</code>  &amp;  <code>C/C++ Extension Pack</code>\n<ul>\n<li>语法、浏览、调试等辅助扩展。</li>\n</ul>\n</li>\n<li><code>C/C++ Themes</code> <br>\n`   - 非必要，C++ 主题。</li>\n<li><code>CMake</code>  &amp;  <code>CMake Tools</code>\n<ul>\n<li>cmake</li>\n</ul>\n</li>\n<li><code>Native Debug</code>\n<ul>\n<li>调试辅助扩展。</li>\n</ul>\n</li>\n<li><code>C/C++ Compile Run</code>\n<ul>\n<li>非必要，单文件运行扩展，按 f6 即可直接编译运行当前浏览的源文件。</li>\n</ul>\n</li>\n<li><code>clangd</code>\n<ul>\n<li>这个和 <code>C/C++</code>  是差不多的作用，两个扩展是不能同时启用的 (存在冲突)，我尝试了一下还是 <code>C/C++</code>  更好用一点。</li>\n</ul>\n</li>\n<li><code>Catppuccin Noctis</code>\n<ul>\n<li>非必要，感觉还行的主题。</li>\n</ul>\n</li>\n<li><code>Remote - SSH</code>\n<ul>\n<li>远程开发，已经安装了。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"hello-world\"><a class=\"markdownIt-Anchor\" href=\"#hello-world\">#</a> Hello world！</h2>\n<p>好了，接下来是喜闻乐见的 <code>Hello world</code>  环节。<br>\n咱们来学习如何构建和调试项目。</p>\n<p>我这里在 <code>VsCode</code>  的远程连接状态中打开目录：<br>\n <code>/home/yuyu/project/hello_world</code></p>\n<h3 id=\"编写源代码\"><a class=\"markdownIt-Anchor\" href=\"#编写源代码\">#</a> 编写源代码</h3>\n<p>新建源文件：</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/9.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>敲上代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;hello world&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构建与调试\"><a class=\"markdownIt-Anchor\" href=\"#构建与调试\">#</a> 构建与调试</h3>\n<p>代码是写完了，接下来我们如何构建和调试呢？<br>\n我们这里用 <code>CMake</code>  做示例，尽管只有一个文件，杀鸡用牛刀的感觉，但我们真正开发项目自然是需要更加现代的项目管理方式的。</p>\n<p>同目录下新建 <code>CMakeLists.txt</code>  文件，输入以下内容：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.0</span>.<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(hello_world)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Output path of the library</span></span><br><span class=\"line\"><span class=\"keyword\">set</span>(EXECUTABLE_OUTPUT_PATH <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># We need to enable debugging information.</span></span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_BUILD_TYPE <span class=\"string\">&quot;Debug&quot;</span>) </span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_CXX_FLAGS_DEBUG <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O0 -Wall -g2 -ggdb&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">SET</span>(CMAKE_CXX_FLAGS_RELEASE <span class=\"string\">&quot;$ENV&#123;CXXFLAGS&#125; -O3 -Wall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># All original files in the current path.</span></span><br><span class=\"line\"><span class=\"keyword\">aux_source_directory</span>(<span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span> SRC_LIST)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build</span></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(hello_world <span class=\"variable\">$&#123;SRC_LIST&#125;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建方法一\"><a class=\"markdownIt-Anchor\" href=\"#构建方法一\">#</a> 构建方法一</h4>\n<p>在终端中输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build</span><br><span class=\"line\">cd build</span><br><span class=\"line\">cmake ..</span><br><span class=\"line\">make all</span><br></pre></td></tr></table></figure>\n<h4 id=\"构建方法二\"><a class=\"markdownIt-Anchor\" href=\"#构建方法二\">#</a> 构建方法二</h4>\n<p>右键 <code>CMakeLists.txt</code>  文件<br>\n 1.Configure All Projects<br>\n2.Build All Projects</p>\n<p>顺利的话都能够看到出现了一个 bin 目录，目录中就有我们编译的文件了。</p>\n<h4 id=\"调试\"><a class=\"markdownIt-Anchor\" href=\"#调试\">#</a> 调试</h4>\n<p>菜单栏中选择 <code>Run</code> -&gt; <code>Add Configuration</code> ，在弹出的菜单中选择 <code>GDB</code> ：</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/10.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>将此处的 <code>./bin/executable</code>  修改成 <code>$&#123;workspaceRoot&#125;/bin/hello_world</code></p>\n<ul>\n<li>\n<img src=\"/posts/54a8/11.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>回到 <code>hello_world.cpp</code> ，在第 4 行处按下 <code>f9</code>  设置断点， <code>f7</code>  编译， <code>f5</code>  运行。<br>\n成功断下！</p>\n<ul>\n<li>\n<img src=\"/posts/54a8/12.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果希望附加调试，则使用：</span><br><span class=\"line\">...</span><br><span class=\"line\">&quot;request&quot;:&quot;attach&quot;,</span><br><span class=\"line\">&quot;processId&quot;:&quot;$&#123;command:pickProcess&#125;&quot;,</span><br><span class=\"line\">&quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/bin/hello_world&quot;,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">附加可能会出现需要root权限的情况， 使用root用户登录可以解决此问题。</span><br></pre></td></tr></table></figure>\n<h1 id=\"gcc升级至132\"><a class=\"markdownIt-Anchor\" href=\"#gcc升级至132\">#</a> GCC 升级至 13.2</h1>\n<p>由于 Ubuntu22.04 自带的 GCC 版本是 11 的，这里因为个人需要需要升级成 13，特意记录一下。</p>\n<h2 id=\"下载gcc\"><a class=\"markdownIt-Anchor\" href=\"#下载gcc\">#</a> 下载 GCC</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a class=\"markdownIt-Anchor\" href=\"#解压\">#</a> 解压</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf gcc-13.2.0.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装组件\"><a class=\"markdownIt-Anchor\" href=\"#安装组件\">#</a> 安装组件</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd gcc-13.2.0/</span><br><span class=\"line\">./contrib/download_prerequisites</span><br></pre></td></tr></table></figure>\n<h2 id=\"构建\"><a class=\"markdownIt-Anchor\" href=\"#构建\">#</a> 构建</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir build &amp;&amp; cd build</span><br><span class=\"line\">../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib</span><br><span class=\"line\">sudo make -j2</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装-2\"><a class=\"markdownIt-Anchor\" href=\"#安装-2\">#</a> 安装</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新c库\"><a class=\"markdownIt-Anchor\" href=\"#更新c库\">#</a> 更新 C++ 库</h2>\n<p>不更新的话编译出来的程序会无法运行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install --only-upgrade libstdc++6</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看更新结果\"><a class=\"markdownIt-Anchor\" href=\"#查看更新结果\">#</a> 查看更新结果</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</span><br></pre></td></tr></table></figure>\n<p>以下是新的 C++ 库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">GLIBCXX_3.4.31</span><br><span class=\"line\">GLIBCXX_3.4.32</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考</h1>\n<ol>\n<li><a href=\"https://www.cnblogs.com/x_wukong/p/4475567.html\">Linux 上安装使用 SSH (ubuntu&amp;&amp;redhat)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/68577071\">VS Code Remote SSH 配置</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_48617416/article/details/131729829\">Linux 系统 ubuntu22.04 安装最新版的 gcc13.1.0 编译器，支持 c++20、23</a></li>\n<li><a href=\"https://stackoverflow.com/questions/76974555/glibcxx-3-4-32-not-found-error-at-runtime-gcc-13-2-0\">“`GLIBCXX_3.4.32’ not found” error at runtime. GCC 13.2.0</a></li>\n</ol>\n",
            "tags": [
                "C++",
                "Linux"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/c23d.html",
            "url": "http://yuyuaqwq.github.io/posts/c23d.html",
            "title": "0.前言",
            "date_published": "2023-10-28T14:25:37.000Z",
            "content_html": "<p>好久没写博客了…</p>\n<p>嗯… 因为某些原因，打算转 Linux 下做 C++ 开发，Windows 的东西就当成业余的兴趣去研究吧。</p>\n<p>这个系列的文章就记录一下我在学习过程中的一些思考，想法，以及备忘吧，就这样吧。</p>\n",
            "tags": [
                "C++",
                "Linux"
            ]
        }
    ]
}