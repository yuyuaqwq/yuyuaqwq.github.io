{
    "version": "https://jsonfeed.org/version/1",
    "title": "鹿鹿鱼鱼 • All posts by \"mfc\" category",
    "description": "人为什么要起床？",
    "home_page_url": "http://yuyuaqwq.github.io",
    "items": [
        {
            "id": "http://yuyuaqwq.github.io/posts/d43b.html",
            "url": "http://yuyuaqwq.github.io/posts/d43b.html",
            "title": "【MFC】菜单",
            "date_published": "2022-10-15T07:28:54.120Z",
            "content_html": "<h1 id=\"菜单简述\"><a class=\"markdownIt-Anchor\" href=\"#菜单简述\">#</a> 菜单简述</h1>\n<p>Windows 的菜单分为两类：</p>\n<ul>\n<li>窗口菜单</li>\n<li>弹出式菜单</li>\n</ul>\n<p>窗口菜单是挂接到窗口上的；<br>\n弹出式菜单是根据程序设计者的需要在某处弹出的。</p>\n<h1 id=\"添加菜单资源\"><a class=\"markdownIt-Anchor\" href=\"#添加菜单资源\">#</a> 添加菜单资源</h1>\n<ol>\n<li>右键 <code>项目</code> ， <code>添加</code>  -&gt;  <code>资源</code></li>\n<li>选择 <code>Menu</code> ，点击 <code>新建</code> ，进入资源编辑界面。</li>\n<li>顶层菜单 (类型为窗口菜单) 添加一个项 <code>新建</code> 、顶层的子菜单 (类型为弹出式菜单) 添加一个项 <code>文件</code></li>\n<li>修改顶层菜单的资源为 <code>IDR_MENU_TOP</code></li>\n<li>修改顶层菜单的 <code>新建</code> 项的子菜单的 <code>文件</code> 项的资源为 <code>ID_MENU_FILE_NEW</code> 。</li>\n</ol>\n<blockquote>\n<p>注：此处说明的菜单类型并不需要你在编辑时设置，而是编辑资源时该菜单属于什么类型<br>\n顶层菜单的类型就是 <code>窗口菜单</code> <br>\n顶层菜单的子菜单类型就是 <code>弹出式菜单</code></p>\n</blockquote>\n<p>资源编辑界面示范：</p>\n<ul>\n<li>\n\n</li>\n</ul>\n<h1 id=\"使用窗口菜单\"><a class=\"markdownIt-Anchor\" href=\"#使用窗口菜单\">#</a> 使用窗口菜单</h1>\n<details class=\"folding-tag\" blue><summary> 代码示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;resource.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\">    <span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">afx_msg <span class=\"type\">int</span> <span class=\"title\">OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnMenu_File_New</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    CMenu* m_pMenu;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(CMyFrameWnd, CFrameWnd)</span><br><span class=\"line\">    <span class=\"built_in\">ON_WM_CREATE</span>()</span><br><span class=\"line\">    <span class=\"built_in\">ON_COMMAND</span>(ID_MENU_FILE_NEW, OnMenu_File_New)</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">int</span> <span class=\"title\">CMyFrameWnd::OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span> </span>&#123;</span><br><span class=\"line\">    m_pMenu = <span class=\"keyword\">new</span> CMenu;</span><br><span class=\"line\">    m_pMenu-&gt;<span class=\"built_in\">LoadMenu</span>(IDR_MENU_TOP);</span><br><span class=\"line\">    <span class=\"built_in\">SetMenu</span>(m_pMenu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">CMyFrameWnd::OnMenu_File_New</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;new&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>代码想必读者也比较熟悉了，有一些需要注意的改动如下：</p>\n<ol>\n<li><code>CMyFrameWnd</code>  添加私有成员 <code>CMenu* m_pMenu</code> ；</li>\n<li>添加了一个新的消息映射条目 <code>ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)</code> ；</li>\n<li>为消息映射函数添加了宏 <code>afx_msg</code> ；\n<ul>\n<li>并无特殊作用，仅为提高代码可读性。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"挂接窗口菜单\"><a class=\"markdownIt-Anchor\" href=\"#挂接窗口菜单\">#</a> 挂接窗口菜单</h2>\n<div class=\"note warning no-icon flat\"><p><code>CMyFrameWnd::OnCreate</code></p>\n</div>\n<p>首先，代码中 <code>new</code>  了一个 <code>CMenu</code>  类对象，使我们添加的私有成员指向它，这是 MFC 封装的菜单类。<br>\n其次，调用了 <code>CMenu::LoadMenu</code> ，用于加载我们添加的菜单资源。<br>\n最后，以当前 <code>CMyFrameWnd</code>  类对象的身份，调用了 <code>CFrameWnd::SetMenu</code>  成员函数。</p>\n<p>至此，我们完成了将窗口菜单挂接到 <code>CMyFrameWnd</code>  类对象上的工作。</p>\n<h2 id=\"处理菜单项回调事件\"><a class=\"markdownIt-Anchor\" href=\"#处理菜单项回调事件\">#</a> 处理菜单项回调事件</h2>\n<div class=\"note warning no-icon flat\"><p><code>ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)</code> <br>\n <code>CMyFrameWnd::OnMenu_File_New</code></p>\n</div>\n<p>只需要通过 <code>ON_COMMAND</code>  宏，就可以建立指定菜单资源被点击 ( <code>WM_COMMAND</code>  消息) 与回调函数的映射。</p>\n<h2 id=\"wm_command\"><a class=\"markdownIt-Anchor\" href=\"#wm_command\">#</a> WM_COMMAND</h2>\n<p>命令消息，在菜单被点击等事件发生时产生。</p>\n<p>在 MFC 的消息处理架构中， <code>WM_COMMAND</code>  的处理流程与我们先前接触的 <code>WM_CREATE</code>  等消息是不同的。<br>\n我们回到 <code>CWnd::OnWndMsg</code>  函数，在函数开始部分就能看到相关源码。</p>\n<details class=\"folding-tag\" blue><summary> 代码示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CWnd::OnWndMsg</span><span class=\"params\">(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tLRESULT lResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">union</span> <span class=\"title class_\">MessageMapFunctions</span> mmf;</span><br><span class=\"line\">\tmmf.pfn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tCInternalGlobalLock winMsgLock;</span><br><span class=\"line\">\t<span class=\"comment\">// special case for commands</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (message == WM_COMMAND)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">OnCommand</span>(wParam, lParam))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tlResult = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">goto</span> LReturnTrue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>只要是 <code>WM_COMMAND</code>  消息，会调用 <code>CWnd::OnCommand</code> ，返回后就再次返回了。</p>\n<p>最终会走到全局静态函数 <code>_AfxDispatchCmdMsg</code>  中回调 <code>CMyFrameWnd::OnMenu_File_New</code> 。</p>\n<p>由于代码较为繁琐，故不再向下深入，读者感兴趣可以自行调试。</p>\n<h1 id=\"使用弹出式菜单\"><a class=\"markdownIt-Anchor\" href=\"#使用弹出式菜单\">#</a> 使用弹出式菜单</h1>\n<h2 id=\"wm_contextmenu\"><a class=\"markdownIt-Anchor\" href=\"#wm_contextmenu\">#</a> WM_CONTEXTMENU</h2>\n<p><code>DefWindowProc</code>  在处理 <code>WM_RBUTTONUP</code>  或 <code>WM_NCRBUTTONUP</code>  消息，或是用户键入 <code>SHIFT+F10</code>  时，生成 <code>WM_CONTEXTMENU</code>  消息。</p>\n<h2 id=\"实现右键客户区弹出菜单\"><a class=\"markdownIt-Anchor\" href=\"#实现右键客户区弹出菜单\">#</a> 实现右键客户区弹出菜单</h2>\n<p>我们知道，在菜单编辑界面中，顶层菜单的子菜单都是独立的弹出式菜单；</p>\n<ul>\n<li>故这些子菜单都是可以被单独弹出的</li>\n<li>而顶层菜单项被点击时弹出子菜单不需要我们处理，是因为 windows 替我们做好了相关的工作。</li>\n</ul>\n<p>接下来我们通过映射 <code>WM_CONTEXTMENU</code>  消息，实现在客户区右键，弹出顶层菜单 <code>文件</code> 的子菜单。</p>\n<details class=\"folding-tag\" blue><summary> 代码示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;resource.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\">    <span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">afx_msg <span class=\"type\">int</span> <span class=\"title\">OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnMenu_File_New</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">OnContextMenu</span><span class=\"params\">(CWnd* wnd, CPoint pos)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    CMenu* m_pMenu;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(CMyFrameWnd, CFrameWnd)</span><br><span class=\"line\">    <span class=\"built_in\">ON_COMMAND</span>(ID_MENU_FILE_NEW, OnMenu_File_New)</span><br><span class=\"line\">    <span class=\"built_in\">ON_WM_CREATE</span>()</span><br><span class=\"line\">    <span class=\"built_in\">ON_WM_CONTEXTMENU</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">int</span> <span class=\"title\">CMyFrameWnd::OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span> </span>&#123;</span><br><span class=\"line\">    m_pMenu = <span class=\"keyword\">new</span> CMenu;</span><br><span class=\"line\">    m_pMenu-&gt;<span class=\"built_in\">LoadMenu</span>(IDR_MENU_TOP);</span><br><span class=\"line\">    <span class=\"built_in\">SetMenu</span>(m_pMenu);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">CMyFrameWnd::OnContextMenu</span><span class=\"params\">(CWnd* wnd, CPoint pos)</span> </span>&#123;</span><br><span class=\"line\">    CMenu* pNewMenu = m_pMenu-&gt;<span class=\"built_in\">GetSubMenu</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    pNewMenu-&gt;<span class=\"built_in\">TrackPopupMenu</span>(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">afx_msg <span class=\"type\">void</span> <span class=\"title\">CMyFrameWnd::OnMenu_File_New</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;new&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>代码并不复杂，建议读者自行尝试调试运行。</p>\n<blockquote>\n<p>参考资料：<br>\n<a href=\"https://www.cnblogs.com/hanford/p/6163690.html\">https://www.cnblogs.com/hanford/p/6163690.html</a><br>\n<a href=\"https://www.cnblogs.com/greenleaf1976/p/16460330.html\">https://www.cnblogs.com/greenleaf1976/p/16460330.html</a></p>\n</blockquote>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/c22c.html",
            "url": "http://yuyuaqwq.github.io/posts/c22c.html",
            "title": "【MFC】探索消息映射机制的实现原理",
            "date_published": "2022-10-11T14:08:21.000Z",
            "content_html": "<h1 id=\"消息机制简述\"><a class=\"markdownIt-Anchor\" href=\"#消息机制简述\">#</a> 消息机制简述</h1>\n<p>我们知道，Windows 的窗口是由<strong>消息</strong>驱动的；<br>\nWindows 通过捕获鼠标、键盘等输入设备产生的动作，再生成对应的消息，并传递给相应的窗口所属的线程。</p>\n<div class=\"note purple icon-padding simple\"><i class=\"note-icon fas fa-fan\"></i><p>直接基于 <code>Win32API</code>  开发时，我们需要在注册窗口类时指定<strong>窗口过程函数</strong>，以告知 Windows 回调 (传递消息) 的入口。</p>\n</div>\n<hr>\n<h1 id=\"mfc的消息映射\"><a class=\"markdownIt-Anchor\" href=\"#mfc的消息映射\">#</a> MFC 的消息映射</h1>\n<p>而 MFC 为我们提供了一种更为方便的机制，<emp>直接为一个消息与一个函数建立映射关系</emp>，在消息产生时，回调此函数，而不再需要我们去自行分发。</p>\n<details class=\"folding-tag\" blue><summary> 消息映射示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> : <span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">LRESULT <span class=\"title\">OnCreate</span><span class=\"params\">(WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;Window Create!&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(CMyFrameWnd, CFrameWnd)</span><br><span class=\"line\">\t<span class=\"built_in\">ON_MESSAGE</span>(WM_CREATE, OnCreate)   <span class=\"comment\">// 将WM_CREATE与CMyFrameWnd类的成员函数OnCreate建立映射</span></span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> : <span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tCMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">\t\tframe-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">\t\tm_pMainWnd = frame;</span><br><span class=\"line\">\t\tframe-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">\t\tframe-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<h2 id=\"消息映射宏\"><a class=\"markdownIt-Anchor\" href=\"#消息映射宏\">#</a> 消息映射宏</h2>\n<p>MFC 的消息映射是通过几个<strong>宏函数</strong>来实现的，我们以上述代码为例，将宏展开，一探究竟。</p>\n<ul>\n<li>\n<p>声明宏<br>\n MFC 的声明宏，就是在窗口类中声明两个受保护的成员函数。</p>\n  <details class=\"folding-tag\" blue><summary> ECLARE_MESSAGE_MAP() </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">GetThisMessageMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n</li>\n<li>\n<p>定义宏<br>\n定义则稍显复杂，由多个宏函数组成，实际上是在实现声明宏声明的成员函数。</p>\n  <details class=\"folding-tag\" blue><summary> BEGIN_MESSAGE_MAP() </summary>\n              <div class='content'>\n              <p><code>BEGIN_MESSAGE_MAP(CMyFrameWnd, CFrameWnd)</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PTM_WARNING_DISABLE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">CMyFrameWnd::GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">GetThisMessageMap</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">CMyFrameWnd::GetThisMessageMap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> CMyFrameWnd ThisClass;</span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> CFrameWnd TheBaseClass;</span><br><span class=\"line\">\t__pragma(<span class=\"built_in\">warning</span>(push))</span><br><span class=\"line\">\t__pragma(<span class=\"built_in\">warning</span>(disable: <span class=\"number\">4640</span>))</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP_ENTRY _messageEntries[] =</span><br><span class=\"line\">\t&#123;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n  <details class=\"folding-tag\" blue><summary> ON_MESSAGE() </summary>\n              <div class='content'>\n              <p><code>ON_MESSAGE(WM_CREATE, OnCreate)</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 实际上是在为_messageEntries变量的初始化列表添加结构体元素</span></span><br><span class=\"line\">\t\t&#123; WM_CREATE, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(<span class=\"built_in\">static_cast</span>&lt;<span class=\"built_in\">LRESULT</span>(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&gt;(OnCreate))&#125;,</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n  <details class=\"folding-tag\" blue><summary> END_MESSAGE_MAP() </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_end, (AFX_PMSG)<span class=\"number\">0</span> &#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t__pragma(<span class=\"built_in\">warning</span>(pop))</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP messageMap =</span><br><span class=\"line\">\t&#123; &amp;TheBaseClass::GetThisMessageMap, &amp;_messageEntries[<span class=\"number\">0</span>] &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;messageMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">PTM_WARNING_RESTORE</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n</li>\n<li>\n<p>整体展开</p>\n<details class=\"folding-tag\" blue><summary> 消息映射示例-宏展开 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">GetThisMessageMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">LRESULT <span class=\"title\">OnCreate</span><span class=\"params\">(WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;Window Create!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">PTM_WARNING_DISABLE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">CMyFrameWnd::GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetThisMessageMap</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">CMyFrameWnd::GetThisMessageMap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> CMyFrameWnd ThisClass;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> CFrameWnd TheBaseClass;</span><br><span class=\"line\">    __pragma(<span class=\"built_in\">warning</span>(push))</span><br><span class=\"line\">    __pragma(<span class=\"built_in\">warning</span>(disable: <span class=\"number\">4640</span>))</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP_ENTRY _messageEntries[] =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &#123; WM_CREATE, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(<span class=\"built_in\">static_cast</span>&lt;<span class=\"built_in\">LRESULT</span>(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&gt;(OnCreate))&#125;,</span><br><span class=\"line\">      &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_end, (AFX_PMSG)<span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    __pragma(<span class=\"built_in\">warning</span>(pop))</span><br><span class=\"line\">        <span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP messageMap =</span><br><span class=\"line\">    &#123; &amp;TheBaseClass::GetThisMessageMap, &amp;_messageEntries[<span class=\"number\">0</span>] &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;messageMap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">PTM_WARNING_RESTORE</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n</li>\n</ul>\n<div class=\"note purple icon-padding simple\"><i class=\"note-icon fas fa-fan\"></i><p>通过宏添加消息映射时，实际上是重写了 <code>CFrameWnd</code>  类的 <code>GetMessageMap</code>  成员虚函数；<br>\n而 <code>GetMessageMap</code>  函数初始化了一个名为 <code>_messageEntries</code>  和 <code>messageMap</code>  的<strong>静态局部变量</strong>，并将该变量的地址返回。<br>\n我们简单猜测，与上一节重写 <code>WindowProc</code>  类似，微软在<strong>窗口过程函数</strong> <code>AfxWndProc</code>  的某处，得到窗口对象之后，以窗口对象的身份调用其成员虚函数 <code>GetMessageMap</code> ；<br>\n由于成员虚函数被重写的原因，得到我们所设定的<strong>映射关系表</strong>，我们这里就把它叫做<strong>消息映射表</strong>；<br>\n基于此消息映射表，就可以在<strong>窗口过程函数</strong>中，<emp>根据消息调用对应的成员函数</emp>。</p>\n</div>\n<hr>\n<h1 id=\"探索实现原理\"><a class=\"markdownIt-Anchor\" href=\"#探索实现原理\">#</a> 探索实现原理</h1>\n<p>我们基本上能够理解消息映射机制的工作原理，这小节我们就扒一下微软的源码，以便更清晰的了解消息映射机制。</p>\n<details class=\"folding-tag\" blue><summary> AfxWndProc </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT CALLBACK</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">AfxWndProc</span><span class=\"params\">(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// special message which identifies the window as using AfxWndProc</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (nMsg == WM_QUERYAFXWNDPROC)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// all other messages route through message map</span></span><br><span class=\"line\">\tCWnd* pWnd = CWnd::<span class=\"built_in\">FromHandlePermanent</span>(hWnd);</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pWnd != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pWnd==<span class=\"literal\">NULL</span> || pWnd-&gt;m_hWnd == hWnd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pWnd == <span class=\"literal\">NULL</span> || pWnd-&gt;m_hWnd != hWnd)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ::<span class=\"built_in\">DefWindowProc</span>(hWnd, nMsg, wParam, lParam);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">AfxCallWndProc</span>(pWnd, hWnd, nMsg, wParam, lParam);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>调试上面提供的代码，首先在 <code>AfxWndProc</code>  函数设置断点；</p>\n<p>继续走到 <code>AfxCallWndProc</code> ；</p>\n<details class=\"folding-tag\" blue><summary> AfxCallWndProc </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT AFXAPI <span class=\"title\">AfxCallWndProc</span><span class=\"params\">(CWnd* pWnd, HWND hWnd, UINT nMsg,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tWPARAM wParam = <span class=\"number\">0</span>, LPARAM lParam = <span class=\"number\">0</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t\t<span class=\"comment\">// delegate to object&#x27;s WindowProc</span></span><br><span class=\"line\">\t\tlResult = pWnd-&gt;<span class=\"built_in\">WindowProc</span>(nMsg, wParam, lParam);</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>到此处停下，此时你可能会有些疑惑，诶，我们并没有重写 <code>Cwnd::WindowProc</code> ，为什么要到此处停下？<br>\n因为微软将消息映射机制放到了此函数内实现。</p>\n<details class=\"folding-tag\" blue><summary> CWnd::WindowProc </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">LRESULT <span class=\"title\">CWnd::WindowProc</span><span class=\"params\">(UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// OnWndMsg does most of the work, except for DefWindowProc call</span></span><br><span class=\"line\">\tLRESULT lResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">OnWndMsg</span>(message, wParam, lParam, &amp;lResult))</span><br><span class=\"line\">\t\tlResult = <span class=\"built_in\">DefWindowProc</span>(message, wParam, lParam);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lResult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>继续到进入 <code>CWnd::OnWndMsg</code> 。</p>\n<details class=\"folding-tag\" blue><summary> CWnd::OnWndMsg </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CWnd::OnWndMsg</span><span class=\"params\">(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"type\">const</span> AFX_MSGMAP* pMessageMap; pMessageMap = <span class=\"built_in\">GetMessageMap</span>();</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>上面的代码我们暂时不关心，只关心对 <code>GetMessageMap</code>  函数的调用；<br>\n还记得吗？我们将消息声明 / 定义宏展开后，就相当于我们为 <code>CMyFrameWnd</code>  类定义了两个函数：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">GetThisMessageMap</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span>;</span><br></pre></td></tr></table></figure>\n<p>此处是以 <code>CMyFrameWnd</code>  类的对象的身份调用的 <code>GetMessageMap</code> ，因此实际上是在调用我们类中由消息映射宏重写的成员虚函数。</p>\n<details class=\"folding-tag\" blue><summary> CMyFrameWnd::GetMessageMap </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* <span class=\"title\">CMyFrameWnd::GetMessageMap</span><span class=\"params\">()</span> <span class=\"type\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">GetThisMessageMap</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>这里只是简单的调用了静态成员函数 <code>GetThisMessageMap</code> 。</p>\n<details class=\"folding-tag\" blue><summary> CMyFrameWnd::GetThisMessageMap </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">const</span> AFX_MSGMAP* PASCAL <span class=\"title\">CMyFrameWnd::GetThisMessageMap</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP_ENTRY _messageEntries[] =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &#123; WM_CREATE, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(<span class=\"built_in\">static_cast</span>&lt;<span class=\"built_in\">LRESULT</span>(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&gt;(&amp;OnCreate)) &#125;,</span><br><span class=\"line\">      &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, AfxSig_end, (AFX_PMSG)<span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">static</span> <span class=\"type\">const</span> AFX_MSGMAP messageMap =</span><br><span class=\"line\">    &#123; &amp;CFrameWnd::GetThisMessageMap, &amp;_messageEntries[<span class=\"number\">0</span>] &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;messageMap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>我这里对原先的代码做了一些简化，更方便看一点，实际上呢就是为当前函数的静态局部变量 <code>_messageEntries</code> 、 <code>messageMap</code>  赋值，并返回 <code>messageMap</code>  的地址。</p>\n<p>又回到 <code>CWnd::OnWndMsg</code></p>\n<details class=\"folding-tag\" blue><summary> CWnd::OnWndMsg </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CWnd::OnWndMsg</span><span class=\"params\">(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"type\">const</span> AFX_MSGMAP* pMessageMap; pMessageMap = <span class=\"built_in\">GetMessageMap</span>();</span><br><span class=\"line\">  UINT iHash; iHash = (<span class=\"built_in\">LOWORD</span>((DWORD_PTR)pMessageMap) ^ message) &amp; (iHashMax<span class=\"number\">-1</span>);</span><br><span class=\"line\">\twinMsgLock.<span class=\"built_in\">Lock</span>(CRIT_WINMSGCACHE);</span><br><span class=\"line\">\tAFX_MSG_CACHE* pMsgCache; pMsgCache = &amp;_afxMsgCache[iHash];</span><br><span class=\"line\">\t<span class=\"type\">const</span> AFX_MSGMAP_ENTRY* lpEntry;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (message == pMsgCache-&gt;nMsg &amp;&amp; pMessageMap == pMsgCache-&gt;pMessageMap)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// not in cache, look for it</span></span><br><span class=\"line\">\t\tpMsgCache-&gt;nMsg = message;</span><br><span class=\"line\">\t\tpMsgCache-&gt;pMessageMap = pMessageMap;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"comment\">/* pMessageMap already init&#x27;ed */</span>; pMessageMap-&gt;pfnGetBaseMap != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      pMessageMap = (*pMessageMap-&gt;pfnGetBaseMap)())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">      ...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>使 <code>pMessageMap</code>  指向静态局部变量 <code>messageMap</code> 。</p>\n<p>记住上述代码的第 <code>19</code> ~ <code>20</code>  行要进入循环；</p>\n<p>剩下的我们暂时不关心，继续向下看。</p>\n<details class=\"folding-tag\" blue><summary> CWnd::OnWndMsg </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"comment\">/* pMessageMap already init&#x27;ed */</span>; pMessageMap-&gt;pfnGetBaseMap != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\tpMessageMap = (*pMessageMap-&gt;pfnGetBaseMap)())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Note: catch not so common but fatal mistake!!</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//      BEGIN_MESSAGE_MAP(CMyWnd, CMyWnd)</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">ASSERT</span>(pMessageMap != (*pMessageMap-&gt;pfnGetBaseMap)());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (message &lt; <span class=\"number\">0xC000</span>)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// constant window message</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((lpEntry = <span class=\"built_in\">AfxFindMessageEntry</span>(pMessageMap-&gt;lpEntries,</span><br><span class=\"line\">\t\t\t\t\tmessage, <span class=\"number\">0</span>, <span class=\"number\">0</span>)) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tpMsgCache-&gt;lpEntry = lpEntry;</span><br><span class=\"line\">\t\t\t\t\twinMsgLock.<span class=\"built_in\">Unlock</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> LDispatch;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>第 <code>10</code> ~ <code>11</code>  行是关键函数， <code>pMessageMap-&gt;lpEntries</code>  即是访问静态局部变量 <code>messageMap</code>  的第二个成员，也就是 <code>_messageEntries</code>  的地址；<br>\n而 <code>message</code>  就是本次窗口过程处理的消息 ID 了；</p>\n<emp>即传入消息映射表地址和消息，查找对应的条目</emp>。\n<p>返回值即是 <code>_messageEntries</code>  中对应条目的地址，如果返回 <code>NULL</code>  表示消息映射表中不存在此消息。<br>\n我们假定此消息已经被我们影射了，跟随 <code>goto LDispatch;</code>  继续。</p>\n<details class=\"folding-tag\" blue><summary> CWnd::OnWndMsg </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LDispatch:</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(message &lt; <span class=\"number\">0xC000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmmf.pfn = lpEntry-&gt;pfn;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (lpEntry-&gt;nSig)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AfxSig_l_w_l:</span><br><span class=\"line\">\t\tlResult = (<span class=\"keyword\">this</span>-&gt;*mmf.pfn_l_w_l)(wParam, lParam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>最终会在此处以 <code>CMyFrameWnd</code>  类对象的身份调用我们指定的 <code>OnCreate</code>  成员函数。</p>\n<h2 id=\"消息映射表链表\"><a class=\"markdownIt-Anchor\" href=\"#消息映射表链表\">#</a> 消息映射表链表</h2>\n<p>整个流程基本上到这里就完成了，实际上我们留了一个小坑，即上面代码中我们暂时跳过的 for 循环。</p>\n<p>实际上那是在遍历<emp>消息映射表链表</emp>，但是我们并没有提过，存在多个消息映射表这件事。</p>\n<p>实际上， <code>CFrameWnd</code>  类也使用了消息映射机制，而 <code>CMyFrameWnd::GetMessageMap</code>  函数中的静态局部变量 <code>messageMap</code> ，第一个成员指向的就是静态成员函数 <code>CFrameWnd::GetThisMessageMap</code> 。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"comment\">/* pMessageMap already init&#x27;ed */</span>; pMessageMap-&gt;pfnGetBaseMap != <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      pMessageMap = (*pMessageMap-&gt;pfnGetBaseMap)())</span><br></pre></td></tr></table></figure>\n<p>而 <code>pMessageMap-&gt;pfnGetBaseMap</code> ，就是在访问 <code>messageMap</code>  的第一个成员。</p>\n<p>此 for 循环的工作：<br>\n从链表头 ( <code>CMyFrameWnd</code> ) 开始，<emp>即最子类向上遍历，依次查找是否存在与本次消息匹配的消息映射关系，存在则调用对应的成员函数并返回</emp></p>\n<hr>\n<h1 id=\"消息映射分类\"><a class=\"markdownIt-Anchor\" href=\"#消息映射分类\">#</a> 消息映射分类</h1>\n<p>其实，除了 <code>ON_MESSAGE</code>  之外，微软还提供了更加方便的，直接映射指定消息的宏。</p>\n<details class=\"folding-tag\" blue><summary> 代码示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\">    <span class=\"built_in\">DECLARE_MESSAGE_MAP</span>()</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">BEGIN_MESSAGE_MAP</span>(CMyFrameWnd, CFrameWnd)</span><br><span class=\"line\">    <span class=\"built_in\">ON_WM_CREATE</span>()</span><br><span class=\"line\"><span class=\"built_in\">END_MESSAGE_MAP</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">CMyFrameWnd::OnCreate</span><span class=\"params\">(LPCREATESTRUCT pCs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;OnCreate!&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>我们将 <code>ON_WM_CREATE</code>  宏展开，看看与 <code>ON_MESSAGE</code>  有什么区别。</p>\n<details class=\"folding-tag\" blue><summary> ON_WM_CREATE </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ON_WM_CREATE() \\</span></span><br><span class=\"line\"><span class=\"meta\">\t&#123; WM_CREATE, 0, 0, 0, AfxSig_is, \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t(AFX_PMSG) (AFX_PMSGW) \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t(static_cast<span class=\"string\">&lt; int (AFX_MSG_CALL CWnd::*)(LPCREATESTRUCT) &gt;</span> ( &amp;ThisClass :: OnCreate)) &#125;,</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> ON_MESSAGE </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ON_MESSAGE(message, memberFxn) \\</span></span><br><span class=\"line\"><span class=\"meta\">\t&#123; message, 0, 0, 0, AfxSig_lwl, \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t(AFX_PMSG)(AFX_PMSGW) \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t(static_cast<span class=\"string\">&lt; LRESULT (AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM) &gt;</span> \\</span></span><br><span class=\"line\"><span class=\"meta\">\t\t(memberFxn)) &#125;,</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>首先就是， <code>ON_WM_CREATE</code>  不再要求我们提供参数消息 id 与回调函数名，而是直接指定为 <code>WM_CREATE</code>  与 <code>OnCreate</code> ；<br>\n其次， <code>ON_MESSAGE</code>  与 <code>ON_WM_CREATE</code>  添加的消息映射条目 <code>AFX_MSGMAP_ENTRY</code>  元素的第 5 个成员 <code>nSig</code> ，分别是 <code>AfxSig_l_w_l</code>  与 <code>AfxSig_i_v_s</code> 。</p>\n<p>还记得吗，我们指定的消息映射函数，都是在 <code>CWnd::OnWndMsg</code>  函数内被调用的；<br>\n而先前通过 <code>ON_MESSAGE</code>  定义的消息映射，回调函数原型都是相同的。<br>\n而通过 <code>ON_WM_CREATE</code>  定义的消息映射，和 <code>ON_MESSAGE</code>  指定的消息映射函数的原型是不同的，那么 <code>CWnd::OnWndMsg</code>  是怎么区分不同的函数原型并进行回调的呢？</p>\n<p>我们回到 <code>CWnd::OnWndMsg</code>  函数：</p>\n<details class=\"folding-tag\" blue><summary> CWnd::OnWndMsg </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LDispatch:</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(message &lt; <span class=\"number\">0xC000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tmmf.pfn = lpEntry-&gt;pfn;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (lpEntry-&gt;nSig)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AfxSig_i_v_s:</span><br><span class=\"line\">\t\tlResult = (<span class=\"keyword\">this</span>-&gt;*mmf.pfn_i_s)(<span class=\"built_in\">reinterpret_cast</span>&lt;LPTSTR&gt;(lParam));</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> AfxSig_l_w_l:</span><br><span class=\"line\">\t\tlResult = (<span class=\"keyword\">this</span>-&gt;*mmf.pfn_l_w_l)(wParam, lParam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>其中最关键的就是 <code>switch (lpEntry-&gt;nSig)</code> ：</p>\n<ul>\n<li>通过 <code>ON_MESSAGE</code>  定义的消息映射时，nSig 成员是 <code>AfxSig_l_w_l</code> ；</li>\n<li>通过 <code>ON_WM_CREATE</code>  定义的消息映射时，nSig 成员是 <code>AfxSig_i_v_s</code></li>\n</ul>\n<p>这就是为什么，函数原型不同，回调也能正确进行的缘故。</p>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/78f0.html",
            "url": "http://yuyuaqwq.github.io/posts/78f0.html",
            "title": "【MFC】探索窗口创建机制的实现原理",
            "date_published": "2022-10-06T04:48:45.000Z",
            "content_html": "<h1 id=\"何时创建窗口\"><a class=\"markdownIt-Anchor\" href=\"#何时创建窗口\">#</a> 何时创建窗口？</h1>\n<p>我们在直接使用 <code>Win32API</code>  开发窗口程序的时候，一般都是在消息循环之前调用相关的函数创建窗口，那么 MFC 的窗口是在何时被创建的呢？</p>\n<p>实际上，我们重写了 <code>InitInstance</code>  成员虚函数，并在函数中编写了创建了窗口的代码；<br>\n根据我们之前分析的程序流程， <code>InitInstance</code>  的调用时机在 <code>Run</code>  之前，这自然也合情合理。</p>\n<h1 id=\"窗口的基本创建流程\"><a class=\"markdownIt-Anchor\" href=\"#窗口的基本创建流程\">#</a> 窗口的基本创建流程</h1>\n<p>还是之前的示例代码：</p>\n<details class=\"folding-tag\" blue><summary> 示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>CMyFrameWnd* frame = new CMyFrameWnd;</code></p>\n</div>\n<p>我们 new 了一个 <code>CMyFrameWnd</code>  对象，而 <code>CMyFrameWnd</code>  类继承自 <code>CFrameWnd</code>  类。<br>\n <code>CFrameWnd</code>  是对框架窗口的封装。</p>\n<div class=\"note warning no-icon flat\"><p><code>frame-&gt;Create(nullptr, L&quot;MFCBase&quot;);</code></p>\n</div>\n<p>基于新建的 <code>frame</code> ，调用了 <code>Create</code>  成员函数，我们猜测内部应当是调用了 <code>CreateWindow</code>  之类创建窗口的函数。</p>\n<div class=\"note warning no-icon flat\"><p><code>m_pMainWnd = frame;</code></p>\n</div>\n<p><code>m_pMainWnd</code>  是 <code>CWinThread</code>  类的成员，指向当前线程的主窗口。<br>\n那么我们所做的其实就是，创建一个框架窗口，并使其成为 <code>g_theApp</code>  的主窗口。</p>\n<div class=\"tip \"><p>读者可能会有些疑惑，线程和窗口又有什么关系？<br>\n实际上，Windows 产生的消息都是发送给线程的，每一个窗口都必须关联到一个线程中，一个线程可以被多个窗口关联。<br>\n消息循环就是线程的工作， <code>GetMessage</code>  从当前线程的消息队列中获取消息；<br>\n <code>DispatchMessage</code>  负责将消息再次派发给当前线程的所属窗口中对应的窗口 ( <code>回调窗口过程函数</code> )。<br>\n我们所定义的 <code>g_theApp</code> ，表示的是应用程序的主线程。</p>\n</div>\n<div class=\"note warning no-icon flat\"><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br></pre></td></tr></table></figure></div>\n<p>这两行就更加明显了，猜测内部应当是调用了 <code>ShowWindow</code> 、 <code>UpdateWindow</code> 。</p>\n<h1 id=\"框架窗口的create分析\"><a class=\"markdownIt-Anchor\" href=\"#框架窗口的create分析\">#</a> 框架窗口的 Create 分析</h1>\n<p>我们在直接使用 <code>Win32API</code>  开发桌面应用时，创建窗口前会先注册窗口类、指定各种各样的字段和参数，创建窗口，十分繁琐。<br>\n而 MFC 为我们简化到只需要传递两个参数就能创建一个窗口，接下来我们进入这个函数内部一探究竟。</p>\n<details class=\"folding-tag\" blue><summary> CFrameWnd::Create 第一部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CFrameWnd::Create</span><span class=\"params\">(LPCTSTR lpszClassName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tLPCTSTR lpszWindowName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tDWORD dwStyle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">const</span> RECT&amp; rect,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tCWnd* pParentWnd,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tLPCTSTR lpszMenuName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tDWORD dwExStyle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tCCreateContext* pContext)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHMENU hMenu = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (lpszMenuName != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// load in a menu that will get destroyed when window gets destroyed</span></span><br><span class=\"line\">\t\tHINSTANCE hInst = <span class=\"built_in\">AfxFindResourceHandle</span>(lpszMenuName, ATL_RT_MENU);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((hMenu = ::<span class=\"built_in\">LoadMenu</span>(hInst, lpszMenuName)) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">TRACE</span>(traceAppMsg, <span class=\"number\">0</span>, <span class=\"string\">&quot;Warning: failed to load menu for CFrameWnd.\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">PostNcDestroy</span>();            <span class=\"comment\">// perhaps delete the C++ object</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>进到函数中，发现参数其实还是不少的。<br>\n为什么我们只传递了两个呢？想必是 MFC 在成员函数的声明处，为后面的参数设置了缺省值。</p>\n<div class=\"note warning no-icon flat\"><p><code>if (lpszMenuName != NULL)</code></p>\n</div>\n<p>我们并没有指定这个参数，因此此参数使用缺省值 <code>NULL</code> ，跳过此部分。</p>\n<details class=\"folding-tag\" blue><summary> CFrameWnd::Create 第二部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m_strTitle = lpszWindowName;    <span class=\"comment\">// save title for later</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">CreateEx</span>(dwExStyle, lpszClassName, lpszWindowName, dwStyle,</span><br><span class=\"line\">\t\trect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top,</span><br><span class=\"line\">\t\tpParentWnd-&gt;<span class=\"built_in\">GetSafeHwnd</span>(), hMenu, (LPVOID)pContext))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">TRACE</span>(traceAppMsg, <span class=\"number\">0</span>, <span class=\"string\">&quot;Warning: failed to create CFrameWnd.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (hMenu != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">DestroyMenu</span>(hMenu);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>关键调用明显就只有 <code>CreateEx</code>  这个成员函数了，继续深入。</p>\n<details class=\"folding-tag\" blue><summary> CWnd::CreateEx 第一部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL <span class=\"title\">CWnd::CreateEx</span><span class=\"params\">(DWORD dwExStyle, LPCTSTR lpszClassName,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tLPCTSTR lpszWindowName, DWORD dwStyle,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t<span class=\"type\">int</span> x, <span class=\"type\">int</span> y, <span class=\"type\">int</span> nWidth, <span class=\"type\">int</span> nHeight,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\tHWND hWndParent, HMENU nIDorHMenu, LPVOID lpParam)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(lpszClassName == <span class=\"literal\">NULL</span> || <span class=\"built_in\">AfxIsValidString</span>(lpszClassName) ||</span><br><span class=\"line\">\t\t<span class=\"built_in\">AfxIsValidAtom</span>(lpszClassName));</span><br><span class=\"line\">\t<span class=\"built_in\">ENSURE_ARG</span>(lpszWindowName == <span class=\"literal\">NULL</span> || <span class=\"built_in\">AfxIsValidString</span>(lpszWindowName));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// allow modification of several common create parameters</span></span><br><span class=\"line\">\tCREATESTRUCT cs;</span><br><span class=\"line\">\tcs.dwExStyle = dwExStyle;</span><br><span class=\"line\">\tcs.lpszClass = lpszClassName;</span><br><span class=\"line\">\tcs.lpszName = lpszWindowName;</span><br><span class=\"line\">\tcs.style = dwStyle;</span><br><span class=\"line\">\tcs.x = x;</span><br><span class=\"line\">\tcs.y = y;</span><br><span class=\"line\">\tcs.cx = nWidth;</span><br><span class=\"line\">\tcs.cy = nHeight;</span><br><span class=\"line\">\tcs.hwndParent = hWndParent;</span><br><span class=\"line\">\tcs.hMenu = nIDorHMenu;</span><br><span class=\"line\">\tcs.hInstance = <span class=\"built_in\">AfxGetInstanceHandle</span>();</span><br><span class=\"line\">\tcs.lpCreateParams = lpParam;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">PreCreateWindow</span>(cs))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">PostNcDestroy</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"built_in\">AfxHookWindowCreate</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\tHWND hWnd = <span class=\"built_in\">CreateWindowEx</span>(cs.dwExStyle, cs.lpszClass,</span><br><span class=\"line\">\t\t\tcs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,</span><br><span class=\"line\">\t\t\tcs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>我们可以直接看到对全局函数 <code>CreateWindowEx</code>  的调用，说明在这之前应该存在注册窗口类的代码。</p>\n<div class=\"note warning no-icon flat\"><p><code>if (!PreCreateWindow(cs))</code></p>\n</div>\n<p>实际上窗口类的注册位于 <code>PreCreateWindow</code>  成员函数中，如果 <code>cs.lpszClass</code>  为 <code>NULL</code> ，则会指定一个不会重复的窗口类名并基于此窗口类名注册窗口类。<br>\n而 <code>cs.lpszClass</code>  的值正是 <code>lpszClassName</code>  参数，是我们在调用 <code>CFrameWnd::Create</code>  时传递的 NULL。</p>\n<details class=\"folding-tag\" blue><summary> AfxEndDeferRegisterClass 部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">BOOL AFXAPI <span class=\"title\">AfxEndDeferRegisterClass</span><span class=\"params\">(LONG fToRegister)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// mask off all classes that are already registered</span></span><br><span class=\"line\">\tAFX_MODULE_STATE* pModuleState = <span class=\"built_in\">AfxGetModuleState</span>();</span><br><span class=\"line\">\tfToRegister &amp;= ~pModuleState-&gt;m_fRegisteredClasses;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fToRegister == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLONG fRegisteredClasses = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// common initialization</span></span><br><span class=\"line\">\tWNDCLASS wndcls;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;wndcls, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(WNDCLASS));   <span class=\"comment\">// start with NULL defaults</span></span><br><span class=\"line\">\twndcls.lpfnWndProc = DefWindowProc;</span><br><span class=\"line\">\twndcls.hInstance = <span class=\"built_in\">AfxGetInstanceHandle</span>();</span><br><span class=\"line\">\twndcls.hCursor = afxData.hcurArrow;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>这个函数是 <code>PreCreateWindow</code>  内部调用的函数， <code>WNDCLASS</code>  是我们比较熟悉的结构，即注册窗口类需要使用的结构体。<br>\n需要关注的是，我们创建的窗口，窗口过程函数在哪里？<br>\n在这里出现了答案， <code>DefWindowProc</code>  函数就是我们创建的窗口过程函数。<br>\n但是是不是有点不对劲？ <code>DefWindowProc</code>  好像是 Windows 提供的默认窗口过程函数吧？<br>\n既然是 Windows 提供的函数实现，我们根本无法干涉，有消息也会回调这个函数。</p>\n<p>显然，这是不正确的，那么我们暂时从 <code>AfxEndDeferRegisterClass</code>  函数退回到 <code>CWnd::CreateEx</code>  函数，继续我们的代码分析。</p>\n<div class=\"note warning no-icon flat\"><p><code>AfxHookWindowCreate(this);</code></p>\n</div>\n<p>这里调用了一个比较关键的函数，<emp>这也是MFC能再次拿到消息处理权的关键所在</emp>。</p>\n<details class=\"folding-tag\" blue><summary> AfxHookWindowCreate </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> AFXAPI <span class=\"title\">AfxHookWindowCreate</span><span class=\"params\">(CWnd* pWnd)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t_AFX_THREAD_STATE* pThreadState = _afxThreadState.<span class=\"built_in\">GetData</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pThreadState-&gt;m_pWndInit == pWnd)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pThreadState-&gt;m_hHookOldCbtFilter == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpThreadState-&gt;m_hHookOldCbtFilter = ::<span class=\"built_in\">SetWindowsHookEx</span>(WH_CBT,</span><br><span class=\"line\">\t\t\t_AfxCbtFilterHook, <span class=\"literal\">NULL</span>, ::<span class=\"built_in\">GetCurrentThreadId</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pThreadState-&gt;m_hHookOldCbtFilter == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">AfxThrowMemoryException</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pThreadState-&gt;m_hHookOldCbtFilter != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pWnd != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pWnd-&gt;m_hWnd == <span class=\"literal\">NULL</span>);   <span class=\"comment\">// only do once</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(pThreadState-&gt;m_pWndInit == <span class=\"literal\">NULL</span>);   <span class=\"comment\">// hook not already in progress</span></span><br><span class=\"line\">\tpThreadState-&gt;m_pWndInit = pWnd;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>_AFX_THREAD_STATE* pThreadState = _afxThreadState.GetData();</code></p>\n</div>\n<p>这里获取了一个新的全局变量的地址，我们就叫它 <code>线程状态</code> 。</p>\n<div class=\"note warning no-icon flat\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pThreadState-&gt;m_hHookOldCbtFilter = ::SetWindowsHookEx(WH_CBT,</span><br><span class=\"line\">\t\t\t_AfxCbtFilterHook, NULL, ::GetCurrentThreadId());</span><br></pre></td></tr></table></figure></div>\n<p>这里通过调用 <code>SetWindowsHookEx</code> ，告知 Windows，当前线程一旦收到某些消息时，提前回调 <code>_AfxCbtFilterHook</code>  函数，而 <code>WM_CREATE</code>  消息就在此列。<br>\n <code>_AfxCbtFilterHook</code>  又是 MFC 提供的全局函数，那么自当前函数调用完成后，消息处理权再次被 MFC 抓到了手里。</p>\n<div class=\"note warning no-icon flat\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pThreadState-&gt;m_pWndInit = pWnd;</span><br></pre></td></tr></table></figure></div>\n<p>使全局变量 <code>线程状态</code> 的成员 <code>m_pWndInit</code>  我们 new 出来的指向 <code>frame</code>  对象。<br>\n即设置<strong>待初始化窗口</strong>。</p>\n<p>再次回到 <code>CWnd::CreateEx</code>  函数。</p>\n<div class=\"note warning no-icon flat\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HWND hWnd = CreateWindowEx(cs.dwExStyle, cs.lpszClass,</span><br><span class=\"line\">\t\t\tcs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,</span><br><span class=\"line\">\t\t\tcs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);</span><br></pre></td></tr></table></figure></div>\n<p>这一行就没有什么好说的了，创建窗口，同时会产生 <code>WM_CREATE</code>  消息，就会回调到 <code>_AfxCbtFilterHook</code> 。</p>\n<p>所以我们要继续分析 <code>_AfxCbtFilterHook</code> ，以得知 MFC 如何处理消息。</p>\n<h2 id=\"mfc指定的消息钩子回调_afxcbtfilterhook\"><a class=\"markdownIt-Anchor\" href=\"#mfc指定的消息钩子回调_afxcbtfilterhook\">#</a> MFC 指定的消息钩子回调： <code>_AfxCbtFilterHook</code></h2>\n<p>经过分析， <code>_AfxCbtFilterHook</code>  的基本工作如下：</p>\n<ol>\n<li>为 <code>frame</code>  和窗口句柄建立映射关系\n<ul>\n<li>通过全局变量 <code>线程状态</code> 的成员 <code>m_pWndInit</code> ，得到 <code>frame</code> 。</li>\n<li>通过窗口句柄查找对应的 <code>CWnd</code>  对象，由 <code>CHandleMap</code>  类实现\n<ul>\n<li><strong>模块线程状态</strong>的成员 <code>m_pmapHWND</code>  指向了一个映射类对象，负责管理 <code>HWND</code>  到 <code>CWnd*</code>  的映射。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>调用 <code>SetWindowLongPtr</code> ，为新创建的窗口设置新的窗口过程函数： <code>AfxWndProc</code> 。</li>\n</ol>\n<p>即完成了对<strong>待初始化窗口</strong>的初始化工作。</p>\n<p>具体代码就留给读者自行阅读了。</p>\n<h1 id=\"框架窗口类的消息接收\"><a class=\"markdownIt-Anchor\" href=\"#框架窗口类的消息接收\">#</a> 框架窗口类的消息接收</h1>\n<p>我们已经知晓窗口的窗口过程函数实际上是 <code>AfxWndProc</code> ，但这是 MFC 提供的全局函数，我们如何处理消息呢？</p>\n<p>实际上，MFC 在 <code>AfxWndProc</code>  函数中，调用了 <code>CWnd</code>  类的 <code>WindowProc</code>  成员虚函数，因此，我们只需要重写该虚函数，就能拿到消息的处理权。</p>\n<details class=\"folding-tag\" blue><summary> 示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> LRESULT <span class=\"title\">WindowProc</span><span class=\"params\">(UINT msgID, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (msgID) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> WM_CREATE: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">AfxMessageBox</span>(<span class=\"string\">L&quot;WM_CREATE&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CFrameWnd::<span class=\"built_in\">WindowProc</span>(msgID, wParam, lParam);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>代码即重写了 <code>WindowProc</code>  成员虚函数，并在收到 <code>WM_CREATE</code>  消息时弹出信息框。</p>\n<p>调试程序，会弹出信息框，内容是 <code>WM_CREATE</code> ，按下确定后，窗口才会出现。</p>\n<h2 id=\"mfc是如何找到我们的框架窗口类对象的\"><a class=\"markdownIt-Anchor\" href=\"#mfc是如何找到我们的框架窗口类对象的\">#</a> MFC 是如何找到我们的框架窗口类对象的？</h2>\n<p>我们的框架窗口类是一个全局对象，<emp>在窗口过程函数中，MFC是如何找到我们创建的对象，并调用其成员函数的呢？</emp></p>\n<p>还记得窗口过程的函数原型吗？第一个参数是类型为 <code>HWND</code>  的窗口句柄；<br>\n而我们在之前讲过，<strong>模块线程状态</strong>的成员 <code>m_pmapHWND</code>  指向了一个映射类对象，而 <code>_AfxCbtFilterHook</code>  函数中，会基于此映射类对象，维护从 <code>HWND</code>  到 <code>CWnd*</code>  的映射表。<br>\nMFC 在需要通过 <code>HWND</code>  查找到对应窗口类对象的地址时，也只需要访问这个映射类对象即可。</p>\n<p>得到 <code>frame</code>  的地址后，就可以以此调用 <code>WindowProc</code>  成员虚函数。</p>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/a6e.html",
            "url": "http://yuyuaqwq.github.io/posts/a6e.html",
            "title": "【MFC】探索程序启动机制的实现原理",
            "date_published": "2022-10-05T02:45:26.000Z",
            "content_html": "<h1 id=\"全局对象的构造\"><a class=\"markdownIt-Anchor\" href=\"#全局对象的构造\">#</a> 全局对象的构造</h1>\n<p>C++ 的对象在创建时，会调用构造函数。<br>\n而全局对象的构造时机，<emp>自然应当在入口函数`main/WinMain`被调用之前</emp>，否则我们也就无法在入口函数中使用全局对象了。</p>\n<p>这里以上节编写的示例代码为例，我们在代码中实例化了一个全局对象 <code>g_theApp</code> ，基于 VS 强大的源码调试能力，我们来对 MFC 程序的启动机制一探究竟。</p>\n<details class=\"folding-tag\" blue><summary> 示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<h2 id=\"g_theapp构造调试\"><a class=\"markdownIt-Anchor\" href=\"#g_theapp构造调试\">#</a>  <code>g_theApp</code>  构造调试</h2>\n<ol>\n<li>让光标停留在 <code>CMyWinApp g_theApp;</code>  行，按下 <code>F9</code> ，设置断点\n<ul>\n<li>\n<img src=\"/posts/a6e/1.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n</li>\n<li><code>F5</code>  运行，让程序中断到当前行</li>\n<li><code>F11</code>  单步步入，进入到 <code>CMyWinApp</code>  的构造函数中</li>\n<li>继续单步步入，进入到基类 <code>CWinApp</code>  的构造函数中</li>\n</ol>\n<p>到这里，我们就开始调试到 MFC 的源码了。</p>\n<h2 id=\"g_theapp构造分析\"><a class=\"markdownIt-Anchor\" href=\"#g_theapp构造分析\">#</a>  <code>g_theApp</code>  构造分析</h2>\n<p>接下来我们选择部分代码进行讲解</p>\n<details class=\"folding-tag\" blue><summary> CWinApp::CWinApp 部分代码一 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CWinApp::<span class=\"built_in\">CWinApp</span>(LPCTSTR lpszAppName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lpszAppName != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        m_pszAppName = _tcsdup(lpszAppName);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        m_pszAppName = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// initialize CWinThread state</span></span><br><span class=\"line\">    AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();</span><br><span class=\"line\">    <span class=\"built_in\">ENSURE</span>(pModuleState);</span><br><span class=\"line\">    AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&gt;m_thread;</span><br><span class=\"line\">    <span class=\"built_in\">ENSURE</span>(pThreadState);</span><br><span class=\"line\">    <span class=\"built_in\">ASSERT</span>(<span class=\"built_in\">AfxGetThread</span>() == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    pThreadState-&gt;m_pCurrentWinThread = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">ASSERT</span>(<span class=\"built_in\">AfxGetThread</span>() == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    m_hThread = ::<span class=\"built_in\">GetCurrentThread</span>();</span><br><span class=\"line\">    m_nThreadID = ::<span class=\"built_in\">GetCurrentThreadId</span>();</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();</code></p>\n</div>\n<p>MFC 类库中有一个描述<strong>主模块状态</strong>的全局对象， <code>_AFX_CMDTARGET_GETSTATE</code>  宏函数就是用于获取该全局对象的地址</p>\n<div class=\"note warning no-icon flat\"><p><code>AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&gt;m_thread;</code></p>\n</div>\n<p>以及描述<strong>主模块线程状态</strong>的全局对象，其地址保存在<strong>主模块状态</strong>中的成员中。</p>\n<div class=\"tip \"><p>MFC 在设计时想必已经安排好了构造顺序已确保程序运行的正确性，此处我们的全局对象 <code>g_theApp</code>  的父类部分 <code>CWinApp</code>  在构造时才能够正确使用这些全局对象，这里不再做深究。</p>\n</div>\n<div class=\"note warning no-icon flat\"><p><code>pThreadState-&gt;m_pCurrentWinThread = this;</code></p>\n</div>\n<p>将我们创建的 <code>g_theApp</code>  的地址保存到<strong>主模块线程状态</strong>的 <code>m_pCurrentWinThread</code>  成员中。</p>\n<details class=\"folding-tag\" blue><summary> CWinApp::CWinApp 部分代码二 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// initialize CWinApp state</span></span><br><span class=\"line\"><span class=\"built_in\">ASSERT</span>(afxCurrentWinApp == <span class=\"literal\">NULL</span>); <span class=\"comment\">// only one CWinApp object please</span></span><br><span class=\"line\">pModuleState-&gt;m_pCurrentWinApp = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"><span class=\"built_in\">ASSERT</span>(<span class=\"built_in\">AfxGetApp</span>() == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>pModuleState-&gt;m_pCurrentWinApp = this;</code></p>\n</div>\n<p>将我们创建的 <code>g_theApp</code>  的地址保存到<strong>主模块状态</strong>的 <code>m_pCurrentWinApp</code>  成员中。</p>\n<hr>\n<h1 id=\"winmain的启动流程\"><a class=\"markdownIt-Anchor\" href=\"#winmain的启动流程\">#</a> WinMain 的启动流程</h1>\n<p>回忆我们的 <code>CMyWinApp</code>  类，在类中我们重写了虚函数 <code>InitInstance</code> 。<br>\n见名知意，我们猜测，这是一个初始化函数，但是我们不清楚函数是何时、如何被调用，因此我们需要继续分析 MFC 的源码。</p>\n<h2 id=\"initinstance回调调试\"><a class=\"markdownIt-Anchor\" href=\"#initinstance回调调试\">#</a>  <code>InitInstance</code>  回调调试</h2>\n<ol>\n<li>在 <code>CMyFrameWnd* frame = new CMyFrameWnd;</code>  行设置断点</li>\n<li>运行程序，中断在此行</li>\n<li>查看 <code>调用堆栈</code> ，我们可以看到 <code>InitInstance</code>  的调用函数，以及调用函数的调用函数… 等层级关系。\n<ul>\n<li>在这里我们也看到了我们熟悉的 <code>WinMain</code>  函数，说明 <code>InitInstance</code>  是在 <code>WinMain</code>  执行过程中被调用的。</li>\n<li>而我们并没有实现 <code>WinMain</code> ，那么 <code>WinMain</code>  自然也是由 MFC 实现的，至此，我们先前的一个疑惑也解决了。</li>\n</ul>\n</li>\n<li>从 <code>调用堆栈</code> 中定位到 <code>WinMain</code>  函数，在此处设置断点，重新运行程序。\n<ul>\n<li>\n<img src=\"/posts/a6e/2.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n</li>\n<li><code>WinMain</code>  函数中仅有一行代码，即调用 <code>AfxWinMain</code>  并返回，单步进入</li>\n</ol>\n<h2 id=\"afxwinmain源码分析\"><a class=\"markdownIt-Anchor\" href=\"#afxwinmain源码分析\">#</a>  <code>AfxWinMain</code>  源码分析</h2>\n<p>我们依旧选择我们感兴趣的源码进行讲解</p>\n<p><code>AfxWinMain</code>  是 MFC 实现的全局函数。</p>\n<div class=\"tip \"><p>以 <code>Afx</code>  开头的函数，基本上都是 MFC 实现的全局函数。</p>\n</div>\n<details class=\"folding-tag\" blue><summary> AfxWinMain 部分代码 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> AFXAPI <span class=\"title\">AfxWinMain</span><span class=\"params\">(HINSTANCE hInstance, HINSTANCE hPrevInstance,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t_In_ LPTSTR lpCmdLine, <span class=\"type\">int</span> nCmdShow)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT</span>(hPrevInstance == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> nReturnCode = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tCWinThread* pThread = <span class=\"built_in\">AfxGetThread</span>();</span><br><span class=\"line\">\tCWinApp* pApp = <span class=\"built_in\">AfxGetApp</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// AFX internal initialization</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">AfxWinInit</span>(hInstance, hPrevInstance, lpCmdLine, nCmdShow))</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> InitFailure;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// App global initializations (rare)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pApp != <span class=\"literal\">NULL</span> &amp;&amp; !pApp-&gt;<span class=\"built_in\">InitApplication</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> InitFailure;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Perform specific initializations</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pThread-&gt;<span class=\"built_in\">InitInstance</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pThread-&gt;m_pMainWnd != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">TRACE</span>(traceAppMsg, <span class=\"number\">0</span>, <span class=\"string\">&quot;Warning: Destroying non-NULL m_pMainWnd\\n&quot;</span>);</span><br><span class=\"line\">\t\t\tpThread-&gt;m_pMainWnd-&gt;<span class=\"built_in\">DestroyWindow</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnReturnCode = pThread-&gt;<span class=\"built_in\">ExitInstance</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> InitFailure;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnReturnCode = pThread-&gt;<span class=\"built_in\">Run</span>();</span><br><span class=\"line\">    ......</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>CWinThread* pThread = AfxGetThread();</code></p>\n</div>\n<p>此函数获取<strong>主模块线程状态</strong>的 <code>m_pCurrentWinThread</code>  成员。<br>\n先前我们在构造 <code>g_theApp</code>  的过程中已经看到，<strong>主模块线程状态</strong>的 <code>m_pCurrentWinThread</code>  成员保存的是 <code>g_theApp</code>  的地址；<br>\n因此，此函数实际上是获取 <code>g_theApp</code>  的地址，也就是说，在 MFC 的启动流程中，可能要使用我们创建的全局对象 <code>g_theApp</code> 。</p>\n<div class=\"note warning no-icon flat\"><p><code>CWinApp* pApp = AfxGetApp();</code></p>\n</div>\n<p>此函数获取<strong>主模块状态</strong>的 <code>m_pCurrentWinApp</code>  成员。<br>\n先前我们在构造 <code>g_theApp</code>  的过程中已经看到，<strong>主模块状态</strong>的 <code>m_pCurrentWinApp</code>  成员保存的是 <code>g_theApp</code>  的地址；<br>\n与 AfxGetThread 作用类似。</p>\n<div class=\"tip \"><p><code>CWinApp*</code>  指向 <code>CMyWinApp</code>  类型的对象，我们是能够理解的；<br>\n但是为什么 <code>CWinThread*</code>  的赋值也能被允许呢？因为 <code>CWinApp</code>  类就继承自 <code>CWinThread</code>  类。</p>\n</div>\n<div class=\"note warning no-icon flat\"><p><code>if (pApp != NULL &amp;&amp; !pApp-&gt;InitApplication())</code></p>\n</div>\n<p>当前行实际上调用了 <code>g_theApp</code>  的 <code>InitApplication</code>  函数，我们并没有提供此函数，因此只可能是 <code>g_theApp</code>  的父类部分提供的。<br>\n这个函数实际上也是虚函数，我们能够重写它，一般在我们希望做一些应用程序初始化的工作时重写。</p>\n<div class=\"note warning no-icon flat\"><p><code>if (!pThread-&gt;InitInstance())</code></p>\n</div>\n<p>终于又到了我们熟悉的部分了， <code>InitInstance</code>  就是我们重写的函数，此时 <code>pThread</code>  指向 <code>g_theApp</code> ，这就是 <code>多态</code> 了。</p>\n<details class=\"folding-tag\" blue><summary> CMyWinApp::InitInstance </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">    frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">    m_pMainWnd = frame;</span><br><span class=\"line\">    frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">    frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>我们暂时略过具体代码，最终是通过 <code>return TRUE</code>  返回的；</p>\n<div class=\"note warning no-icon flat\"><p><code>nReturnCode = pThread-&gt;Run();</code></p>\n</div>\n<p>根据 <code>AfxWinMain</code>  中的代码的逻辑，我们会走到 <code>Run</code>  这个函数。</p>\n<hr>\n<h1 id=\"不可或缺的消息循环\"><a class=\"markdownIt-Anchor\" href=\"#不可或缺的消息循环\">#</a> 不可或缺的消息循环</h1>\n<p>在直接使用 <code>Win32API</code>  开发界面程序时，我们都会编写消息循环以阻塞主线程，避免 <code>WinMain</code>  返回后终止进程。<br>\nMFC 程序自然也不例外，而 MFC 的消息循环究竟编写在哪里呢？<br>\n其实读者只要在调试时步过 <code>nReturnCode = pThread-&gt;Run();</code> ，就会使得程序直接运行起来，不再处于中断状态，因而得知， <code>Run</code>  成员函数封装了消息循环。</p>\n<h2 id=\"cwinapprun的源码分析\"><a class=\"markdownIt-Anchor\" href=\"#cwinapprun的源码分析\">#</a>  <code>CWinApp::Run</code>  的源码分析</h2>\n<details class=\"folding-tag\" blue><summary> CWinApp::Run </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">CWinApp::Run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (m_pMainWnd == <span class=\"literal\">NULL</span> &amp;&amp; <span class=\"built_in\">AfxOleGetUserCtrl</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Not launched /Embedding or /Automation, but has no main window!</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">TRACE</span>(traceAppMsg, <span class=\"number\">0</span>, <span class=\"string\">&quot;Warning: m_pMainWnd is NULL in CWinApp::Run - quitting application.\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">AfxPostQuitMessage</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> CWinThread::<span class=\"built_in\">Run</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<div class=\"note warning no-icon flat\"><p><code>if (m_pMainWnd == NULL &amp;&amp; AfxOleGetUserCtrl())</code></p>\n</div>\n<p>我们忽略对 <code>AfxOleGetUserCtrl</code>  函数的调用， <code>m_pMainWnd</code>  是不是有些眼熟？<br>\n我们在重写 <code>InitInstance</code>  时，使 <code>m_pMainWnd</code>  指向了 <code>new</code>  出来的 <code>CMyFrameWnd</code>  对象。<br>\n而我们在调用 <code>Run</code>  成员函数时，就是以 <code>g_theApp</code>  的身份进行调用的。<br>\n因此，在 <code>Run</code>  成员函数中访问 <code>m_pMainWnd</code> ，自然得到我们当时 <code>new</code>  出来的 <code>CMyFrameWnd</code>  对象。</p>\n<emp>这也就是 g_theApp 全局对象的主窗口。</emp>\n<div class=\"note warning no-icon flat\"><p><code>return CWinThread::Run();</code></p>\n</div>\n<p>接下来我们调用 <code>CWinApp</code>  的父类 <code>CWinThread</code>  的 <code>Run</code>  成员函数</p>\n<details class=\"folding-tag\" blue><summary> CWinThread::Run 第一部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">CWinThread::Run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">ASSERT_VALID</span>(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t_AFX_THREAD_STATE* pState = <span class=\"built_in\">AfxGetThreadState</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// for tracking the idle time state</span></span><br><span class=\"line\">\tBOOL bIdle = TRUE;</span><br><span class=\"line\">\tLONG lIdleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// acquire and dispatch messages until a WM_QUIT message is received.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;)        <span class=\"comment\">// 开始消息循环</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果没有消息(PeekMessage返回0)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// phase1: check to see if we can do idle work</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (bIdle &amp;&amp;</span><br><span class=\"line\">\t\t\t!::<span class=\"built_in\">PeekMessage</span>(&amp;(pState-&gt;m_msgCur), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, PM_NOREMOVE))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// call OnIdle while in bIdle state</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">OnIdle</span>(lIdleCount++))      <span class=\"comment\">// 调用成员虚函数OnIdle，进入空闲处理</span></span><br><span class=\"line\">\t\t\t\tbIdle = FALSE; <span class=\"comment\">// assume &quot;no idle&quot; state</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        ......</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>代码并不复杂，这里直接在代码中注释，可以自行阅读。</p>\n<div class=\"tip \"><p>在 MFC 中程序中调用 <code>Win32API</code>  时，通常都会指明调用的是全局作用域下的函数 :: 。</p>\n</div>\n<details class=\"folding-tag\" blue><summary> CWinThread::Run 第二部分 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        ......</span><br><span class=\"line\"><span class=\"comment\">// phase2: pump messages while available</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// pump message, but quit on WM_QUIT</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">PumpMessage</span>())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">ExitInstance</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// reset &quot;no idle&quot; state after pumping &quot;normal&quot; message</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//if (IsIdleMessage(&amp;m_msgCur))</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">IsIdleMessage</span>(&amp;(pState-&gt;m_msgCur)))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbIdle = TRUE;</span><br><span class=\"line\">\t\t\t\tlIdleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (::<span class=\"built_in\">PeekMessage</span>(&amp;(pState-&gt;m_msgCur), <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, PM_NOREMOVE));        <span class=\"comment\">// 如果连续有消息就继续处理</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p><code>if (!PumpMessage())</code> <br>\n MFC 在此函数中封装了对 <code>GetMessage</code> 、 <code>TranslateMessage</code> 、 <code>DispatchMessage</code>  函数的调用，读者感兴趣可以自行跟进，这里就不再分析了。</p>\n<p>一旦 <code>PumpMessage</code>  返回 <code>FALSE</code> ，就会调用虚成员函数 <code>ExitInstance</code>  并退出消息循环。<br>\n而 <code>PumpMessage</code>  返回 <code>FALSE</code>  的条件即是 <code>GetMessage</code>  获得 <code>WM_QUIT</code>  消息，程序结束。</p>\n<p>我们也可以重写 <code>ExitInstance</code> ，在程序结束前做必要的资源释放。</p>\n<p>从 <code>Run</code>  成员函数返回后，也会一路返回到 <code>WinMain</code> ，程序也就退出了。</p>\n<h1 id=\"基本流程\"><a class=\"markdownIt-Anchor\" href=\"#基本流程\">#</a> 基本流程</h1>\n<ol>\n<li>\n<p>首先，我们在编写 MFC 应用时，需要实例化一个类型为 <code>CWinApp</code>  的全局对象。</p>\n<ul>\n<li>如果需要重写初始化等成员虚函数，则需要创建继承自 <code>CWinApp</code>  的子类的对象 (此处命名为 <code>g_theApp</code> )。</li>\n</ul>\n</li>\n<li>\n<p>在 <code>g_theApp</code>  被构造时，会使 MFC 定义的全局变量<strong>主模块状态</strong>和<strong>主模块线程状态</strong>的成员指向 <code>g_theApp</code>  地址。</p>\n</li>\n<li>\n<p>程序进入 <code>WinMain</code>  函数，会通过全局变量<strong>主模块状态</strong>和<strong>主模块线程状态</strong>得到 <code>g_theApp</code>  地址，再以 <code>g_theApp</code>  的身份调用必要的成员虚函数。</p>\n<ul>\n<li>初始化</li>\n<li>消息循环</li>\n<li>退出</li>\n</ul>\n</li>\n</ol>\n<p>至此，我们基本上对 MFC 程序的启动流程有了一个大致的认知。</p>\n<p>而窗口的创建、消息的接收处理等部分，我们留到下一篇再叙。</p>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/7c79.html",
            "url": "http://yuyuaqwq.github.io/posts/7c79.html",
            "title": "【MFC】初识MFC",
            "date_published": "2022-10-04T11:33:52.000Z",
            "content_html": "<h1 id=\"mfc简述\"><a class=\"markdownIt-Anchor\" href=\"#mfc简述\">#</a> MFC 简述</h1>\n<p><strong>MFC (Microsoft Foundation Classes)，微软基础类库；</strong><br>\n是微软使用 <code>C++</code>  的特性，在 <code>Win32API</code>  基础上再次进行的封装。</p>\n<hr>\n<h1 id=\"mfc基本使用\"><a class=\"markdownIt-Anchor\" href=\"#mfc基本使用\">#</a> MFC 基本使用</h1>\n<p>MFC 只是一个 C++ 类库，我们只需要对 C++ 有一定了解，就能够理解 MFC 的工作机制。<br>\n而微软的宇宙第一 IDE <code>Visual Studio</code>  本身也替我们做好了许多工作，这里以 vs2022 为例，对 MFC 的安装与使用进行简单的说明。</p>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<ol>\n<li>运行 <code>Visual Studio Installer</code>\n<ul>\n<li>\n<img src=\"/posts/7c79/1.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n</li>\n<li>点击 <code>修改</code></li>\n<li>选择 <code>单个组件</code> 选项卡</li>\n<li>搜索 <code>MFC</code> ，勾选需要的组件\n<ul>\n<li>\n<img src=\"/posts/7c79/2.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n</li>\n<li>点击 <code>修改</code> ，等待完成即可\n<ul>\n<li>我这里已经装过了，就不重新做演示了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"新建项目\"><a class=\"markdownIt-Anchor\" href=\"#新建项目\">#</a> 新建项目</h2>\n<ol>\n<li>运行 <code>Visual Studio 2022</code></li>\n<li>点击 <code>创建新项目</code></li>\n<li>选择 <code>空项目</code></li>\n<li>项目名称随意，我这里写 <code>MFCTestProject</code></li>\n</ol>\n<h2 id=\"配置项目\"><a class=\"markdownIt-Anchor\" href=\"#配置项目\">#</a> 配置项目</h2>\n<p>由于是空项目，什么都没有，我们需要自行做一些必要的设置。</p>\n<ol>\n<li>右键 <code>MFCTestProject</code>  项目，选择 <code>属性</code></li>\n<li><code>属性页</code> 中选择 <code>高级</code> 选项卡</li>\n<li><code>MFC的使用</code> 选项，修改为 <code>在静态库中使用MFC</code>\n<ul>\n<li><code>在共享DLL中使用MFC</code>  调试时无法找到 MFC 的源码。</li>\n</ul>\n</li>\n<li><code>属性页</code> 中展开 <code>链接器</code> ，选择 <code>系统</code> 选项卡</li>\n<li><code>子系统</code> 选择 <code>窗口(/SUBSYSTEM:WINDOWS)</code></li>\n</ol>\n<h2 id=\"编写源代码\"><a class=\"markdownIt-Anchor\" href=\"#编写源代码\">#</a> 编写源代码</h2>\n<ol>\n<li>新建 <code>.cpp</code>  文件，文件名随意</li>\n<li>编写如下示例代码 <details class=\"folding-tag\" blue><summary> 示例 </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;afxwin.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyFrameWnd</span> :<span class=\"keyword\">public</span> CFrameWnd &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CMyWinApp</span> :<span class=\"keyword\">public</span> CWinApp &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">CMyWinApp</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> BOOL <span class=\"title\">InitInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        CMyFrameWnd* frame = <span class=\"keyword\">new</span> CMyFrameWnd;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">Create</span>(<span class=\"literal\">nullptr</span>, <span class=\"string\">L&quot;MFCBase&quot;</span>);</span><br><span class=\"line\">        m_pMainWnd = frame;</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">ShowWindow</span>(SW_SHOW);</span><br><span class=\"line\">        frame-&gt;<span class=\"built_in\">UpdateWindow</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CMyWinApp g_theApp;</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n</li>\n<li>F5 运行，编译运行正常会出现这样的窗口\n<ul>\n<li>\n<img src=\"/posts/7c79/3.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n</li>\n</ol>\n<p>至此，我们就已经建立了一个非常简单的 MFC 程序，并且它还能够运行。</p>\n<p>接下来我们简单对代码进行一些注释：</p>\n<div class=\"note warning no-icon flat\"><p><code>#include &lt;afxwin.h&gt;</code></p>\n</div>\n<p>类似 <code>Win32API</code>  开发时使用的 <code>#include &lt;windows.h&gt;</code></p>\n<div class=\"note warning no-icon flat\"><p><code>class CMyFrameWnd :public CFrameWnd {...</code></p>\n</div>\n<p>创建继承于 <code>CFrameWnd</code>  类的 <code>CMyFrameWnd</code>  类<br>\n <code>CFrameWnd</code>  是对窗口框架的封装</p>\n<div class=\"note warning no-icon flat\"><p><code>class CMyWinApp :public CWinApp {...</code></p>\n</div>\n<p>创建继承于 <code>CWinApp</code>  类的 <code>CMyWinApp</code>  类<br>\n <code>CWinApp</code>  是对应用程序执行流程的抽象封装</p>\n<div class=\"note warning no-icon flat\"><p><code>virtual BOOL InitInstance() {...</code></p>\n</div>\n<p>在 <code>CMyWinApp</code>  类中重写 <code>CWinApp</code>  类的 <code>InitInstance</code>  成员虚函数</p>\n<div class=\"note warning no-icon flat\"><p><code>CMyWinApp g_theApp;</code></p>\n</div>\n<p>基于 <code>CMyWinApp</code>  类实例化全局对象 <code>g_theApp</code></p>\n<div class=\"note purple icon-padding simple\"><i class=\"note-icon fas fa-fan\"></i><p>当然，这些代码也许会使你感到困惑，毕竟代码中甚至找不到你最熟悉的 main、WinMain，为什么它能够跑起来？</p>\n<p>我们将在下篇文章探索 MFC 的程序启动机制。</p>\n</div>\n<hr>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/6339.html",
            "url": "http://yuyuaqwq.github.io/posts/6339.html",
            "title": "【MFC】前言",
            "date_published": "2022-10-04T11:30:00.000Z",
            "content_html": "<p>当前分类所收录的博客主要是我个人学习 MFC 时记录的读书笔记。</p>\n<blockquote>\n<p>主要参考资料<br>\n<a href=\"https://www.bilibili.com/video/BV1mU4y1C7XA/?p=14&amp;spm_id_from=333.999.header_right.history_list.click&amp;vd_source=2f16cbe6e2d0a9708b5b399c0b862fe3\"> C++ 之 MFC 全套教程</a></p>\n</blockquote>\n",
            "tags": [
                "MFC",
                "没饭吃"
            ]
        }
    ]
}