{
    "version": "https://jsonfeed.org/version/1",
    "title": "鹿鹿鱼鱼 • All posts by \"编译原理\" category",
    "description": "人为什么要起床？",
    "home_page_url": "http://yuyuaqwq.github.io",
    "items": [
        {
            "id": "http://yuyuaqwq.github.io/posts/aca7.html",
            "url": "http://yuyuaqwq.github.io/posts/aca7.html",
            "title": "【动手写ToyLang】2.词法分析",
            "date_published": "2022-10-29T04:29:50.000Z",
            "content_html": "<h1 id=\"词法分析\"><a class=\"markdownIt-Anchor\" href=\"#词法分析\">#</a> 词法分析</h1>\n<p>词法分析是整个编译结构中最简单的一个阶段，所以放轻松，咱们往下看。</p>\n<p>那么，词法分析是什么呢？<br>\n我们知道，程序开发者编写的源代码，也就是编译器最初能够接收到的输入，即连续的字符序列。</p>\n<p><strong>词法分析存在的意义，就是提前将源代码切分成能被后续编译程序直接使用的单词序列。</strong></p>\n<ul>\n<li>如源代码中的变量标识，关键字，字符串字面量，数值字面量等…</li>\n</ul>\n<p>我们上一节课所展示的算术表达式， <code>3 + 2</code> ，也是先将其分成 <code>3</code>   <code>+</code>   <code>2</code> ，才能用于构成抽象语法树。</p>\n<p><strong>词法分析器产出的单词序列，我们将其成为 <code>Token</code> 。</strong></p>\n<hr>\n<h1 id=\"四则运算表达式的token\"><a class=\"markdownIt-Anchor\" href=\"#四则运算表达式的token\">#</a> 四则运算表达式的 <code>Token</code></h1>\n<p>我们既然需要将四则运算表达式转成 <code>Token</code> ，也就需要知道其单词序列的规则，当然，关于这一点，我们早已烂熟于心了。<br>\n以下是我通过正则表达式描述的 <code>Token</code>  匹配规则 (以我们将要开发的词法分析器为准)。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">TokenType</th>\n<th style=\"text-align:left\">Regex</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">\\d+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpAdd</td>\n<td style=\"text-align:left\">+</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpSub</td>\n<td style=\"text-align:left\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpMul</td>\n<td style=\"text-align:left\">*</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OpDiv</td>\n<td style=\"text-align:left\">/</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SepLPar</td>\n<td style=\"text-align:left\">(</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SepRPar</td>\n<td style=\"text-align:left\">)</td>\n</tr>\n</tbody>\n</table>\n<p><em>此处我忽略了运算符在正则表达式中需要转义的情况，做一个参考即可。</em></p>\n<h1 id=\"lexer\"><a class=\"markdownIt-Anchor\" href=\"#lexer\">#</a> Lexer</h1>\n<p>Lexer，即词法分析器。<br>\n接下来我们编写代码实现 Lexer。</p>\n<h2 id=\"token\"><a class=\"markdownIt-Anchor\" href=\"#token\">#</a> Token</h2>\n<details class=\"folding-tag\" blue><summary> \\lexer\\token.h </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEXER_TOKEN_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEXER_TOKEN_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> lexer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// token类型常量</span></span><br><span class=\"line\"><span class=\"keyword\">enum class</span> <span class=\"title class_\">TokenType</span> &#123;</span><br><span class=\"line\">\tkNil = <span class=\"number\">0</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">\tkEof,</span><br><span class=\"line\">\tkNumber,</span><br><span class=\"line\"></span><br><span class=\"line\">\tkOpAdd,    <span class=\"comment\">// +</span></span><br><span class=\"line\">\tkOpSub,    <span class=\"comment\">// -</span></span><br><span class=\"line\">\tkOpMul,    <span class=\"comment\">// *</span></span><br><span class=\"line\">\tkOpDiv,    <span class=\"comment\">// /</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tkSepLPar,  <span class=\"comment\">// (</span></span><br><span class=\"line\">\tkSepRPar,  <span class=\"comment\">// )</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 描述token的结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Token</span> &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Is</span><span class=\"params\">(TokenType t_type)</span> <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> line;\t\t<span class=\"comment\">// 行号</span></span><br><span class=\"line\">\tTokenType type;\t\t<span class=\"comment\">// token类型</span></span><br><span class=\"line\">\tstd::string str;\t<span class=\"comment\">// 保存必要的信息</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace lexer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// LEXER_TOKEN_H_</span></span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> \\lexer\\token.cpp </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;token.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> lexer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Token::Is</span><span class=\"params\">(TokenType t_type)</span> <span class=\"type\">const</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t_type == type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace lexer</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>token 这部分十分简单，不赘述了。</p>\n<h2 id=\"lexer-2\"><a class=\"markdownIt-Anchor\" href=\"#lexer-2\">#</a> Lexer</h2>\n<details class=\"folding-tag\" blue><summary> \\lexer\\lexer.h </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> LEXER_LEXER_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LEXER_LEXER_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;exception&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;lexer/token.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> lexer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 词法分析时发生的异常</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">LexerException</span> : <span class=\"keyword\">public</span> std::exception &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">LexerException</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* t_msg);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 词法分析器类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lexer</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Lexer</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* t_src);</span><br><span class=\"line\">\t~<span class=\"built_in\">Lexer</span>() <span class=\"keyword\">noexcept</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">NextChar</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">SkipChar</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> <span class=\"keyword\">noexcept</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\">Token <span class=\"title\">NextToken</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstd::string m_src;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> m_idx;</span><br><span class=\"line\">\tToken m_reserve;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_line;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace lexer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// LEXER_LEXER_H_</span></span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> \\lexer\\lexer.cpp </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;lexer.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> lexer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">LexerException::<span class=\"built_in\">LexerException</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* t_msg) : std::<span class=\"built_in\">exception</span>(t_msg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Lexer::<span class=\"built_in\">Lexer</span>(<span class=\"type\">const</span> <span class=\"type\">char</span>* t_src) : m_src&#123; t_src &#125;, m_line&#123; <span class=\"number\">0</span> &#125;, m_idx&#123; <span class=\"number\">0</span> &#125;, m_reserve&#123; <span class=\"number\">0</span>, TokenType::kNil &#125; &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Lexer::~<span class=\"built_in\">Lexer</span>() <span class=\"keyword\">noexcept</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取下一字符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">Lexer::NextChar</span><span class=\"params\">()</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_idx &lt; m_src.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m_src[m_idx++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 跳过指定字符数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Lexer::SkipChar</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> <span class=\"keyword\">noexcept</span> </span>&#123;</span><br><span class=\"line\">    m_idx += count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取下一Token</span></span><br><span class=\"line\"><span class=\"function\">Token <span class=\"title\">Lexer::NextToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Token token;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!m_reserve.<span class=\"built_in\">Is</span>(TokenType::kNil)) &#123;        <span class=\"comment\">// 如果有前瞻保存的token</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回前瞻的结果</span></span><br><span class=\"line\">        token = m_reserve;</span><br><span class=\"line\">        m_reserve.type = TokenType::kNil;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 跳过空格</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = <span class=\"built_in\">NextChar</span>()) &amp;&amp; c == <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    token.line = m_line;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        token.type = TokenType::kEof;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 根据字符返回对应类型的Token</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kOpAdd;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kOpSub;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kOpMul;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kOpDiv;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;(&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kSepLParen;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&#x27;)&#x27;</span>:</span><br><span class=\"line\">        token.type = TokenType::kSepRParen;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> || c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        token.type = TokenType::kNumber;</span><br><span class=\"line\">        token.str.<span class=\"built_in\">push_back</span>(c);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c = <span class=\"built_in\">NextChar</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">                token.str.<span class=\"built_in\">push_back</span>(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">SkipChar</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"built_in\">LexerException</span>(<span class=\"string\">&quot;cannot parse token&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"comment\">// namespace lexer</span></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<p>我们创建了一个词法分析器类；<br>\n <code>Lexer::NextToken</code>  是关键成员函数，用于扫描字符序列，匹配一个完整的 Token 并返回。</p>\n<h2 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h2>\n<p>接下来，我们编写测试代码，用于测试新鲜出炉的词法分析器。<br>\n用于测试的表达式是： <code>1 + 33 - 0 * (33 / 999) - 123</code></p>\n<details class=\"folding-tag\" blue><summary> \\entry.cpp </summary>\n              <div class='content'>\n              <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;lexer/lexer.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    Lexer lexer&#123; <span class=\"string\">&quot;1 + 33 - 0 * (33 / 999) - 123&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> token = lexer.<span class=\"built_in\">NextToken</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token.<span class=\"built_in\">Is</span>(TokenType::kEof)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (token.type) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kNumber:&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, token.str.<span class=\"built_in\">c_str</span>()); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kOpAdd: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;+\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kOpDiv: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;/\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kOpMul: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kOpSub: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kSepLParen: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;(\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TokenType::kSepRParen: &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;)\\n&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n              </div>\n            </details>\n<details class=\"folding-tag\" blue><summary> 打印结果 </summary>\n              <div class='content'>\n              <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">+</span><br><span class=\"line\">33</span><br><span class=\"line\">-</span><br><span class=\"line\">0</span><br><span class=\"line\">*</span><br><span class=\"line\">(</span><br><span class=\"line\">33</span><br><span class=\"line\">/</span><br><span class=\"line\">999</span><br><span class=\"line\">)</span><br><span class=\"line\">-</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n              </div>\n            </details>",
            "tags": [
                "编译原理",
                "动手写ToyLang"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/56ac.html",
            "url": "http://yuyuaqwq.github.io/posts/56ac.html",
            "title": "【动手写ToyLang】1.从四则运算表达式开始",
            "date_published": "2022-10-28T15:01:12.000Z",
            "content_html": "<h1 id=\"由此开始\"><a class=\"markdownIt-Anchor\" href=\"#由此开始\">#</a> 由此开始</h1>\n<p>如果你曾经接触过《编译原理》的话，不知道是否与我有着同样的困惑呢？</p>\n<p>各种不近人情的名词，公式乱飞，这让我学习起来格外痛苦。</p>\n<p>我在尝试阅读过不少文章、书籍，动手之后，才逐渐理解了一些比较关键的东西。</p>\n<p><em>实际上，当我真正自己动手完成了对四则运算表达式的解析的那一刻，我才真切感受到了编译原理的优雅与美妙之处，这大概就是由无数人智慧造就的伟大吧 (偏得有点远了)。</em></p>\n<p><strong>因此，我才会选择先从四则运算表达式开始，将其逐步扩展成为一门 <code>通用编程语言</code> ，也能让读者每一节都能感受到学习有所反馈的喜悦。</strong></p>\n<hr>\n<h1 id=\"初尝构思\"><a class=\"markdownIt-Anchor\" href=\"#初尝构思\">#</a> 初尝构思</h1>\n<p><strong>现在，我来尝试给你出一道题吧，请你用你所熟悉的语言，编写一个模块：</strong></p>\n<ol>\n<li>\n<p>输入符合四则运算表达式规范的字符串 (可以假定只有整数，不存在括号)；</p>\n</li>\n<li>\n<p>输出整型结果；</p>\n</li>\n<li>\n<p>要求关键逻辑由自己实现，不可借由库、语言本身提供的功能。</p>\n</li>\n</ol>\n<p>你能实现吗？</p>\n<p>是否觉得脑子有些空白，难以组织成较为优雅的实现思路呢？</p>\n<pre><code>如果你现在就能想到很棒的解法，那至少你要比我厉害多了。\n</code></pre>\n<p>我曾经因为某些需求做过尝试，虽然最后写出来了，但是具体实现也非常丑陋，这里就不献丑了。</p>\n<p>但是我可以给你大致描述一下我当初的思路：</p>\n<ul>\n<li>\n<p>首先，查找字符串中优先级较高的运算符  <code>*</code>   <code>/</code> ，再前 / 后瞻运算符前后的数字，这个子串也能形成一个表达式；</p>\n</li>\n<li>\n<p>算出结果后，在原表达式中，用结果替换掉子串 (刚刚被计算的表达式)，再继续查找。</p>\n</li>\n<li>\n<p>完成后再从头开始查找优先级更低一级的运算符 <code>+</code>   <code>-</code> ，直到运算完成。</p>\n</li>\n</ul>\n<p><strong>当然，我们不会用这么低效的方法，也不会要求你真的写出来。</strong></p>\n<p><strong>现在提出来，也不是为了为难你，只是为了让你记住眼下的感觉，当你学完本系列文章后，再回来看看，这一道题，是否真的有那么难呢？</strong></p>\n<hr>\n<h1 id=\"抽象语法树\"><a class=\"markdownIt-Anchor\" href=\"#抽象语法树\">#</a> 抽象语法树</h1>\n<p>咱们先来看百度百科对 <code>抽象语法树</code> 的定义：</p>\n<blockquote>\n<p>在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称<a href=\"https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E6%A0%91/7031301?fromModule=lemma_inlink\">语法树</a>（Syntax tree），是<a href=\"https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink\">源代码</a><a href=\"https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95?fromModule=lemma_inlink\">语法</a>结构的一种抽象表示。它以树状的形式表现<a href=\"https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink\">编程语言</a>的语法结构，树上的每个节点都表示源代码中的一种结构。</p>\n</blockquote>\n<p>嗯… 不愧是名字就带着抽象的东西，连说明都这么抽象。</p>\n<p>咱们先不整那么多虚头巴脑的，干就完了。</p>\n<h2 id=\"构造四则运算表达式的ast\"><a class=\"markdownIt-Anchor\" href=\"#构造四则运算表达式的ast\">#</a> 构造四则运算表达式的 AST</h2>\n<p><code>3 + 2</code></p>\n<p>这个是大家熟悉的算术表达式，实际上，我们人脑是如何计算这个表达式的呢？当然需要遵循某些规则：</p>\n<ol>\n<li>\n<p>先乘除</p>\n</li>\n<li>\n<p>再加减</p>\n</li>\n<li>\n<p>从左往右结合</p>\n</li>\n</ol>\n<p>那我们自然是需要先<strong>左往右找</strong>在表达式中找到 <code>*</code> 、 <code>/</code>  两种符号，好消息是，没有，嘿嘿。</p>\n<p>接下来继续<strong>左往右找</strong> <code>+</code> 、 <code>-</code> ，找到之后将其取出，这也是我们需要计算的子表达式。</p>\n<p>我们将其分成三部分，分别是：</p>\n<ul>\n<li>左边的数字  <code>3</code></li>\n<li>加法运算符  <code>+</code></li>\n<li>右边的数字  <code>2</code></li>\n</ul>\n<p>可以得到这么一棵树型结构：</p>\n<ul>\n<li>\n<img src=\"/posts/56ac/1.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>接下来我们遍历这棵树：</p>\n<ol>\n<li>根节点，是加法，表明需要将左子节点与右子节点相加；</li>\n<li><code>3 + 2</code> ，返回结果  <code>5</code> ；</li>\n<li>遍历结束；</li>\n</ol>\n<ul>\n<li>\n<img src=\"/posts/56ac/2.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<h3 id=\"多运算符与结合律\"><a class=\"markdownIt-Anchor\" href=\"#多运算符与结合律\">#</a> 多运算符与结合律</h3>\n<p>那么，当一个表达式中，存在多个运算符时，应该如何构造语法树呢？</p>\n<p>接下来我们构造表达式  <code>3 - 2 + 4</code>  的树。</p>\n<p><strong>首先我们应该注意的一点是，需要先被执行运算 (优先级更高) 的子表达式，其节点相对的，要在更底下：</strong></p>\n<ul>\n<li>\n<img src=\"/posts/56ac/3.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>还是先来遍历这颗树：</p>\n<ol>\n<li>根节点，是加法，表明需要将左子节点与右子节点相加；\n<ol>\n<li>左子节点是减法，表明需要用左子节点减去右子节点，需要继续向下展开；</li>\n<li><code>3 - 2</code> ，返回结果  <code>1</code> ；</li>\n</ol>\n</li>\n<li><code>1 + 4</code> ，返回结果  <code>5</code> ；</li>\n<li>遍历结束；</li>\n</ol>\n<p><strong>因此，遍历的过程也符合我们所要求的 <code>左结合律</code> 。</strong></p>\n<ul>\n<li>由左边的运算符开始，向右结合。</li>\n<li>同优先级下，我们需要优先计算左边的运算符组成的子表达式，</li>\n</ul>\n<p>接下来我再给你画一下另一种情况，你大概也就明白了。</p>\n<ul>\n<li>\n<img src=\"/posts/56ac/4.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>你可以尝试一下遍历这棵树，会发现先被执行的一定是加法，这并不符合我们的从一开始就要求的 <code>左结合律</code> 。<br>\n在部分情况下，由于结合律的错误，就会产出错误的结果：</p>\n<ul>\n<li>如我们本次求解的表达式，通过遍历此树得出的结果为 <code>-3</code> 。</li>\n</ul>\n<h2 id=\"目标根据语法规则生成ast\"><a class=\"markdownIt-Anchor\" href=\"#目标根据语法规则生成ast\">#</a> 目标：根据语法规则生成 AST</h2>\n<p>我不说你大概也已经猜到了，其实我们上面所构造的树，在当前的应用场景下，就叫做 <code>抽象语法树</code> 。</p>\n<p><em><strong>遍历抽象语法树并计算的过程，与我们人脑对表达式的计算的过程是十分相似的。</strong></em></p>\n<p><strong>也就是说，我们只需要构造出这么一颗抽象语法树，就已经基本上完成了编译工作的一大半甚至全部。</strong><br>\n<strong>此时，若我们需要执行编译产生的结果，只需要遍历我们所生成 AST 即可。</strong></p>\n<p>如下图：</p>\n<ul>\n<li>\n<img src=\"/posts/56ac/5.png\" class=\"\" title=\"这是一张图片\">\n</li>\n</ul>\n<p>在遍历的过程中，我们就能够正确的完成对加法表达式的加法运算，再完成对赋值表达式的赋值运算。</p>\n<hr>\n<h1 id=\"ast解释器\"><a class=\"markdownIt-Anchor\" href=\"#ast解释器\">#</a> AST 解释器</h1>\n<p>最后，我们也确实展示了有关 &quot;解释器&quot; 的东西，是的，即便你难以置信。<br>\n遍历这棵树的过程，就可以叫做解释；<br>\n如果我们写出代码实现遍历树的过程，即是 <code>AST解释器</code> 。</p>\n<p>当然，解释器是一种比较广泛的概念，即便到后面我们基于 AST 生成了字节码，交给虚拟机执行，我们的程序也依然可以称之为解释器，只不过解释的对象从 AST 换成了字节码。</p>\n<p>我个人觉得，当初造这个词的人只是为了区分所谓的 &quot;编译型语言&quot; 和 &quot;解释型语言&quot;。<br>\n以下是百度百科对解释器的定义：</p>\n<blockquote>\n<p>解释器（<a href=\"https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997?fromModule=lemma_inlink\">英语</a>：Interpreter），又译为直译器，是一种电脑程序，能够把高级<a href=\"https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink\">编程语言</a>一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。</p>\n</blockquote>\n<ul>\n<li><em>此处关于 <code>每转译一行程序叙述就立刻运行</code> 的说明也不尽然，至少现在很多被称为 <code>解释器</code> 的程序，并非如此 (如 Python 解释器、Java 解释器等)。</em></li>\n</ul>\n",
            "tags": [
                "编译原理",
                "动手写ToyLang"
            ]
        },
        {
            "id": "http://yuyuaqwq.github.io/posts/c4d3.html",
            "url": "http://yuyuaqwq.github.io/posts/c4d3.html",
            "title": "【动手写ToyLang】0.前言",
            "date_published": "2022-10-28T13:18:53.000Z",
            "content_html": "<h1 id=\"关于\"><a class=\"markdownIt-Anchor\" href=\"#关于\">#</a> 关于</h1>\n<p><strong>本系列文章会手把手教你打造一门在别人看来是<emp>玩具</emp>的通用编程语言，事实也确实如此。</strong></p>\n<p>但计算机本身就是一门需要动手的学科，在对基本原理有一定程度的理解之后，自己动手实践才是学习的最好的捷径，为此制造 &quot;玩具&quot;，并不丢人。</p>\n<p>笔者对《编译原理》这门学科的学习程度也十分有限，因此本系列文章的读者不仅仅是你们，也包括我，写下的这篇文章也是支撑我继续动手实践的动力。<br>\n学完本系列文章之后，基本上可以对编译原理有一定程度的认知，再继续往下学习也就不会那么困难了。</p>\n<p><em>我会尽可能的查阅资料，以保证输出内容的可靠性，如果还是难以避免的出现了错误，望批评指正，感激不尽。</em></p>\n<hr>\n<h1 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<h2 id=\"开发语言\"><a class=\"markdownIt-Anchor\" href=\"#开发语言\">#</a> 开发语言</h2>\n<p>这里我选用我个人较为常用的 C++ 作为开发语言，风格尽量以《Google C++ Style Guide》为准，在我个人能力范围内尽量写得 &quot;现代 C++&quot; 一点。</p>\n<p>当然，我个人也还是 C++ 彩笔，代码写得不好，还请理解。</p>\n<h2 id=\"开发环境\"><a class=\"markdownIt-Anchor\" href=\"#开发环境\">#</a> 开发环境</h2>\n<p>我基本上只在 Windows 上工作，因此选择自然是 <code>Visual Studio</code> ，你们可以选择自己喜欢的开发环境。</p>\n",
            "tags": [
                "编译原理",
                "动手写ToyLang"
            ]
        }
    ]
}