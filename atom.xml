<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yuyuaqwq.github.io</id>
    <title>鹿鹿鱼鱼</title>
    <link href="http://yuyuaqwq.github.io" />
    <updated>2022-10-30T08:34:27.524Z</updated>
    <category term="MFC" />
    <category term="没饭吃" />
    <category term="逆向分析" />
    <category term="工具" />
    <category term="C/C++" />
    <category term="反汇编" />
    <category term="网络分析" />
    <category term="Proxifier" />
    <category term="编译原理" />
    <category term="动手写ToyLang" />
    <entry>
        <id>http://yuyuaqwq.github.io/posts/f573.html</id>
        <title>【动手写ToyLang】4.递归下降</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/f573.html"/>
        <content type="html">&lt;h1 id=&#34;递归下降&#34;&gt;&lt;a href=&#34;#递归下降&#34; class=&#34;headerlink&#34; title=&#34;递归下降&#34;&gt;&lt;/a&gt;递归下降&lt;/h1&gt;&lt;p&gt;先前用于描述的加减运算表达式的文法，实际上并不能直接通过递归下降分析法来解析。&lt;/p&gt;
&lt;p&gt;说了这么多，递归下降到底是个什么玩意呢？&lt;br&gt;接下来我们通过以下能够应用递归下降进行解析的文法来解析输入串，了解其解析过程，你大概就明白了。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;block&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&amp;#x27;&lt;/span&gt; &amp;#123;stat&amp;#125; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stat = assignExp &lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assignExp = ident &lt;span class=&#34;string&#34;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;value = number | string&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;表示重复，此处表示可以有 0~n 个&lt;code&gt;stat&lt;/code&gt;。&lt;br&gt;其中，&lt;code&gt;ident&lt;/code&gt;是标识符，包括&lt;code&gt;number&lt;/code&gt;，&lt;code&gt;string&lt;/code&gt;，我们都会放到词法分析中去解析，故不在此列出其文法。&lt;/p&gt;
&lt;p&gt;首先，假设&lt;code&gt;block&lt;/code&gt;输入串为：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = &amp;quot;qwq&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是解析的伪代码：&lt;/p&gt;
&lt;h2 id=&#34;解析block&#34;&gt;&lt;a href=&#34;#解析block&#34; class=&#34;headerlink&#34; title=&#34;解析block&#34;&gt;&lt;/a&gt;解析&lt;code&gt;block&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseBlock(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#123;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while in.is(&amp;#x27;&amp;#125;&amp;#x27;) == false &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ParseStat(in);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#125;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先从输入串中匹配&lt;code&gt;&amp;#123;&lt;/code&gt;字符；&lt;br&gt;由于语句是可选的，因此需要检查紧接着的符号是否为&lt;code&gt;&amp;#125;&lt;/code&gt;字符，不是的话就可以匹配&lt;code&gt;stat&lt;/code&gt;了；&lt;br&gt;&lt;code&gt;stat&lt;/code&gt;是一个非终结符，需要继续展开，此处交给&lt;code&gt;ParseStat&lt;/code&gt;进一步解析；&lt;br&gt;&lt;code&gt;ParseStat&lt;/code&gt;返回后，表示一条语句的解析完成了，但语句可能存在多条，因此循环进行；&lt;br&gt;最后匹配一个&lt;code&gt;&amp;#125;&lt;/code&gt;字符；&lt;br&gt;&lt;code&gt;block&lt;/code&gt;解析完成。&lt;/p&gt;
&lt;p&gt;抽象语法树如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/posts/f573/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;em&gt;为什么这里没有添加&lt;code&gt;&amp;#123;&lt;/code&gt; 和 &lt;code&gt;&amp;#125;&lt;/code&gt;节点呢？&lt;/em&gt;&lt;br&gt;&lt;em&gt;因为树构建完成后，我们自然可以知道这个节点是block，在词法阶段的两个符号于语法树而言并无关紧要。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解析stat&#34;&gt;&lt;a href=&#34;#解析stat&#34; class=&#34;headerlink&#34; title=&#34;解析stat&#34;&gt;&lt;/a&gt;解析&lt;code&gt;stat&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;关于&lt;code&gt;stat&lt;/code&gt;的解析，在&lt;code&gt;ParseStat&lt;/code&gt;函数中完成：&lt;br&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseStat(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseAssignExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/posts/f573/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解析assignExp&#34;&gt;&lt;a href=&#34;#解析assignExp&#34; class=&#34;headerlink&#34; title=&#34;解析assignExp&#34;&gt;&lt;/a&gt;解析&lt;code&gt;assignExp&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;接下来是&lt;code&gt;assignExp&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseAssignExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kIdent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;=&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseValue(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/posts/f573/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;这里同样没有将符号&lt;code&gt;=&lt;/code&gt;作为节点添加。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析Value&#34;&gt;&lt;a href=&#34;#解析Value&#34; class=&#34;headerlink&#34; title=&#34;解析Value&#34;&gt;&lt;/a&gt;解析&lt;code&gt;Value&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;最后完成关于&lt;code&gt;Value&lt;/code&gt;的解析：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseValue(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr in.is(kNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in.match(kNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;关键：描述文法&#34;&gt;&lt;a href=&#34;#关键：描述文法&#34; class=&#34;headerlink&#34; title=&#34;关键：描述文法&#34;&gt;&lt;/a&gt;关键：描述文法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这种自顶逐层向下解析，以构造语法树的分析法，就叫做递归下降。&lt;/strong&gt;&lt;br&gt;&lt;em&gt;虽然笔者并没有在伪代码中添加构造树的节点相关的代码，但不妨碍读者理解递归下降。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你会发现，只要我们描述好了文法，用递归下降解析输入串是一件非常轻松的事情。&lt;/p&gt;
&lt;h2 id=&#34;无限递归&#34;&gt;&lt;a href=&#34;#无限递归&#34; class=&#34;headerlink&#34; title=&#34;无限递归&#34;&gt;&lt;/a&gt;无限递归&lt;/h2&gt;&lt;p&gt;还记得我在上一篇文章中所描述的文法吗？&lt;/p&gt;
&lt;p&gt;如果直接编写解析代码，就会形成无限递归：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if inStr.is(&amp;#x27;+&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;+&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;-&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseNumber(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;消除左递归&#34;&gt;&lt;a href=&#34;#消除左递归&#34; class=&#34;headerlink&#34; title=&#34;消除左递归&#34;&gt;&lt;/a&gt;消除左递归&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;如果非终结符&lt;code&gt;r&lt;/code&gt;被直接或间接推导后，其结果最左边又出现非终结符&lt;code&gt;r&lt;/code&gt;的情况，便称之为左递归。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp = exp + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; exp = exp + number + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为此，我们需要改写文法，以避免出现左递归。&lt;/p&gt;
&lt;h2 id=&#34;四则表达式文法&#34;&gt;&lt;a href=&#34;#四则表达式文法&#34; class=&#34;headerlink&#34; title=&#34;四则表达式文法&#34;&gt;&lt;/a&gt;四则表达式文法&lt;/h2&gt;&lt;p&gt;首先，我们用EBNF描述更加完整的四则表达式文法：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = addexp oper2 mulexp | mulexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = mulexp oper1 number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;关于&lt;code&gt;number&lt;/code&gt;的产生式就不再列出，实际上我们会在词法分析阶段将&lt;code&gt;number&lt;/code&gt;解析为&lt;code&gt;token&lt;/code&gt;。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们现在很容易就能看出，在该文法中，左式为&lt;code&gt;addexp&lt;/code&gt;和&lt;code&gt;mulexp&lt;/code&gt;的产生式都存在左递归的问题。&lt;/p&gt;
&lt;p&gt;如何消除呢？&lt;br&gt;首先观察产生式&lt;code&gt;addexp = addexp oper2 mulexp | mulexp&lt;/code&gt;&lt;br&gt;我们会发现这么一条规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addexp&lt;/code&gt;的推导产生的句型，必然是&lt;code&gt;mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是我们可以重写文法为：&lt;br&gt;&lt;figure class=&#34;highlight bnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;addexp ::= mulexp addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;addexp&amp;#x27;&lt;/span&gt; ::= oper2 addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27; | ε&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;或&lt;br&gt;&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;addexp&lt;/span&gt; = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第一种是教学时经常用于举例的BNF文法&lt;br&gt;其中&lt;code&gt;ε&lt;/code&gt;表示空。&lt;br&gt;&lt;em&gt;事实上关于BNF，似乎网上许多文章的写法都不尽相同。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;第二种则是使用EBNF描述的文法，通过&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;做了简化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;事实上，我们如果直接按照第一种文法编写解析代码，最终构成的语法树会存在结合律的问题。&lt;/em&gt;&lt;br&gt;&lt;em&gt;如果使用第二种文法，以多叉树的形式存储其节点，则会更加简单，因此本系列文章采用第二种文法。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;构造语法树&#34;&gt;&lt;a href=&#34;#构造语法树&#34; class=&#34;headerlink&#34; title=&#34;构造语法树&#34;&gt;&lt;/a&gt;构造语法树&lt;/h1&gt;&lt;p&gt;接下来我们尝试基于此文法与表达式&lt;code&gt;1 + 5 * 6&lt;/code&gt;，构造其抽象语法树。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;/posts/f573/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以尝试自己编写一些表达式，然后画画图，找找感觉。&lt;br&gt;也可以尝试自己在脑内遍历这颗语法树，看看是不是能够正确计算出结果。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1]消除左递归.&lt;a href=&#34;https://blog.csdn.net/qq2071114140/article/details/102787831&#34;&gt;https://blog.csdn.net/qq2071114140/article/details/102787831&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-30T08:34:27.524Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/1571.html</id>
        <title>【动手写ToyLang】3.语法分析</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/1571.html"/>
        <content type="html">&lt;h1 id=&#34;语法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析&#34;&gt;#&lt;/a&gt; 语法分析&lt;/h1&gt;
&lt;p&gt;按照传统的编译原理教材讲述的编译器结构， &lt;code&gt;词法分析阶段&lt;/code&gt; 之后，便是 &lt;code&gt;语法分析阶段&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如 “程序”，“语句”，“表达式” 等等。语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。语法分析程序可以用 YACC 等工具自动生成。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简而言之，语法分析即要求完成对输入串是否能符合语言文法规定的检查。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;关于文法的定义，参照下文。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法分析器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析器&#34;&gt;#&lt;/a&gt; 语法分析器&lt;/h2&gt;
&lt;p&gt;我们需要实现的是语法分析器。&lt;br&gt;
&lt;strong&gt;语法分析器的主要工作就是接收词法分析器输出的 Token，产出抽象语法树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本意我是不想讲太多学科中严谨定义的内容，一个是不好懂，容易劝退；一个是我个人的理解也有限。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;所以本系列文章就只简单提及我认为的 ToyLang 开发过程中必要的东西。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文法&#34;&gt;#&lt;/a&gt; 文法&lt;/h1&gt;
&lt;p&gt;这里还是请出百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;文法是一个汉语词汇，读音为 wén fǎ ，即文章的书写法规，一般用来指以文字、词语、短句、句子的编排而组成的完整语句和文章的合理性组织。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学编译原理确实有很多东西难以理解，特别是各种各样的名词。&lt;/p&gt;
&lt;p&gt;我们先简单理解成，&lt;strong&gt;文法就是描述如何将 token 组织成语法树的规则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的语言自然也需要存在文法，比如 if 语句必须按照下列文法来解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;   &lt;code&gt;exp&lt;/code&gt;   &lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，现在我们还是将重心放到四则表达式的解析上。&lt;/p&gt;
&lt;h2 id=&#34;上下文无关文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文无关文法&#34;&gt;#&lt;/a&gt; 上下文无关文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在推导产生式时，正在进行的非终结符展开与前后已经展开的终结符不存在关联的文法。&lt;/strong&gt;&lt;br&gt;
可以先继续向下看。&lt;/p&gt;
&lt;h1 id=&#34;ebnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf&#34;&gt;#&lt;/a&gt; EBNF&lt;/h1&gt;
&lt;p&gt;我们选择通过 &lt;code&gt;EBNF&lt;/code&gt;  来描述 &lt;code&gt;ToyLang&lt;/code&gt;  的文法。&lt;/p&gt;
&lt;p&gt;EBNF 是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;扩展巴科斯 - 瑙尔范式 (Extended Backus–Naur Form,EBNF) 是一种用于描述计算机编程语言等正式语言的与上下文无关语法的元语法 (metasyntax) 符号表示法。简而言之，它是一种描述语言的语言。它是基本巴科斯范式 (BNF) 元语法符号表示法的一种扩展。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只看说明通常很难理解新事物，咱们尝试一下用 EBNF 描述四则运算表达式的文法。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; number | exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;number = digit &amp;#123;digit&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;digit = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;5&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;6&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;7&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;8&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了便于理解，这里只描述了加法与减法。&lt;/p&gt;
&lt;h2 id=&#34;基本规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本规则&#34;&gt;#&lt;/a&gt; 基本规则&lt;/h2&gt;
&lt;p&gt;你可能看不明白，没关系，我简单给你讲解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  左边的，我们称为 &lt;code&gt;左式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  右边的，我们称为 &lt;code&gt;右式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;这样一行式子，我们称为 &lt;code&gt;产生式&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非终结符&#34;&gt;#&lt;/a&gt; 非终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;是某条产生式的左式，可以用其右式代换。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;exp&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;digit&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终结符&#34;&gt;#&lt;/a&gt; 终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无法被再被代换的符号。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; …。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;关于更多 EBNF 的语法规则，请参阅相关资料。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;自顶向下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自顶向下&#34;&gt;#&lt;/a&gt; 自顶向下&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;已知 &lt;code&gt;输入串&lt;/code&gt; 为某条产生式的左式，扫描输入串以不断展开其非终结符，直至只剩下终结符。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;这个展开的过程我们叫做推导，这属于自顶向下解析的思想。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试解析&#34;&gt;#&lt;/a&gt; 尝试解析&lt;/h2&gt;
&lt;p&gt;我们先来看第一行产生式：&lt;br&gt;
 &lt;code&gt;exp = exp &#39;+&#39; number | exp &#39;-&#39; number | number&lt;/code&gt; &lt;br&gt;
 它描述了 &lt;code&gt;表达式&lt;/code&gt; 可以由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;表达式+数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以由 &lt;code&gt;表达式-数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以只由 &lt;code&gt;数字&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;其中， &lt;code&gt;|&lt;/code&gt;  表示或的意思，如果你学习过正则表达式，应当很容易理解。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假设我们需要解析的 exp 输入串为 &lt;code&gt;1 + 2&lt;/code&gt; ，解析过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;+&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; number &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是在重复将右式中的非终结符展开的过程。&lt;br&gt;
&lt;em&gt;这里为了节约篇幅，我没有将从 number 推导成 digit，再推导成数字的推导过程记录下来，你明白这一点即可。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;再尝试一下解析 exp 输入串 &lt;code&gt;1&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;3&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; exp &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; number &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; &amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这个推导过程我们忽略了很多细节，并不能直接编写代码实现。&lt;/p&gt;
&lt;h1 id=&#34;尾声&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尾声&#34;&gt;#&lt;/a&gt; 尾声&lt;/h1&gt;
&lt;p&gt;在下一篇文章，我们会通过 EBNF 来描述完整的四则表达式的文法，并讲解 &lt;code&gt;递归下降&lt;/code&gt; 算法。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 扩展巴科斯范式 (EBNF) 简介.&lt;a href=&#34;https://blog.csdn.net/lin_strong/article/details/78583543&#34;&gt;https://blog.csdn.net/lin_strong/article/details/78583543&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; [2] 应该如何理解「上下文无关文法」？.&lt;a href=&#34;https://www.zhihu.com/question/21833944&#34;&gt;https://www.zhihu.com/question/21833944&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; 其他网络上较为零散的资料，无法一一列举，十分抱歉。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-30T03:52:33.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/aca7.html</id>
        <title>【动手写ToyLang】2.词法分析</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/aca7.html"/>
        <content type="html">&lt;h1 id=&#34;词法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#词法分析&#34;&gt;#&lt;/a&gt; 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析是整个编译器结构中最简单的一个阶段，所以放轻松，咱们往下看。&lt;/p&gt;
&lt;p&gt;那么，词法分析是什么呢？&lt;br&gt;
我们知道，程序开发者编写的源代码，也就是编译器最初能够接收到的输入，即连续的字符序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析存在的意义，就是提前将源代码切分成能被后续编译程序直接使用的单词序列。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如源代码中的变量标识，关键字，字符串字面量，数值字面量等…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们上一节课所展示的算术表达式， &lt;code&gt;3 + 2&lt;/code&gt; ，也是先将其分成 &lt;code&gt;3&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt; ，才能用于构成抽象语法树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析器产出的单词序列，我们将其称为 &lt;code&gt;Token&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;输入四则运算表达式产出token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入四则运算表达式产出token&#34;&gt;#&lt;/a&gt; 输入四则运算表达式，产出 &lt;code&gt;Token&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;我们既然需要将四则运算表达式转成 &lt;code&gt;Token&lt;/code&gt; ，也就需要知道其单词序列的规则，当然，关于这一点，我们早已烂熟于心了。&lt;br&gt;
以下是我通过正则表达式描述的 &lt;code&gt;Token&lt;/code&gt;  匹配规则 (以我们将要开发的词法分析器为准)。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TokenType&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eof&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Number&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\d+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpAdd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpSub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpMul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpDiv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepLParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepRParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;此处我忽略了运算符在正则表达式中需要转义的情况，做一个参考即可。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;lexer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer&#34;&gt;#&lt;/a&gt; Lexer&lt;/h1&gt;
&lt;p&gt;Lexer，即词法分析器。&lt;br&gt;
接下来我们编写代码实现 Lexer。&lt;/p&gt;
&lt;h2 id=&#34;token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token&#34;&gt;#&lt;/a&gt; Token&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\token.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// token类型常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TokenType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNil = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kEof,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpAdd,    &lt;span class=&#34;comment&#34;&gt;// +&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpSub,    &lt;span class=&#34;comment&#34;&gt;// -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpMul,    &lt;span class=&#34;comment&#34;&gt;// *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpDiv,    &lt;span class=&#34;comment&#34;&gt;// /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepLPar,  &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepRPar,  &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 描述token的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Token&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; line;		&lt;span class=&#34;comment&#34;&gt;// 行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TokenType type;		&lt;span class=&#34;comment&#34;&gt;// token类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string str;	&lt;span class=&#34;comment&#34;&gt;// 保存必要的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\token.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token::Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t_type == type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;token 这部分十分简单，不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;lexer-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer-2&#34;&gt;#&lt;/a&gt; Lexer&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\lexer.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;lexer/token.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LexerException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析器类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Lexer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string m_src;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; m_idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Token m_reserve;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\lexer.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LexerException::&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg) : std::&lt;span class=&#34;built_in&#34;&gt;exception&lt;/span&gt;(t_msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src) : m_src&amp;#123; t_src &amp;#125;, m_line&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_idx&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_reserve&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, TokenType::kNil &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_idx &amp;lt; m_src.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_src[m_idx++];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 跳过指定字符数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_idx += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Token token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_reserve.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kNil)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果有前瞻保存的token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回前瞻的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token = m_reserve;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_reserve.type = TokenType::kNil;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 跳过空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;amp;&amp;amp; c == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token.line = m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kEof;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据字符返回对应类型的Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpSub;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpDiv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepLParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepRParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;SkipChar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot parse token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们封装了一个词法分析器类；&lt;br&gt;
 &lt;code&gt;Lexer::NextToken&lt;/code&gt;  是关键成员函数，用于扫描字符序列，匹配一个完整的 Token 并返回。&lt;/p&gt;
&lt;h1 id=&#34;测试成果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试成果&#34;&gt;#&lt;/a&gt; 测试成果&lt;/h1&gt;
&lt;p&gt;接下来，我们编写测试代码，用于测试新鲜出炉的词法分析器。&lt;br&gt;
用于测试的表达式是： &lt;code&gt;1 + 33 - 0 * (33 / 999) - 123&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) - 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = lexer.&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (token.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kNumber:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;()); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpAdd: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;+\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpDiv: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;/\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpMul: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;*\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpSub: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepLParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;(\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepRParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 打印结果 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;999&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-29T04:29:50.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/56ac.html</id>
        <title>【动手写ToyLang】1.从四则运算表达式开始</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/56ac.html"/>
        <content type="html">&lt;h1 id=&#34;由此开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由此开始&#34;&gt;#&lt;/a&gt; 由此开始&lt;/h1&gt;
&lt;p&gt;如果你曾经接触过《编译原理》的话，不知道是否与我有着同样的困惑呢？&lt;/p&gt;
&lt;p&gt;各种不近人情的名词，公式乱飞，这让我学习起来格外痛苦。&lt;/p&gt;
&lt;p&gt;我在尝试阅读过不少文章、书籍，动手之后，才逐渐理解了一些比较关键的东西。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实际上，当我真正自己动手完成了对四则运算表达式的解析的那一刻，我才真切感受到了编译原理的优雅与美妙之处，这大概就是由无数人智慧造就的伟大吧 (偏得有点远了)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，我才会选择先从四则运算表达式开始，将其逐步扩展成为一门 &lt;code&gt;通用编程语言&lt;/code&gt; ，也能让读者每一节都能感受到学习有所反馈的喜悦。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初尝构思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初尝构思&#34;&gt;#&lt;/a&gt; 初尝构思&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;现在，我来尝试给你出一道题吧，请你用你所熟悉的语言，编写一个模块：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入符合四则运算表达式规范的字符串 (可以假定只有整数，不存在括号)；&lt;/li&gt;
&lt;li&gt;输出整型结果；&lt;/li&gt;
&lt;li&gt;要求关键逻辑由自己实现，不可借由库、语言本身提供的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你能实现吗？&lt;/p&gt;
&lt;p&gt;是否觉得脑子有些空白，难以组织成较为优雅的实现思路呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果你现在就能想到很棒的解法，那至少你要比我厉害多了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我曾经因为某些需求做过尝试，虽然最后写出来了，但是具体实现也非常丑陋，这里就不献丑了。&lt;/p&gt;
&lt;p&gt;但是我可以给你大致描述一下我当初的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，查找字符串中优先级较高的运算符  &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt; ，再前 / 后瞻运算符前后的数字，这个子串也能形成一个表达式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算出结果后，在原表达式中，用结果替换掉子串 (刚刚被计算的表达式)，再继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后再从头开始查找优先级更低一级的运算符 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt; ，直到运算完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当然，我们不会用这么低效的方法，也不会要求你真的写出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在提出来，也不是为了为难你，只是为了让你记住眼下的感觉，当你学完本系列文章后，再回来看看，这一道题，是否真的有那么难呢？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;抽象语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象语法树&#34;&gt;#&lt;/a&gt; 抽象语法树&lt;/h1&gt;
&lt;p&gt;咱们先来看百度百科对 &lt;code&gt;抽象语法树&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E6%A0%91/7031301?fromModule=lemma_inlink&#34;&gt;语法树&lt;/a&gt;（Syntax tree），是&lt;a href=&#34;https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink&#34;&gt;源代码&lt;/a&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95?fromModule=lemma_inlink&#34;&gt;语法&lt;/a&gt;结构的一种抽象表示。它以树状的形式表现&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;的语法结构，树上的每个节点都表示源代码中的一种结构。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯… 不愧是名字就带着抽象的东西，连说明都这么抽象。&lt;/p&gt;
&lt;p&gt;咱们先不整那么多虚头巴脑的，干就完了。&lt;/p&gt;
&lt;h2 id=&#34;构造四则运算表达式的ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造四则运算表达式的ast&#34;&gt;#&lt;/a&gt; 构造四则运算表达式的 AST&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;3 + 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个是大家熟悉的算术表达式，实际上，我们人脑是如何计算这个表达式的呢？当然需要遵循某些规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先乘除&lt;/li&gt;
&lt;li&gt;再加减&lt;/li&gt;
&lt;li&gt;从左往右结合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我们自然是需要先&lt;strong&gt;左往右找&lt;/strong&gt;在表达式中找到 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt;  两种符号，好消息是，没有，嘿嘿。&lt;/p&gt;
&lt;p&gt;接下来继续&lt;strong&gt;左往右找&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; ，找到之后将其取出，这也是我们需要计算的子表达式。&lt;/p&gt;
&lt;p&gt;我们将其分成三部分，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边的数字  &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加法运算符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右边的数字  &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以得到这么一棵树型结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们遍历这棵树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 + 2&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多运算符与结合律&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多运算符与结合律&#34;&gt;#&lt;/a&gt; 多运算符与结合律&lt;/h3&gt;
&lt;p&gt;那么，当一个表达式中，存在多个运算符时，应该如何构造语法树呢？&lt;br&gt;
接下来我们构造表达式  &lt;code&gt;3 - 2 + 4&lt;/code&gt;  的树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先我们应该注意的一点是，需要先被执行运算 (优先级更高) 的子表达式，其节点相对的，要在更底下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还是先来遍历这颗树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；
&lt;ol&gt;
&lt;li&gt;左子节点是减法，表明需要用左子节点减去右子节点，需要继续向下展开；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 - 2&lt;/code&gt; ，返回结果  &lt;code&gt;1&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 4&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，遍历的过程也符合我们所要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由左边的运算符开始，向右结合。&lt;/li&gt;
&lt;li&gt;同优先级下，我们需要优先计算左边的运算符组成的子表达式，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我再给你画一下另一种情况，你也就明白了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以尝试一下遍历这棵树，会发现先被执行的一定是加法，这并不符合我们的从一开始就要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;br&gt;
在部分情况下，由于结合律的错误，就会产出错误的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如我们本次求解的表达式，通过遍历此树得出的结果为 &lt;code&gt;-3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标根据语法规则生成ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标根据语法规则生成ast&#34;&gt;#&lt;/a&gt; 目标：根据语法规则生成 AST&lt;/h2&gt;
&lt;p&gt;我不说你大概也已经猜到了，其实我们上面所构造的树，在当前的应用场景下，就叫做 &lt;code&gt;抽象语法树&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;遍历抽象语法树并计算的过程，与我们人脑对表达式的计算的过程是十分相似的。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，我们只需要构造出这么一颗抽象语法树，就已经基本上完成了编译工作的一大半甚至全部。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;此时，若需要执行编译产生的结果，只需要遍历我们所生成 AST 即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在遍历的过程中，我们就能够正确的完成对加法表达式的加法运算，再完成对赋值表达式的赋值运算。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ast解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast解释器&#34;&gt;#&lt;/a&gt; AST 解释器&lt;/h1&gt;
&lt;p&gt;最后，我们也确实展示了有关 &amp;quot;解释器&amp;quot; 的东西，是的，即便你难以置信。&lt;br&gt;
遍历这棵树的过程，就可以叫做解释；&lt;br&gt;
如果我们写出代码实现遍历树的过程，即是 &lt;code&gt;AST解释器&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，解释器是一种比较广泛的概念，即便到后面我们基于 AST 生成了字节码，交给虚拟机执行，我们的程序也依然可以称之为解释器，只不过解释的对象从 AST 换成了字节码。&lt;/p&gt;
&lt;p&gt;我个人觉得，当初造这个词的人只是为了区分所谓的 &amp;quot;编译型语言&amp;quot; 和 &amp;quot;解释型语言&amp;quot;。&lt;br&gt;
以下是百度百科对解释器的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;解释器（&lt;a href=&#34;https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997?fromModule=lemma_inlink&#34;&gt;英语&lt;/a&gt;：Interpreter），又译为直译器，是一种电脑程序，能够把高级&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;此处关于 &lt;code&gt;每转译一行程序叙述就立刻运行&lt;/code&gt; 的说明也不尽然，至少现在很多被称为 &lt;code&gt;解释器&lt;/code&gt; 的程序，并非如此 (如 Python 解释器、Java 解释器等)。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-28T15:01:12.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/c4d3.html</id>
        <title>【动手写ToyLang】0.前言</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/c4d3.html"/>
        <content type="html">&lt;h1 id=&#34;关于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于&#34;&gt;#&lt;/a&gt; 关于&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本系列文章会手把手教你打造一门在别人看来是&lt;emp&gt;玩具&lt;/emp&gt;的通用编程语言，事实也确实如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但计算机本身就是一门需要动手的学科，在对基本原理有一定程度的理解之后，自己动手实践才是学习的最好的捷径，为此制造 &amp;quot;玩具&amp;quot;，并不丢人。&lt;/p&gt;
&lt;p&gt;笔者对《编译原理》这门学科的学习程度也十分有限，因此本系列文章的读者不仅仅是你们，也包括我，写下的这篇文章也是支撑我继续动手实践的动力。&lt;br&gt;
学完本系列文章之后，基本上可以对编译原理有一定程度的认知，再继续往下学习也就不会那么困难了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我会尽可能的查阅资料，以保证输出内容的可靠性，如果还是难以避免的出现了错误，望批评指正，感激不尽。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;开发语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发语言&#34;&gt;#&lt;/a&gt; 开发语言&lt;/h2&gt;
&lt;p&gt;这里我选用我个人较为常用的 C++ 作为开发语言，风格尽量以《Google C++ Style Guide》为准，在我个人能力范围内尽量写得 &amp;quot;现代 C++&amp;quot; 一点。&lt;/p&gt;
&lt;p&gt;当然，我个人也还是 C++ 彩笔，代码写得不好，还请理解。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境&lt;/h2&gt;
&lt;p&gt;我基本上只在 Windows 上工作，因此选择自然是 &lt;code&gt;Visual Studio&lt;/code&gt; ，你们可以选择自己喜欢的开发环境。&lt;/p&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-28T13:18:53.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5e1f.html</id>
        <title>【Proxifier】基本配置与使用</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5e1f.html"/>
        <content type="html">&lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;br&gt;
 Block:&lt;/li&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;br&gt;
 Proxy HTTPS 127.0.0.1:&lt;/li&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书。&lt;/p&gt;
</content>
        <updated>2022-10-26T16:37:40.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5e1f.html</id>
        <title>【Proxifier】基本配置与使用</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5e1f.html"/>
        <content type="html">&lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/10.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;br&gt;
 Block:&lt;/li&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;br&gt;
 Proxy HTTPS 127.0.0.1:&lt;/li&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/11.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/12.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/13.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书用于校验。&lt;/p&gt;
</content>
        <category term="网络分析" />
        <category term="Proxifier" />
        <updated>2022-10-26T16:37:40.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/842e.html</id>
        <title>【MFC】视图与文档</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/842e.html"/>
        <content type="html">&lt;h1 id=&#34;视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图&#34;&gt;#&lt;/a&gt; 视图&lt;/h1&gt;
&lt;h2 id=&#34;视图窗口简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图窗口简述&#34;&gt;#&lt;/a&gt; 视图窗口简述&lt;/h2&gt;
&lt;p&gt;在 MFC 的设计中，图形的显示的这部分工作，交由 &lt;code&gt;视图窗口&lt;/code&gt; 负责。&lt;br&gt;
框架窗口则担容器之任，成为菜单、标题栏、视图窗口等窗口的容身之所，通常不直接在其客户区中绘制。&lt;/p&gt;
&lt;emp&gt;视图窗口就被设计为一个没有标题栏，只有客户区的窗口，通常覆盖在框架窗口的客户区上。&lt;/emp&gt;
&lt;h2 id=&#34;cview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cview&#34;&gt;#&lt;/a&gt; CView&lt;/h2&gt;
&lt;p&gt;在 MFC 中，视图窗口对应的类即 &lt;code&gt;CView&lt;/code&gt; ，继承自 &lt;code&gt;CWnd&lt;/code&gt; ；&lt;/p&gt;
&lt;h3 id=&#34;cviewondraw&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cviewondraw&#34;&gt;#&lt;/a&gt; CView::OnDraw&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CView&lt;/code&gt;  中声明了一个纯虚函数 &lt;code&gt;CView::OnDraw&lt;/code&gt; ，因此继承必须重写这个函数，用于处理绘制消息；&lt;br&gt;
这个函数是由 &lt;code&gt;CView::OnPanit&lt;/code&gt;  调用的。&lt;/p&gt;
&lt;h2 id=&#34;使用视图窗口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用视图窗口&#34;&gt;#&lt;/a&gt; 使用视图窗口&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyView* pView = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pView-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCView&amp;quot;&lt;/span&gt;, WS_CHILD | WS_VISIBLE | WS_BORDER,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CRect&amp;#123;&amp;#125;, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, AFX_IDW_PANE_FIRST);     &lt;span class=&#34;comment&#34;&gt;// AFX_IDW_PANE_FIRST及以上的id创建出来的视图窗口，边框将与客户区重叠，不使用我们传递的CRect对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pViewActive = pView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;老朋友了，相信读者阅读起来不会有什么困难，我们为框架窗口的客户区覆盖上了一个视图窗口。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档&#34;&gt;#&lt;/a&gt; 文档&lt;/h1&gt;
&lt;h2 id=&#34;文档简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档简述&#34;&gt;#&lt;/a&gt; 文档简述&lt;/h2&gt;
&lt;p&gt;在 MFC 中，将数据的管理交给 &lt;code&gt;文档&lt;/code&gt; 负责，再与负责显示数据的 &lt;code&gt;视图&lt;/code&gt; 进行数据交互。&lt;/p&gt;
&lt;h2 id=&#34;cdocument&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cdocument&#34;&gt;#&lt;/a&gt; CDocument&lt;/h2&gt;
&lt;p&gt;MFC 提供的文档类。&lt;/p&gt;
&lt;p&gt;一个文档可以同时与多个视图窗口交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部维护了一个链表，连接所有与当前文档对象交互的视图对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个视图窗口只能与一个文档交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部由一个成员变量指向交互的文档对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用文档&#34;&gt;#&lt;/a&gt; 使用文档&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口，并挂接到框架窗口的主活动视图中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这回，我们有了不少改动。&lt;/p&gt;
&lt;p&gt;首先，我们先从应用的实例初始化开始看起：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们修改了 &lt;code&gt;CMyWinApp::InitInstance&lt;/code&gt;  (及 &lt;code&gt;CMyView&lt;/code&gt;  类)，通过 MFC 的 &lt;code&gt;动态创建机制&lt;/code&gt; ，让 MFC 为我们创建视图窗口，并与主框架窗口建立关联。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说实话，我觉得 MFC 整这么多种选择就很烦 = =，这个也要学哪个也要学，既然要封装不妨封装彻底一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我们还建立了消息映射 &lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt; 、 &lt;code&gt;CMyView::OnCreate&lt;/code&gt; ，但是并没有做别的事，只是调用了父类实现的消息映射；&lt;br&gt;
实际上并不需要我们去建立消息映射然后调用父类的成员函数，这里是为了方便读者看得更明显。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多视图&#34;&gt;#&lt;/a&gt; 多视图&lt;/h1&gt;
&lt;p&gt;在一个 &lt;code&gt;不规则框架窗口&lt;/code&gt; 中，可以同时存在多个视图窗口。&lt;/p&gt;
&lt;p&gt;我们需要在主框架窗口的客户区中，放置不规则框架窗口；&lt;br&gt;
再在不规则框架窗口中放置多个视图窗口。&lt;/p&gt;
&lt;h2 id=&#34;csplitterwnd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csplitterwnd&#34;&gt;#&lt;/a&gt; CSplitterWnd&lt;/h2&gt;
&lt;p&gt;拆分窗口类，即不规则框架窗口，&lt;emp&gt;其客户区可以放置多个视图窗口。&lt;/emp&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试多视图&#34;&gt;#&lt;/a&gt; 尝试多视图&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CSplitterWnd m_pSplitWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 重写框架窗口创建客户区时调用的成员函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateStatic&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);       &lt;span class=&#34;comment&#34;&gt;// 创建布局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView), &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, pContext-&amp;gt;m_pNewViewClass, &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-25T14:01:10.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/603c.html</id>
        <title>【MFC】探索运行时类信息机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/603c.html"/>
        <content type="html">&lt;p&gt;空的哦&lt;/p&gt;
</content>
        <updated>2022-10-16T14:44:08.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/6ee.html</id>
        <title>【MFC】工具栏</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/6ee.html"/>
        <content type="html">&lt;h1 id=&#34;工具栏简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工具栏简述&#34;&gt;#&lt;/a&gt; 工具栏简述&lt;/h1&gt;
&lt;p&gt;Windows 下的工具栏通常是指放置工具的容器。&lt;br&gt;
通常我们能在一些软件的菜单栏下见到，各类样式的图形按钮，被框在一栏中，这便是工具栏。&lt;/p&gt;
&lt;h1 id=&#34;添加工具栏资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加工具栏资源&#34;&gt;#&lt;/a&gt; 添加工具栏资源&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;项目&lt;/code&gt; ， &lt;code&gt;添加&lt;/code&gt;  -&amp;gt;  &lt;code&gt;资源&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;Toolbar&lt;/code&gt; ，点击 &lt;code&gt;新建&lt;/code&gt; ，进入资源编辑界面。&lt;/li&gt;
&lt;li&gt;自行折腾编辑界面，随便画几个图案，这就是你工具栏里面的工具按钮&lt;/li&gt;
&lt;li&gt;设置资源 ID，这里我将工具栏 ID 设置为 &lt;code&gt;IDR_TOOLBAR_1&lt;/code&gt; ，工具按钮的 ID 依次为 &lt;code&gt;ID_TOOLBAR_BUTTOR_1&lt;/code&gt; 、 &lt;code&gt;ID_TOOLBAR_BUTTOR_2&lt;/code&gt; 、 &lt;code&gt;ID_TOOLBAR_BUTTOR_3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;资源编辑界面示范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/6ee/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用工具栏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用工具栏&#34;&gt;#&lt;/a&gt; 使用工具栏&lt;/h1&gt;
&lt;p&gt;工具栏的使用与菜单类似，只需要映射 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息即可。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CToolBar* m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_1, OnToolBar_1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_2, OnToolBar_2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_3, OnToolBar_3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Menu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ToolBar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_ALIGN_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadToolBar&lt;/span&gt;(IDR_TOOLBAR_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pToolBar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pToolBar = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，在上一节代码的基础上进行了如下部分修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入头文件 &lt;code&gt;afxext.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMyFrameWnd&lt;/code&gt;  类添加私有成员 &lt;code&gt;m_pToolBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt;  函数中使 &lt;code&gt;m_pToolBar&lt;/code&gt;  指向新创建的对象，并进行工具栏的加载&lt;/li&gt;
&lt;li&gt;处理 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息的映射&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;工具栏把手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工具栏把手&#34;&gt;#&lt;/a&gt; 工具栏把手&lt;/h1&gt;
&lt;p&gt;工具栏不仅仅只能固定在菜单栏下方，它是可以拖动，漂浮的。&lt;br&gt;
而工具栏的把手，就是工具栏中，被允许被鼠标拖拽的控制区域。&lt;/p&gt;
&lt;h2 id=&#34;cbrs_gripper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cbrs_gripper&#34;&gt;#&lt;/a&gt; CBRS_GRIPPER&lt;/h2&gt;
&lt;p&gt;需要为工具栏添加把手时，需要在 &lt;code&gt;CToolBar::CreateEx&lt;/code&gt;  函数中添加 &lt;code&gt;CBRS_GRIPPER&lt;/code&gt;  样式。&lt;/p&gt;
&lt;h2 id=&#34;ctoolbarenabledocking&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ctoolbarenabledocking&#34;&gt;#&lt;/a&gt; CToolBar::EnableDocking&lt;/h2&gt;
&lt;p&gt;用于指定工具栏可以停放到窗口中的何处&lt;/p&gt;
&lt;h2 id=&#34;cframewndenabledocking&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cframewndenabledocking&#34;&gt;#&lt;/a&gt; CFrameWnd::EnableDocking&lt;/h2&gt;
&lt;p&gt;用于指定框架窗口允许被工具栏停放的位置&lt;/p&gt;
&lt;h2 id=&#34;cframewnddockcontrolbar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cframewnddockcontrolbar&#34;&gt;#&lt;/a&gt; CFrameWnd::DockControlBar&lt;/h2&gt;
&lt;p&gt;设置工具栏当前停放的位置&lt;/p&gt;
&lt;h2 id=&#34;允许任意停放的工具栏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#允许任意停放的工具栏&#34;&gt;#&lt;/a&gt; 允许任意停放的工具栏&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CToolBar* m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_1, OnToolBar_1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_2, OnToolBar_2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_3, OnToolBar_3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Menu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ToolBar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_ALIGN_TOP | CBRS_GRIPPER);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadToolBar&lt;/span&gt;(IDR_TOOLBAR_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;EnableDocking&lt;/span&gt;(CBRS_ALIGN_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;EnableDocking&lt;/span&gt;(CBRS_ALIGN_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DockControlBar&lt;/span&gt;(m_pToolBar);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pToolBar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pToolBar = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，就留给读者自行调试了。&lt;/p&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-16T08:41:10.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/d43b.html</id>
        <title>【MFC】菜单</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/d43b.html"/>
        <content type="html">&lt;h1 id=&#34;菜单简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#菜单简述&#34;&gt;#&lt;/a&gt; 菜单简述&lt;/h1&gt;
&lt;p&gt;Windows 的菜单分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;窗口菜单&lt;/li&gt;
&lt;li&gt;弹出式菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;窗口菜单是挂接到窗口上的；&lt;br&gt;
弹出式菜单是根据程序设计者的需要在某处弹出的。&lt;/p&gt;
&lt;h1 id=&#34;添加菜单资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加菜单资源&#34;&gt;#&lt;/a&gt; 添加菜单资源&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;项目&lt;/code&gt; ， &lt;code&gt;添加&lt;/code&gt;  -&amp;gt;  &lt;code&gt;资源&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;Menu&lt;/code&gt; ，点击 &lt;code&gt;新建&lt;/code&gt; ，进入资源编辑界面。&lt;/li&gt;
&lt;li&gt;顶层菜单 (类型为窗口菜单) 添加一个项 &lt;code&gt;新建&lt;/code&gt; 、顶层的子菜单 (类型为弹出式菜单) 添加一个项 &lt;code&gt;文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改顶层菜单的资源为 &lt;code&gt;IDR_MENU_TOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改顶层菜单的 &lt;code&gt;新建&lt;/code&gt; 项的子菜单的 &lt;code&gt;文件&lt;/code&gt; 项的资源为 &lt;code&gt;ID_MENU_FILE_NEW&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：此处附注的菜单类型并不需要你在编辑时设置，是指明该菜单属于什么类型。&lt;br&gt;
顶层菜单的类型就是 &lt;code&gt;窗口菜单&lt;/code&gt; &lt;br&gt;
顶层菜单的子菜单的类型就是 &lt;code&gt;弹出式菜单&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源编辑界面示范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/d43b/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用窗口菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用窗口菜单&#34;&gt;#&lt;/a&gt; 使用窗口菜单&lt;/h1&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码想必读者也比较熟悉了，有一些需要注意的改动如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CMyFrameWnd&lt;/code&gt;  添加私有成员 &lt;code&gt;CMenu* m_pMenu&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;添加了一个新的消息映射条目 &lt;code&gt;ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;为消息映射函数添加了宏 &lt;code&gt;afx_msg&lt;/code&gt; ；
&lt;ul&gt;
&lt;li&gt;并无特殊作用，仅为提高代码可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;挂接窗口菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#挂接窗口菜单&#34;&gt;#&lt;/a&gt; 挂接窗口菜单&lt;/h2&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;首先，代码中 &lt;code&gt;new&lt;/code&gt;  了一个 &lt;code&gt;CMenu&lt;/code&gt;  类对象，使我们添加的私有成员指向它，这是 MFC 封装的菜单类。&lt;br&gt;
其次，调用了 &lt;code&gt;CMenu::LoadMenu&lt;/code&gt; ，用于加载我们添加的菜单资源。&lt;br&gt;
最后，以当前 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象的身份，调用了 &lt;code&gt;CFrameWnd::SetMenu&lt;/code&gt;  成员函数。&lt;/p&gt;
&lt;p&gt;至此，我们完成了将窗口菜单挂接到 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象上的工作。&lt;/p&gt;
&lt;h2 id=&#34;处理菜单项回调事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理菜单项回调事件&#34;&gt;#&lt;/a&gt; 处理菜单项回调事件&lt;/h2&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;CMyFrameWnd::OnMenu_File_New&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;只需要通过 &lt;code&gt;ON_COMMAND&lt;/code&gt;  宏，就可以建立指定菜单资源被点击 ( &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息) 与回调函数的映射。&lt;/p&gt;
&lt;h2 id=&#34;wm_command&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wm_command&#34;&gt;#&lt;/a&gt; WM_COMMAND&lt;/h2&gt;
&lt;p&gt;命令消息，在菜单被点击等事件发生时产生。&lt;/p&gt;
&lt;p&gt;在 MFC 的消息处理架构中， &lt;code&gt;WM_COMMAND&lt;/code&gt;  的处理流程与我们先前接触的 &lt;code&gt;WM_CREATE&lt;/code&gt;  等消息是不同的。&lt;br&gt;
我们回到 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;  函数，在函数开始部分就能看到相关源码。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LRESULT lResult = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessageMapFunctions&lt;/span&gt; mmf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mmf.pfn = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CInternalGlobalLock winMsgLock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// special case for commands&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message == WM_COMMAND)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;OnCommand&lt;/span&gt;(wParam, lParam))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			lResult = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; LReturnTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;只要是 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息，会调用 &lt;code&gt;CWnd::OnCommand&lt;/code&gt; ，返回后就再次返回了。&lt;/p&gt;
&lt;p&gt;最终会走到全局静态函数 &lt;code&gt;_AfxDispatchCmdMsg&lt;/code&gt;  中回调 &lt;code&gt;CMyFrameWnd::OnMenu_File_New&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;由于代码较为繁琐，故不再向下深入，读者感兴趣可以自行调试。&lt;/p&gt;
&lt;h1 id=&#34;使用弹出式菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用弹出式菜单&#34;&gt;#&lt;/a&gt; 使用弹出式菜单&lt;/h1&gt;
&lt;h2 id=&#34;wm_contextmenu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wm_contextmenu&#34;&gt;#&lt;/a&gt; WM_CONTEXTMENU&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DefWindowProc&lt;/code&gt;  在处理 &lt;code&gt;WM_RBUTTONUP&lt;/code&gt;  或 &lt;code&gt;WM_NCRBUTTONUP&lt;/code&gt;  消息，或是用户键入 &lt;code&gt;SHIFT+F10&lt;/code&gt;  时，生成 &lt;code&gt;WM_CONTEXTMENU&lt;/code&gt;  消息。&lt;/p&gt;
&lt;h2 id=&#34;实现右键客户区弹出菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现右键客户区弹出菜单&#34;&gt;#&lt;/a&gt; 实现右键客户区弹出菜单&lt;/h2&gt;
&lt;p&gt;我们知道，在菜单编辑界面中，顶层菜单的子菜单都是独立的弹出式菜单；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故这些子菜单都是可以被单独弹出的&lt;/li&gt;
&lt;li&gt;而顶层菜单项被点击时弹出子菜单不需要我们处理，是因为 windows 替我们做好了相关的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们通过映射 &lt;code&gt;WM_CONTEXTMENU&lt;/code&gt;  消息，实现在客户区右键，弹出顶层菜单 &lt;code&gt;文件&lt;/code&gt; 的子菜单。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，建议读者自行尝试调试运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br&gt;
&lt;a href=&#34;https://www.cnblogs.com/hanford/p/6163690.html&#34;&gt;https://www.cnblogs.com/hanford/p/6163690.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.cnblogs.com/greenleaf1976/p/16460330.html&#34;&gt;https://www.cnblogs.com/greenleaf1976/p/16460330.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-15T07:28:54.120Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/51b.html</id>
        <title>【C/C++逆向】数据类型的表现形式</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/51b.html"/>
        <content type="html">&lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;咱也不知道发生了啥&#34; data-whm=&#34;咱也不知道发生了啥&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;dfea2844e4baf3c8dcd5a0ea14f21045fd66d72652f94d8b7b034e0193d5ff28&#34;&gt;db3f4eb17c2318c256622b6960219afda507dbc0f727563f20c8a378137edd144480af96f63ef9ac5ad29fe678f7a1b1&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;或许，需要什么魔法咒语？&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt;</content>
        <category term="逆向分析" />
        <category term="C/C++" />
        <category term="反汇编" />
        <updated>2022-10-14T09:49:00.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/3fe5.html</id>
        <title>【C/C++逆向】前言</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/3fe5.html"/>
        <content type="html">&lt;p&gt;当前分类所收录的博客主要是我个人学习 C/C++ 逆向时记录的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考资料&lt;br&gt;
《C++ 反汇编与逆向分析技术揭秘 (第 2 版)》. 钱林松、张延清&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="逆向分析" />
        <category term="C/C++" />
        <category term="反汇编" />
        <updated>2022-10-14T09:48:45.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/3f7e.html</id>
        <title>【逆向工具】常用工具推荐</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/3f7e.html"/>
        <content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;工欲善其事，必先利其器。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里收录了一些我个人常用并推荐的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;动态分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态分析&#34;&gt;#&lt;/a&gt; 动态分析&lt;/h1&gt;
&lt;h2 id=&#34;软件调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件调试&#34;&gt;#&lt;/a&gt; 软件调试&lt;/h2&gt;
&lt;h3 id=&#34;x64dbg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#x64dbg&#34;&gt;#&lt;/a&gt; x64dbg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;面向未来的 Windows R3 调试器，开源，支持 x86/x64。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方网站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://x64dbg.com/&#34;&gt;https://x64dbg.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ret-sync&lt;/li&gt;
&lt;li&gt;SharpOD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windbg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windbg&#34;&gt;#&lt;/a&gt; WinDbg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;微软家的东西，不仅能够调试应用，还能调试内核，学习内核必备的工具。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐辅助工具
&lt;ul&gt;
&lt;li&gt;VirtualKD-Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;内存搜索&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存搜索&#34;&gt;#&lt;/a&gt; 内存搜索&lt;/h2&gt;
&lt;h3 id=&#34;cheat-engine&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cheat-engine&#34;&gt;#&lt;/a&gt; Cheat Engine&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;大名鼎鼎的 CE，开源的内存修改工具，但不仅仅只能用于修改内存，其中依赖于调试机制的 &amp;quot;找出是什么访问 / 修改了这个地址&amp;quot; 等功能也非常好用。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cheatengine.org/&#34;&gt;https://www.cheatengine.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;进程监控&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程监控&#34;&gt;#&lt;/a&gt; 进程监控&lt;/h2&gt;
&lt;h3 id=&#34;process-monitor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#process-monitor&#34;&gt;#&lt;/a&gt; Process Monitor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用于 Windows 的高级监控工具，能够实时监控进程的行为，如文件、注册表、网络等动作，对分析工作有很大的帮助。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/sysinternals/downloads/procmon&#34;&gt;https://learn.microsoft.com/en-us/sysinternals/downloads/procmon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;火绒剑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#火绒剑&#34;&gt;#&lt;/a&gt; 火绒剑&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;火绒剑的系统监控也意外的好用，比起 Process Monitor，我觉得火绒剑的使用体验更加轻快。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;网络分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络分析&#34;&gt;#&lt;/a&gt; 网络分析&lt;/h2&gt;
&lt;h3 id=&#34;wireshark&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wireshark&#34;&gt;#&lt;/a&gt; WireShark&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;开源的网络分析工具，针对网卡抓包，能用于分析学习更底层的协议 (传输层，网络层、数据链路层)。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;https://www.wireshark.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fiddler&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fiddler&#34;&gt;#&lt;/a&gt; Fiddler&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;免费的 http/https 抓包工具，基于系统代理工作，https 抓包原理是中间人攻击，为操作系统安装 Fiddler 生成的证书，就能截获信任操作系统中安装的证书的应用程序的 https 流量。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.telerik.com/fiddler&#34;&gt;https://www.telerik.com/fiddler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;强制代理工具，有些应用并不会使用系统代理设置指定的代理，因此 Fiddler 无法截获这类应用的 http/https 流量，这个时候 Proxifier 是很好的搭档。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;个人文章
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;/posts/5e1f.html&#34; title=&#34;【Proxifier】基本配置与使用&#34;&gt;【Proxifier】基本配置与使用&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;静态分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态分析&#34;&gt;#&lt;/a&gt; 静态分析&lt;/h1&gt;
&lt;h2 id=&#34;反汇编&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反汇编&#34;&gt;#&lt;/a&gt; 反汇编&lt;/h2&gt;
&lt;h3 id=&#34;ida&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ida&#34;&gt;#&lt;/a&gt; IDA&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;我觉得 &amp;quot;IDA&amp;quot; 这个名字，就是对 &amp;quot;静态分析&amp;quot; 最有力的诠释了，世界顶级的交互式反汇编工具，功能及其强大，所以使用也很复杂。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推荐书籍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《IDA Pro 权威指南 (第 2 版)》&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ret-sync&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pe分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pe分析&#34;&gt;#&lt;/a&gt; PE 分析&lt;/h2&gt;
&lt;h3 id=&#34;cff-explorer-viii&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cff-explorer-viii&#34;&gt;#&lt;/a&gt; CFF Explorer VIII&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;很优秀的 PE 分析工具，用过之后就基本上没有再尝试其他的 PE 工具了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;十六进制编辑器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十六进制编辑器&#34;&gt;#&lt;/a&gt; 十六进制编辑器&lt;/h2&gt;
&lt;h3 id=&#34;hxd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hxd&#34;&gt;#&lt;/a&gt; HxD&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;个人体验很好的免费十六进制编辑器，轻便。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mh-nexus.de/en/hxd/&#34;&gt;https://mh-nexus.de/en/hxd/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="逆向分析" />
        <category term="工具" />
        <updated>2022-10-14T08:13:05.618Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/c22c.html</id>
        <title>【MFC】探索消息映射机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/c22c.html"/>
        <content type="html">&lt;h1 id=&#34;消息机制简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息机制简述&#34;&gt;#&lt;/a&gt; 消息机制简述&lt;/h1&gt;
&lt;p&gt;我们知道，Windows 的窗口是由&lt;strong&gt;消息&lt;/strong&gt;驱动的；&lt;br&gt;
Windows 通过捕获鼠标、键盘等输入设备产生的动作，再生成对应的消息，并传递给相应的窗口所属的线程。&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;直接基于 &lt;code&gt;Win32API&lt;/code&gt;  开发时，我们需要在注册窗口类时指定&lt;strong&gt;窗口过程函数&lt;/strong&gt;，以告知 Windows 回调 (传递消息) 的入口。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc的消息映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc的消息映射&#34;&gt;#&lt;/a&gt; MFC 的消息映射&lt;/h1&gt;
&lt;p&gt;而 MFC 为我们提供了一种更为方便的机制，&lt;emp&gt;直接为一个消息与一个函数建立映射关系&lt;/emp&gt;，在消息产生时，回调此函数，而不再需要我们去自行分发。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ON_MESSAGE&lt;/span&gt;(WM_CREATE, OnCreate)   &lt;span class=&#34;comment&#34;&gt;// 将WM_CREATE与CMyFrameWnd类的成员函数OnCreate建立映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;消息映射宏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射宏&#34;&gt;#&lt;/a&gt; 消息映射宏&lt;/h2&gt;
&lt;p&gt;MFC 的消息映射是通过几个&lt;strong&gt;宏函数&lt;/strong&gt;来实现的，我们以上述代码为例，将宏展开，一探究竟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明宏&lt;br&gt;
 MFC 的声明宏，就是在窗口类中声明两个受保护的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ECLARE_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义宏&lt;br&gt;
定义则稍显复杂，由多个宏函数组成，实际上是在实现声明宏声明的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; BEGIN_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;BEGIN_MESSAGE_MAP(CMyFrameWnd, CFrameWnd)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ON_MESSAGE() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;ON_MESSAGE(WM_CREATE, OnCreate)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实际上是在为_messageEntries变量的初始化列表添加结构体元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; END_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体展开&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例-宏展开 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;通过宏添加消息映射时，实际上是重写了 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;GetMessageMap&lt;/code&gt;  成员虚函数；&lt;br&gt;
而 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数初始化了一个名为 &lt;code&gt;_messageEntries&lt;/code&gt;  和 &lt;code&gt;messageMap&lt;/code&gt;  的&lt;strong&gt;静态局部变量&lt;/strong&gt;，并将该变量的地址返回。&lt;br&gt;
我们简单猜测，与上一节重写 &lt;code&gt;WindowProc&lt;/code&gt;  类似，微软在&lt;strong&gt;窗口过程函数&lt;/strong&gt; &lt;code&gt;AfxWndProc&lt;/code&gt;  的某处，得到窗口对象之后，以窗口对象的身份调用其成员虚函数 &lt;code&gt;GetMessageMap&lt;/code&gt; ；&lt;br&gt;
由于成员虚函数被重写的原因，得到我们所设定的&lt;strong&gt;映射关系表&lt;/strong&gt;，我们这里就把它叫做&lt;strong&gt;消息映射表&lt;/strong&gt;；&lt;br&gt;
基于此消息映射表，就可以在&lt;strong&gt;窗口过程函数&lt;/strong&gt;中，&lt;emp&gt;根据消息调用对应的成员函数&lt;/emp&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;探索实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#探索实现原理&#34;&gt;#&lt;/a&gt; 探索实现原理&lt;/h1&gt;
&lt;p&gt;我们基本上能够理解消息映射机制的工作原理，这小节我们就扒一下微软的源码，以便更清晰的了解消息映射机制。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxWndProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT CALLBACK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;AfxWndProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// special message which identifies the window as using AfxWndProc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nMsg == WM_QUERYAFXWNDPROC)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// all other messages route through message map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWnd* pWnd = CWnd::&lt;span class=&#34;built_in&#34;&gt;FromHandlePermanent&lt;/span&gt;(hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd==&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || pWnd-&amp;gt;m_hWnd == hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || pWnd-&amp;gt;m_hWnd != hWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ::&lt;span class=&#34;built_in&#34;&gt;DefWindowProc&lt;/span&gt;(hWnd, nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AfxCallWndProc&lt;/span&gt;(pWnd, hWnd, nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;调试上面提供的代码，首先在 &lt;code&gt;AfxWndProc&lt;/code&gt;  函数设置断点；&lt;/p&gt;
&lt;p&gt;继续走到 &lt;code&gt;AfxCallWndProc&lt;/code&gt; ；&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxCallWndProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT AFXAPI &lt;span class=&#34;title&#34;&gt;AfxCallWndProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* pWnd, HWND hWnd, UINT nMsg,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	WPARAM wParam = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, LPARAM lParam = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// delegate to object&amp;#x27;s WindowProc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = pWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;WindowProc&lt;/span&gt;(nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;到此处停下，此时你可能会有些疑惑，诶，我们并没有重写 &lt;code&gt;Cwnd::WindowProc&lt;/code&gt; ，为什么要到此处停下？&lt;br&gt;
因为微软将消息映射机制放到了此函数内实现。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::WindowProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;CWnd::WindowProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// OnWndMsg does most of the work, except for DefWindowProc call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LRESULT lResult = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;OnWndMsg&lt;/span&gt;(message, wParam, lParam, &amp;amp;lResult))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = &lt;span class=&#34;built_in&#34;&gt;DefWindowProc&lt;/span&gt;(message, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;继续到进入 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt; 。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* pMessageMap; pMessageMap = &lt;span class=&#34;built_in&#34;&gt;GetMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;上面的代码我们暂时不关心，只关心对 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数的调用；&lt;br&gt;
还记得吗？我们将消息声明 / 定义宏展开后，就相当于我们为 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类定义了两个函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处是以 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类的对象的身份调用的 &lt;code&gt;GetMessageMap&lt;/code&gt; ，因此实际上是在调用我们类中由消息映射宏重写的成员虚函数。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyFrameWnd::GetMessageMap &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这里只是简单的调用了静态成员函数 &lt;code&gt;GetThisMessageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyFrameWnd::GetThisMessageMap &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(&amp;amp;OnCreate)) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &amp;amp;CFrameWnd::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我这里对原先的代码做了一些简化，更方便看一点，实际上呢就是为当前函数的静态局部变量 &lt;code&gt;_messageEntries&lt;/code&gt; 、 &lt;code&gt;messageMap&lt;/code&gt;  赋值，并返回 &lt;code&gt;messageMap&lt;/code&gt;  的地址。&lt;/p&gt;
&lt;p&gt;又回到 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* pMessageMap; pMessageMap = &lt;span class=&#34;built_in&#34;&gt;GetMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  UINT iHash; iHash = (&lt;span class=&#34;built_in&#34;&gt;LOWORD&lt;/span&gt;((DWORD_PTR)pMessageMap) ^ message) &amp;amp; (iHashMax&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	winMsgLock.&lt;span class=&#34;built_in&#34;&gt;Lock&lt;/span&gt;(CRIT_WINMSGCACHE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AFX_MSG_CACHE* pMsgCache; pMsgCache = &amp;amp;_afxMsgCache[iHash];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY* lpEntry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message == pMsgCache-&amp;gt;nMsg &amp;amp;&amp;amp; pMessageMap == pMsgCache-&amp;gt;pMessageMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// not in cache, look for it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pMsgCache-&amp;gt;nMsg = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pMsgCache-&amp;gt;pMessageMap = pMessageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;使 &lt;code&gt;pMessageMap&lt;/code&gt;  指向静态局部变量 &lt;code&gt;messageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;记住上述代码的第 &lt;code&gt;19&lt;/code&gt; ~ &lt;code&gt;20&lt;/code&gt;  行要进入循环；&lt;/p&gt;
&lt;p&gt;剩下的我们暂时不关心，继续向下看。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// Note: catch not so common but fatal mistake!!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//      BEGIN_MESSAGE_MAP(CMyWnd, CMyWnd)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pMessageMap != (*pMessageMap-&amp;gt;pfnGetBaseMap)());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message &amp;lt; &lt;span class=&#34;number&#34;&gt;0xC000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// constant window message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((lpEntry = &lt;span class=&#34;built_in&#34;&gt;AfxFindMessageEntry&lt;/span&gt;(pMessageMap-&amp;gt;lpEntries,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					message, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pMsgCache-&amp;gt;lpEntry = lpEntry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					winMsgLock.&lt;span class=&#34;built_in&#34;&gt;Unlock&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; LDispatch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;第 &lt;code&gt;10&lt;/code&gt; ~ &lt;code&gt;11&lt;/code&gt;  行是关键函数， &lt;code&gt;pMessageMap-&amp;gt;lpEntries&lt;/code&gt;  即是访问静态局部变量 &lt;code&gt;messageMap&lt;/code&gt;  的第二个成员，也就是 &lt;code&gt;_messageEntries&lt;/code&gt;  的地址；&lt;br&gt;
而 &lt;code&gt;message&lt;/code&gt;  就是本次窗口过程处理的消息 ID 了；&lt;/p&gt;
&lt;emp&gt;即传入消息映射表地址和消息，查找对应的条目&lt;/emp&gt;。
&lt;p&gt;返回值即是 &lt;code&gt;_messageEntries&lt;/code&gt;  中对应条目的地址，如果返回 &lt;code&gt;NULL&lt;/code&gt;  表示消息映射表中不存在此消息。&lt;br&gt;
我们假定此消息已经被我们影射了，跟随 &lt;code&gt;goto LDispatch;&lt;/code&gt;  继续。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LDispatch:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(message &amp;lt; &lt;span class=&#34;number&#34;&gt;0xC000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mmf.pfn = lpEntry-&amp;gt;pfn;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (lpEntry-&amp;gt;nSig)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; AfxSig_l_w_l:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;-&amp;gt;*mmf.pfn_l_w_l)(wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;最终会在此处以 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象的身份调用我们指定的 &lt;code&gt;OnCreate&lt;/code&gt;  成员函数。&lt;/p&gt;
&lt;h2 id=&#34;消息映射表链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射表链表&#34;&gt;#&lt;/a&gt; 消息映射表链表&lt;/h2&gt;
&lt;p&gt;整个流程基本上到这里就完成了，实际上我们留了一个小坑，即上面代码中我们暂时跳过的 for 循环。&lt;/p&gt;
&lt;p&gt;实际上那是在遍历&lt;emp&gt;消息映射表链表&lt;/emp&gt;，但是我们并没有提过，存在多个消息映射表这件事。&lt;/p&gt;
&lt;p&gt;实际上， &lt;code&gt;CFrameWnd&lt;/code&gt;  类也使用了消息映射机制，而 &lt;code&gt;CMyFrameWnd::GetMessageMap&lt;/code&gt;  函数中的静态局部变量 &lt;code&gt;messageMap&lt;/code&gt; ，第一个成员指向的就是静态成员函数 &lt;code&gt;CFrameWnd::GetThisMessageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 &lt;code&gt;pMessageMap-&amp;gt;pfnGetBaseMap&lt;/code&gt; ，就是在访问 &lt;code&gt;messageMap&lt;/code&gt;  的第一个成员。&lt;/p&gt;
&lt;p&gt;此 for 循环的工作：&lt;br&gt;
从链表头 ( &lt;code&gt;CMyFrameWnd&lt;/code&gt; ) 开始，&lt;emp&gt;即最子类向上遍历，依次查找是否存在与本次消息匹配的消息映射关系，存在则调用对应的成员函数并返回&lt;/emp&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;消息映射分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射分类&#34;&gt;#&lt;/a&gt; 消息映射分类&lt;/h1&gt;
&lt;p&gt;其实，除了 &lt;code&gt;ON_MESSAGE&lt;/code&gt;  之外，微软还提供了更加方便的，直接映射指定消息的宏。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;OnCreate!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们将 &lt;code&gt;ON_WM_CREATE&lt;/code&gt;  宏展开，看看与 &lt;code&gt;ON_MESSAGE&lt;/code&gt;  有什么区别。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ON_WM_CREATE &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; ON_WM_CREATE() \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&amp;#123; WM_CREATE, 0, 0, 0, AfxSig_is, \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;		(AFX_PMSG) (AFX_PMSGW) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;		(static_cast&lt;span class=&#34;string&#34;&gt;&amp;lt; int (AFX_MSG_CALL CWnd::*)(LPCREATESTRUCT) &amp;gt;&lt;/span&gt; ( &amp;amp;ThisClass :: OnCreate)) &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ON_MESSAGE &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; ON_MESSAGE(message, memberFxn) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;	&amp;#123; message, 0, 0, 0, AfxSig_lwl, \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;		(AFX_PMSG)(AFX_PMSGW) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;		(static_cast&lt;span class=&#34;string&#34;&gt;&amp;lt; LRESULT (AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM) &amp;gt;&lt;/span&gt; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;		(memberFxn)) &amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;首先就是， &lt;code&gt;ON_WM_CREATE&lt;/code&gt;  不再要求我们提供参数消息 id 与回调函数名，而是直接指定为 &lt;code&gt;WM_CREATE&lt;/code&gt;  与 &lt;code&gt;OnCreate&lt;/code&gt; ；&lt;br&gt;
其次， &lt;code&gt;ON_MESSAGE&lt;/code&gt;  与 &lt;code&gt;ON_WM_CREATE&lt;/code&gt;  添加的消息映射条目 &lt;code&gt;AFX_MSGMAP_ENTRY&lt;/code&gt;  元素的第 5 个成员 &lt;code&gt;nSig&lt;/code&gt; ，分别是 &lt;code&gt;AfxSig_l_w_l&lt;/code&gt;  与 &lt;code&gt;AfxSig_i_v_s&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;还记得吗，我们指定的消息映射函数，都是在 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;  函数内被调用的；&lt;br&gt;
而先前通过 &lt;code&gt;ON_MESSAGE&lt;/code&gt;  定义的消息映射，回调函数原型都是相同的。&lt;br&gt;
而通过 &lt;code&gt;ON_WM_CREATE&lt;/code&gt;  定义的消息映射，和 &lt;code&gt;ON_MESSAGE&lt;/code&gt;  指定的消息映射函数的原型是不同的，那么 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;  是怎么区分不同的函数原型并进行回调的呢？&lt;/p&gt;
&lt;p&gt;我们回到 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;  函数：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LDispatch:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(message &amp;lt; &lt;span class=&#34;number&#34;&gt;0xC000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mmf.pfn = lpEntry-&amp;gt;pfn;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (lpEntry-&amp;gt;nSig)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; AfxSig_i_v_s:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;-&amp;gt;*mmf.pfn_i_s)(&lt;span class=&#34;built_in&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;LPTSTR&amp;gt;(lParam));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; AfxSig_l_w_l:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;-&amp;gt;*mmf.pfn_l_w_l)(wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;其中最关键的就是 &lt;code&gt;switch (lpEntry-&amp;gt;nSig)&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;ON_MESSAGE&lt;/code&gt;  定义的消息映射时，nSig 成员是 &lt;code&gt;AfxSig_l_w_l&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;ON_WM_CREATE&lt;/code&gt;  定义的消息映射时，nSig 成员是 &lt;code&gt;AfxSig_i_v_s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是为什么，函数原型不同，回调也能正确进行的缘故。&lt;/p&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-11T14:08:21.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/78f0.html</id>
        <title>【MFC】探索窗口创建机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/78f0.html"/>
        <content type="html">&lt;h1 id=&#34;何时创建窗口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#何时创建窗口&#34;&gt;#&lt;/a&gt; 何时创建窗口？&lt;/h1&gt;
&lt;p&gt;我们在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发窗口程序的时候，一般都是在消息循环之前调用相关的函数创建窗口，那么 MFC 的窗口是在何时被创建的呢？&lt;/p&gt;
&lt;p&gt;实际上，我们重写了 &lt;code&gt;CWinThread::InitInstance&lt;/code&gt;  成员虚函数，并在函数中编写了创建了窗口的代码；&lt;br&gt;
根据我们之前分析的程序流程， &lt;code&gt;CWinThread::InitInstance&lt;/code&gt;  的调用时机在 &lt;code&gt;CWubApp::Run&lt;/code&gt;  之前，这自然也合情合理。&lt;/p&gt;
&lt;h1 id=&#34;窗口的基本创建流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#窗口的基本创建流程&#34;&gt;#&lt;/a&gt; 窗口的基本创建流程&lt;/h1&gt;
&lt;p&gt;还是之前的示例代码：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyFrameWnd* frame = new CMyFrameWnd;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们 new 了一个 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象，而 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类继承自 &lt;code&gt;CFrameWnd&lt;/code&gt;  类。&lt;br&gt;
 &lt;code&gt;CFrameWnd&lt;/code&gt;  是对框架窗口的封装。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;frame-&amp;gt;Create(nullptr, L&amp;quot;MFCBase&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;基于新建的 &lt;code&gt;frame&lt;/code&gt; ，调用了 &lt;code&gt;Create&lt;/code&gt;  成员函数，我们猜测内部应当是调用了 &lt;code&gt;CreateWindow&lt;/code&gt;  之类创建窗口的函数。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;m_pMainWnd = frame;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;m_pMainWnd&lt;/code&gt;  是 &lt;code&gt;CWinThread&lt;/code&gt;  类的成员，指向当前线程的主窗口。&lt;br&gt;
那么我们所做的其实就是，创建一个框架窗口，并使其成为 &lt;code&gt;g_theApp&lt;/code&gt;  的主窗口。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;读者可能会有些疑惑，线程和窗口又有什么关系？&lt;br&gt;
实际上，Windows 产生的消息都是发送给线程的，每一个窗口都必须关联到一个线程中，一个线程可以被多个窗口关联。&lt;br&gt;
消息循环就是线程的工作， &lt;code&gt;GetMessage&lt;/code&gt;  从当前线程的消息队列中获取消息；&lt;br&gt;
 &lt;code&gt;DispatchMessage&lt;/code&gt;  负责将消息再次派发给当前线程的所属窗口中对应的窗口 ( &lt;code&gt;回调窗口过程函数&lt;/code&gt; )。&lt;br&gt;
我们所定义的 &lt;code&gt;g_theApp&lt;/code&gt; ，表示的是应用程序的主线程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这两行就更加明显了，猜测内部应当是调用了 &lt;code&gt;ShowWindow&lt;/code&gt; 、 &lt;code&gt;UpdateWindow&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;框架窗口的create分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#框架窗口的create分析&#34;&gt;#&lt;/a&gt; 框架窗口的 Create 分析&lt;/h1&gt;
&lt;p&gt;我们在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发桌面应用时，创建窗口前会先注册窗口类、指定各种各样的字段和参数，创建窗口，十分繁琐。&lt;br&gt;
而 MFC 为我们简化到只需要传递两个参数就能创建一个窗口，接下来我们进入这个函数内部一探究竟。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CFrameWnd::Create 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CFrameWnd::Create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCTSTR lpszClassName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszWindowName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD dwStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; RECT&amp;amp; rect,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	CWnd* pParentWnd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszMenuName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD dwExStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	CCreateContext* pContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	HMENU hMenu = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lpszMenuName != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// load in a menu that will get destroyed when window gets destroyed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		HINSTANCE hInst = &lt;span class=&#34;built_in&#34;&gt;AfxFindResourceHandle&lt;/span&gt;(lpszMenuName, ATL_RT_MENU);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((hMenu = ::&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(hInst, lpszMenuName)) == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: failed to load menu for CFrameWnd.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;PostNcDestroy&lt;/span&gt;();            &lt;span class=&#34;comment&#34;&gt;// perhaps delete the C++ object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;进到函数中，发现参数其实还是不少的。&lt;br&gt;
为什么我们只传递了两个呢？想必是 MFC 在成员函数的声明处，为后面的参数设置了缺省值。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (lpszMenuName != NULL)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们并没有指定这个参数，因此此参数使用缺省值 &lt;code&gt;NULL&lt;/code&gt; ，跳过此部分。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CFrameWnd::Create 第二部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;m_strTitle = lpszWindowName;    &lt;span class=&#34;comment&#34;&gt;// save title for later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(dwExStyle, lpszClassName, lpszWindowName, dwStyle,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pParentWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSafeHwnd&lt;/span&gt;(), hMenu, (LPVOID)pContext))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: failed to create CFrameWnd.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hMenu != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;DestroyMenu&lt;/span&gt;(hMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;关键调用明显就只有 &lt;code&gt;CreateEx&lt;/code&gt;  这个成员函数了，继续深入。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::CreateEx 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::CreateEx&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DWORD dwExStyle, LPCTSTR lpszClassName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszWindowName, DWORD dwStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nWidth, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nHeight,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	HWND hWndParent, HMENU nIDorHMenu, LPVOID lpParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(lpszClassName == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;AfxIsValidString&lt;/span&gt;(lpszClassName) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxIsValidAtom&lt;/span&gt;(lpszClassName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ENSURE_ARG&lt;/span&gt;(lpszWindowName == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;AfxIsValidString&lt;/span&gt;(lpszWindowName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// allow modification of several common create parameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CREATESTRUCT cs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.dwExStyle = dwExStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpszClass = lpszClassName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpszName = lpszWindowName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.style = dwStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.x = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.y = y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.cx = nWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.cy = nHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hwndParent = hWndParent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hMenu = nIDorHMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hInstance = &lt;span class=&#34;built_in&#34;&gt;AfxGetInstanceHandle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpCreateParams = lpParam;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;PreCreateWindow&lt;/span&gt;(cs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;PostNcDestroy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxHookWindowCreate&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	HWND hWnd = &lt;span class=&#34;built_in&#34;&gt;CreateWindowEx&lt;/span&gt;(cs.dwExStyle, cs.lpszClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们可以直接看到对全局函数 &lt;code&gt;CreateWindowEx&lt;/code&gt;  的调用，说明在这之前应该存在注册窗口类的代码。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (!PreCreateWindow(cs))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;实际上窗口类的注册位于 &lt;code&gt;PreCreateWindow&lt;/code&gt;  成员函数中，如果 &lt;code&gt;cs.lpszClass&lt;/code&gt;  为 &lt;code&gt;NULL&lt;/code&gt; ，则会指定一个不会重复的窗口类名并基于此窗口类名注册窗口类。&lt;br&gt;
而 &lt;code&gt;cs.lpszClass&lt;/code&gt;  的值正是 &lt;code&gt;lpszClassName&lt;/code&gt;  参数，是我们在调用 &lt;code&gt;CFrameWnd::Create&lt;/code&gt;  时传递的 NULL。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxEndDeferRegisterClass 部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL AFXAPI &lt;span class=&#34;title&#34;&gt;AfxEndDeferRegisterClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LONG fToRegister)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// mask off all classes that are already registered&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AFX_MODULE_STATE* pModuleState = &lt;span class=&#34;built_in&#34;&gt;AfxGetModuleState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fToRegister &amp;amp;= ~pModuleState-&amp;gt;m_fRegisteredClasses;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fToRegister == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LONG fRegisteredClasses = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// common initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	WNDCLASS wndcls;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(&amp;amp;wndcls, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(WNDCLASS));   &lt;span class=&#34;comment&#34;&gt;// start with NULL defaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.lpfnWndProc = DefWindowProc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.hInstance = &lt;span class=&#34;built_in&#34;&gt;AfxGetInstanceHandle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.hCursor = afxData.hcurArrow;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这个函数是 &lt;code&gt;PreCreateWindow&lt;/code&gt;  内部调用的函数， &lt;code&gt;WNDCLASS&lt;/code&gt;  是我们比较熟悉的结构，即注册窗口类需要使用的结构体。&lt;br&gt;
需要关注的是，我们创建的窗口，窗口过程函数在哪里？&lt;br&gt;
在这里出现了答案， &lt;code&gt;DefWindowProc&lt;/code&gt;  函数就是我们创建的窗口过程函数。&lt;br&gt;
但是是不是有点不对劲？ &lt;code&gt;DefWindowProc&lt;/code&gt;  好像是 Windows 提供的默认窗口过程函数吧？&lt;br&gt;
既然是 Windows 提供的函数实现，我们根本无法干涉，有消息也会回调这个函数。&lt;/p&gt;
&lt;p&gt;显然，这是不正确的，那么我们暂时从 &lt;code&gt;AfxEndDeferRegisterClass&lt;/code&gt;  函数退回到 &lt;code&gt;CWnd::CreateEx&lt;/code&gt;  函数，继续我们的代码分析。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AfxHookWindowCreate(this);&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里调用了一个比较关键的函数，&lt;emp&gt;这也是MFC能再次拿到消息处理权的关键所在&lt;/emp&gt;。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxHookWindowCreate &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; AFXAPI &lt;span class=&#34;title&#34;&gt;AfxHookWindowCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* pWnd)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_AFX_THREAD_STATE* pThreadState = _afxThreadState.&lt;span class=&#34;built_in&#34;&gt;GetData&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_pWndInit == pWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_hHookOldCbtFilter == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pThreadState-&amp;gt;m_hHookOldCbtFilter = ::&lt;span class=&#34;built_in&#34;&gt;SetWindowsHookEx&lt;/span&gt;(WH_CBT,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			_AfxCbtFilterHook, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThreadId&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_hHookOldCbtFilter == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;AfxThrowMemoryException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pThreadState-&amp;gt;m_hHookOldCbtFilter != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd-&amp;gt;m_hWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// only do once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pThreadState-&amp;gt;m_pWndInit == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// hook not already in progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pThreadState-&amp;gt;m_pWndInit = pWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;_AFX_THREAD_STATE* pThreadState = _afxThreadState.GetData();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里获取了一个新的全局变量的地址，我们就叫它 &lt;code&gt;线程状态&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pThreadState-&amp;gt;m_hHookOldCbtFilter = ::SetWindowsHookEx(WH_CBT,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			_AfxCbtFilterHook, NULL, ::GetCurrentThreadId());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这里通过调用 &lt;code&gt;SetWindowsHookEx&lt;/code&gt; ，告知 Windows，当前线程一旦收到某些消息时，提前回调 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  函数，而 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息就在此列。&lt;br&gt;
 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  又是 MFC 提供的全局函数，那么自当前函数调用完成后，消息处理权再次被 MFC 抓到了手里。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pThreadState-&amp;gt;m_pWndInit = pWnd;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;使全局变量 &lt;code&gt;线程状态&lt;/code&gt; 的成员 &lt;code&gt;m_pWndInit&lt;/code&gt;  我们 new 出来的指向 &lt;code&gt;frame&lt;/code&gt;  对象。&lt;br&gt;
即设置&lt;strong&gt;待初始化窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;再次回到 &lt;code&gt;CWnd::CreateEx&lt;/code&gt;  函数。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;HWND hWnd = CreateWindowEx(cs.dwExStyle, cs.lpszClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这一行就没有什么好说的了，创建窗口，同时会产生 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息，就会回调到 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以我们要继续分析 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt; ，以得知 MFC 如何处理消息。&lt;/p&gt;
&lt;h2 id=&#34;mfc指定的消息钩子回调_afxcbtfilterhook&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc指定的消息钩子回调_afxcbtfilterhook&#34;&gt;#&lt;/a&gt; MFC 指定的消息钩子回调： &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;经过分析， &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  的基本工作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为 &lt;code&gt;frame&lt;/code&gt;  和窗口句柄建立映射关系
&lt;ul&gt;
&lt;li&gt;通过全局变量 &lt;code&gt;线程状态&lt;/code&gt; 的成员 &lt;code&gt;m_pWndInit&lt;/code&gt; ，得到 &lt;code&gt;frame&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;通过窗口句柄查找对应的 &lt;code&gt;CWnd&lt;/code&gt;  对象，由 &lt;code&gt;CHandleMap&lt;/code&gt;  类实现
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模块线程状态&lt;/strong&gt;的成员 &lt;code&gt;m_pmapHWND&lt;/code&gt;  指向了一个映射类对象，负责管理 &lt;code&gt;HWND&lt;/code&gt;  到 &lt;code&gt;CWnd*&lt;/code&gt;  的映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;SetWindowLongPtr&lt;/code&gt; ，为新创建的窗口设置新的窗口过程函数： &lt;code&gt;AfxWndProc&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即完成了对&lt;strong&gt;待初始化窗口&lt;/strong&gt;的初始化工作。&lt;/p&gt;
&lt;p&gt;具体代码就留给读者自行阅读了。&lt;/p&gt;
&lt;h1 id=&#34;框架窗口类的消息接收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#框架窗口类的消息接收&#34;&gt;#&lt;/a&gt; 框架窗口类的消息接收&lt;/h1&gt;
&lt;p&gt;我们已经知晓窗口的窗口过程函数实际上是 &lt;code&gt;AfxWndProc&lt;/code&gt; ，但这是 MFC 提供的全局函数，我们如何处理消息呢？&lt;/p&gt;
&lt;p&gt;实际上，MFC 在 &lt;code&gt;AfxWndProc&lt;/code&gt;  函数中，调用了 &lt;code&gt;CWnd&lt;/code&gt;  类的 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数，因此，我们只需要重写该虚函数，就能拿到消息的处理权。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; LRESULT &lt;span class=&#34;title&#34;&gt;WindowProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT msgID, WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (msgID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; WM_CREATE: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;WM_CREATE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;WindowProc&lt;/span&gt;(msgID, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码即重写了 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数，并在收到 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息时弹出信息框。&lt;/p&gt;
&lt;p&gt;调试程序，会弹出信息框，内容是 &lt;code&gt;WM_CREATE&lt;/code&gt; ，按下确定后，窗口才会出现。&lt;/p&gt;
&lt;h2 id=&#34;mfc是如何找到我们的框架窗口类对象的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc是如何找到我们的框架窗口类对象的&#34;&gt;#&lt;/a&gt; MFC 是如何找到我们的框架窗口类对象的？&lt;/h2&gt;
&lt;p&gt;我们的框架窗口类是一个全局对象，&lt;emp&gt;在窗口过程函数中，MFC是如何找到我们创建的对象，并调用其成员函数的呢？&lt;/emp&gt;&lt;/p&gt;
&lt;p&gt;还记得窗口过程的函数原型吗？第一个参数是类型为 &lt;code&gt;HWND&lt;/code&gt;  的窗口句柄；&lt;br&gt;
而我们在之前讲过，&lt;strong&gt;模块线程状态&lt;/strong&gt;的成员 &lt;code&gt;m_pmapHWND&lt;/code&gt;  指向了一个映射类对象，而 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  函数中，会基于此映射类对象，维护从 &lt;code&gt;HWND&lt;/code&gt;  到 &lt;code&gt;CWnd*&lt;/code&gt;  的映射表。&lt;br&gt;
MFC 在需要通过 &lt;code&gt;HWND&lt;/code&gt;  查找到对应窗口类对象的地址时，也只需要访问这个映射类对象即可。&lt;/p&gt;
&lt;p&gt;得到 &lt;code&gt;frame&lt;/code&gt;  的地址后，就可以以此调用 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数。&lt;/p&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-06T04:48:45.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/a6e.html</id>
        <title>【MFC】探索程序启动机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/a6e.html"/>
        <content type="html">&lt;h1 id=&#34;全局对象的构造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局对象的构造&#34;&gt;#&lt;/a&gt; 全局对象的构造&lt;/h1&gt;
&lt;p&gt;C++ 的对象在创建时，会调用构造函数。&lt;br&gt;
而全局对象的构造时机，&lt;emp&gt;自然应当在入口函数`main/WinMain`被调用之前&lt;/emp&gt;，否则我们也就无法在入口函数中使用全局对象了。&lt;/p&gt;
&lt;p&gt;这里以上节编写的示例代码为例，我们在代码中实例化了一个全局对象 &lt;code&gt;g_theApp&lt;/code&gt; ，基于 VS 强大的源码调试能力，我们来对 MFC 程序的启动机制一探究竟。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;g_theapp构造调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让光标停留在 &lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;  行，按下 &lt;code&gt;F9&lt;/code&gt; ，设置断点
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F5&lt;/code&gt;  运行，让程序中断到当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F11&lt;/code&gt;  单步步入，进入到 &lt;code&gt;CMyWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;li&gt;继续单步步入，进入到基类 &lt;code&gt;CWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里，我们就开始调试到 MFC 的源码了。&lt;/p&gt;
&lt;h2 id=&#34;g_theapp构造分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造分析&lt;/h2&gt;
&lt;p&gt;接下来我们选择部分代码进行讲解&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::CWinApp 部分代码一 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CWinApp::&lt;span class=&#34;built_in&#34;&gt;CWinApp&lt;/span&gt;(LPCTSTR lpszAppName)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lpszAppName != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = _tcsdup(lpszAppName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// initialize CWinThread state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pModuleState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pThreadState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pThreadState-&amp;gt;m_pCurrentWinThread = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_hThread = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_nThreadID = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThreadId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;MFC 类库中有一个描述&lt;strong&gt;主模块状态&lt;/strong&gt;的全局对象， &lt;code&gt;_AFX_CMDTARGET_GETSTATE&lt;/code&gt;  宏函数就是用于获取该全局对象的地址&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以及描述&lt;strong&gt;主模块线程状态&lt;/strong&gt;的全局对象，其地址保存在&lt;strong&gt;主模块状态&lt;/strong&gt;中的成员中。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;MFC 在设计时想必已经安排好了构造顺序已确保程序运行的正确性，此处我们的全局对象 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分 &lt;code&gt;CWinApp&lt;/code&gt;  在构造时才能够正确使用这些全局对象，这里不再做深究。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pThreadState-&amp;gt;m_pCurrentWinThread = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::CWinApp 部分代码二 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// initialize CWinApp state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(afxCurrentWinApp == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// only one CWinApp object please&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pModuleState-&amp;gt;m_pCurrentWinApp = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pModuleState-&amp;gt;m_pCurrentWinApp = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;winmain的启动流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#winmain的启动流程&#34;&gt;#&lt;/a&gt; WinMain 的启动流程&lt;/h1&gt;
&lt;p&gt;回忆我们的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类，在类中我们重写了虚函数 &lt;code&gt;InitInstance&lt;/code&gt; 。&lt;br&gt;
见名知意，我们猜测，这是一个初始化函数，但是我们不清楚函数是何时、如何被调用，因此我们需要继续分析 MFC 的源码。&lt;/p&gt;
&lt;h2 id=&#34;initinstance回调调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#initinstance回调调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InitInstance&lt;/code&gt;  回调调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;CMyFrameWnd* frame = new CMyFrameWnd;&lt;/code&gt;  行设置断点&lt;/li&gt;
&lt;li&gt;运行程序，中断在此行&lt;/li&gt;
&lt;li&gt;查看 &lt;code&gt;调用堆栈&lt;/code&gt; ，我们可以看到 &lt;code&gt;InitInstance&lt;/code&gt;  的调用函数，以及调用函数的调用函数… 等层级关系。
&lt;ul&gt;
&lt;li&gt;在这里我们也看到了我们熟悉的 &lt;code&gt;WinMain&lt;/code&gt;  函数，说明 &lt;code&gt;InitInstance&lt;/code&gt;  是在 &lt;code&gt;WinMain&lt;/code&gt;  执行过程中被调用的。&lt;/li&gt;
&lt;li&gt;而我们并没有实现 &lt;code&gt;WinMain&lt;/code&gt; ，那么 &lt;code&gt;WinMain&lt;/code&gt;  自然也是由 MFC 实现的，至此，我们先前的一个疑惑也解决了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;调用堆栈&lt;/code&gt; 中定位到 &lt;code&gt;WinMain&lt;/code&gt;  函数，在此处设置断点，重新运行程序。
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinMain&lt;/code&gt;  函数中仅有一行代码，即调用 &lt;code&gt;AfxWinMain&lt;/code&gt;  并返回，单步进入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;afxwinmain源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#afxwinmain源码分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;AfxWinMain&lt;/code&gt;  源码分析&lt;/h2&gt;
&lt;p&gt;我们依旧选择我们感兴趣的源码进行讲解&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AfxWinMain&lt;/code&gt;  是 MFC 实现的全局函数。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;以 &lt;code&gt;Afx&lt;/code&gt;  开头的函数，基本上都是 MFC 实现的全局函数。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxWinMain 部分代码 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFXAPI &lt;span class=&#34;title&#34;&gt;AfxWinMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HINSTANCE hInstance, HINSTANCE hPrevInstance,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	_In_ LPTSTR lpCmdLine, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(hPrevInstance == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nReturnCode = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinThread* pThread = &lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinApp* pApp = &lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// AFX internal initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;AfxWinInit&lt;/span&gt;(hInstance, hPrevInstance, lpCmdLine, nCmdShow))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// App global initializations (rare)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pApp != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; !pApp-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitApplication&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Perform specific initializations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitInstance&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThread-&amp;gt;m_pMainWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: Destroying non-NULL m_pMainWnd\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pThread-&amp;gt;m_pMainWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;DestroyWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinThread* pThread = AfxGetThread();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
因此，此函数实际上是获取 &lt;code&gt;g_theApp&lt;/code&gt;  的地址，也就是说，在 MFC 的启动流程中，可能要使用我们创建的全局对象 &lt;code&gt;g_theApp&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp* pApp = AfxGetApp();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
与 AfxGetThread 作用类似。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp*&lt;/code&gt;  指向 &lt;code&gt;CMyWinApp&lt;/code&gt;  类型的对象，我们是能够理解的；&lt;br&gt;
但是为什么 &lt;code&gt;CWinThread*&lt;/code&gt;  的赋值也能被允许呢？因为 &lt;code&gt;CWinApp&lt;/code&gt;  类就继承自 &lt;code&gt;CWinThread&lt;/code&gt;  类。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (pApp != NULL &amp;amp;&amp;amp; !pApp-&amp;gt;InitApplication())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当前行实际上调用了 &lt;code&gt;g_theApp&lt;/code&gt;  的 &lt;code&gt;InitApplication&lt;/code&gt;  函数，我们并没有提供此函数，因此只可能是 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分提供的。&lt;br&gt;
这个函数实际上也是虚函数，我们能够重写它，一般在我们希望做一些应用程序初始化的工作时重写。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (!pThread-&amp;gt;InitInstance())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;终于又到了我们熟悉的部分了， &lt;code&gt;InitInstance&lt;/code&gt;  就是我们重写的函数，此时 &lt;code&gt;pThread&lt;/code&gt;  指向 &lt;code&gt;g_theApp&lt;/code&gt; ，这就是 &lt;code&gt;多态&lt;/code&gt; 了。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们暂时略过具体代码，最终是通过 &lt;code&gt;return TRUE&lt;/code&gt;  返回的；&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根据 &lt;code&gt;AfxWinMain&lt;/code&gt;  中的代码的逻辑，我们会走到 &lt;code&gt;Run&lt;/code&gt;  这个函数。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;不可或缺的消息循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可或缺的消息循环&#34;&gt;#&lt;/a&gt; 不可或缺的消息循环&lt;/h1&gt;
&lt;p&gt;在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发界面程序时，我们都会编写消息循环以阻塞主线程，避免 &lt;code&gt;WinMain&lt;/code&gt;  返回后终止进程。&lt;br&gt;
MFC 程序自然也不例外，而 MFC 的消息循环究竟编写在哪里呢？&lt;br&gt;
其实读者只要在调试时步过 &lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt; ，就会使得程序直接运行起来，不再处于中断状态，因而得知， &lt;code&gt;Run&lt;/code&gt;  成员函数封装了消息循环。&lt;/p&gt;
&lt;h2 id=&#34;cwinapprun的源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cwinapprun的源码分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;CWinApp::Run&lt;/code&gt;  的源码分析&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::Run &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinApp::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMainWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&#34;built_in&#34;&gt;AfxOleGetUserCtrl&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Not launched /Embedding or /Automation, but has no main window!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: m_pMainWnd is NULL in CWinApp::Run - quitting application.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxPostQuitMessage&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CWinThread::&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (m_pMainWnd == NULL &amp;amp;&amp;amp; AfxOleGetUserCtrl())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们忽略对 &lt;code&gt;AfxOleGetUserCtrl&lt;/code&gt;  函数的调用， &lt;code&gt;m_pMainWnd&lt;/code&gt;  是不是有些眼熟？&lt;br&gt;
我们在重写 &lt;code&gt;InitInstance&lt;/code&gt;  时，使 &lt;code&gt;m_pMainWnd&lt;/code&gt;  指向了 &lt;code&gt;new&lt;/code&gt;  出来的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象。&lt;br&gt;
而我们在调用 &lt;code&gt;Run&lt;/code&gt;  成员函数时，就是以 &lt;code&gt;g_theApp&lt;/code&gt;  的身份进行调用的。&lt;br&gt;
因此，在 &lt;code&gt;Run&lt;/code&gt;  成员函数中访问 &lt;code&gt;m_pMainWnd&lt;/code&gt; ，自然得到我们当时 &lt;code&gt;new&lt;/code&gt;  出来的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象。&lt;/p&gt;
&lt;emp&gt;这也就是 g_theApp 全局对象的主窗口。&lt;/emp&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;return CWinThread::Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接下来我们调用 &lt;code&gt;CWinApp&lt;/code&gt;  的父类 &lt;code&gt;CWinThread&lt;/code&gt;  的 &lt;code&gt;Run&lt;/code&gt;  成员函数&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinThread::Run 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinThread::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT_VALID&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_AFX_THREAD_STATE* pState = &lt;span class=&#34;built_in&#34;&gt;AfxGetThreadState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// for tracking the idle time state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	BOOL bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LONG lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// acquire and dispatch messages until a WM_QUIT message is received.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (;;)        &lt;span class=&#34;comment&#34;&gt;// 开始消息循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果没有消息(PeekMessage返回0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// phase1: check to see if we can do idle work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bIdle &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			!::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// call OnIdle while in bIdle state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;OnIdle&lt;/span&gt;(lIdleCount++))      &lt;span class=&#34;comment&#34;&gt;// 调用成员虚函数OnIdle，进入空闲处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = FALSE; &lt;span class=&#34;comment&#34;&gt;// assume &amp;quot;no idle&amp;quot; state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，这里直接在代码中注释，可以自行阅读。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;在 MFC 中程序中调用 &lt;code&gt;Win32API&lt;/code&gt;  时，通常都会指明调用的是全局作用域下的函数 :: 。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinThread::Run 第二部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// phase2: pump messages while available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// pump message, but quit on WM_QUIT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;PumpMessage&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// reset &amp;quot;no idle&amp;quot; state after pumping &amp;quot;normal&amp;quot; message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//if (IsIdleMessage(&amp;amp;m_msgCur))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;IsIdleMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE));        &lt;span class=&#34;comment&#34;&gt;// 如果连续有消息就继续处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;&lt;code&gt;if (!PumpMessage())&lt;/code&gt; &lt;br&gt;
 MFC 在此函数中封装了对 &lt;code&gt;GetMessage&lt;/code&gt; 、 &lt;code&gt;TranslateMessage&lt;/code&gt; 、 &lt;code&gt;DispatchMessage&lt;/code&gt;  函数的调用，读者感兴趣可以自行跟进，这里就不再分析了。&lt;/p&gt;
&lt;p&gt;一旦 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt; ，就会调用虚成员函数 &lt;code&gt;ExitInstance&lt;/code&gt;  并退出消息循环。&lt;br&gt;
而 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt;  的条件即是 &lt;code&gt;GetMessage&lt;/code&gt;  获得 &lt;code&gt;WM_QUIT&lt;/code&gt;  消息，程序结束。&lt;/p&gt;
&lt;p&gt;我们也可以重写 &lt;code&gt;ExitInstance&lt;/code&gt; ，在程序结束前做必要的资源释放。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;Run&lt;/code&gt;  成员函数返回后，也会一路返回到 &lt;code&gt;WinMain&lt;/code&gt; ，程序也就退出了。&lt;/p&gt;
&lt;h1 id=&#34;基本流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本流程&#34;&gt;#&lt;/a&gt; 基本流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，我们在编写 MFC 应用时，需要实例化一个类型为 &lt;code&gt;CWinApp&lt;/code&gt;  的全局对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要重写初始化等成员虚函数，则需要创建继承自 &lt;code&gt;CWinApp&lt;/code&gt;  的子类的对象 (此处命名为 &lt;code&gt;g_theApp&lt;/code&gt; )。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;g_theApp&lt;/code&gt;  被构造时，会使 MFC 定义的全局变量&lt;strong&gt;主模块状态&lt;/strong&gt;和&lt;strong&gt;主模块线程状态&lt;/strong&gt;的成员指向 &lt;code&gt;g_theApp&lt;/code&gt;  地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序进入 &lt;code&gt;WinMain&lt;/code&gt;  函数，会通过全局变量&lt;strong&gt;主模块状态&lt;/strong&gt;和&lt;strong&gt;主模块线程状态&lt;/strong&gt;得到 &lt;code&gt;g_theApp&lt;/code&gt;  地址，再以 &lt;code&gt;g_theApp&lt;/code&gt;  的身份调用必要的成员虚函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;消息循环&lt;/li&gt;
&lt;li&gt;退出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们基本上对 MFC 程序的启动流程有了一个大致的认知。&lt;/p&gt;
&lt;p&gt;而窗口的创建、消息的接收处理等部分，我们留到下一篇再叙。&lt;/p&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-05T02:45:26.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/7c79.html</id>
        <title>【MFC】初识MFC</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/7c79.html"/>
        <content type="html">&lt;h1 id=&#34;mfc简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc简述&#34;&gt;#&lt;/a&gt; MFC 简述&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MFC (Microsoft Foundation Classes)，微软基础类库；&lt;/strong&gt;&lt;br&gt;
是微软使用 &lt;code&gt;C++&lt;/code&gt;  的特性，在 &lt;code&gt;Win32API&lt;/code&gt;  基础上再次进行的封装。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc基本使用&#34;&gt;#&lt;/a&gt; MFC 基本使用&lt;/h1&gt;
&lt;p&gt;MFC 只是一个 C++ 类库，我们只需要对 C++ 有一定了解，就能够理解 MFC 的工作机制。&lt;br&gt;
而微软的宇宙第一 IDE &lt;code&gt;Visual Studio&lt;/code&gt;  本身也替我们做好了许多工作，这里以 vs2022 为例，对 MFC 的安装与使用进行简单的说明。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio Installer&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;单个组件&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;搜索 &lt;code&gt;MFC&lt;/code&gt; ，勾选需要的组件
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt; ，等待完成即可
&lt;ul&gt;
&lt;li&gt;我这里已经装过了，就不重新做演示了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;新建项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建项目&#34;&gt;#&lt;/a&gt; 新建项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio 2022&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;创建新项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;空项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目名称随意，我这里写 &lt;code&gt;MFCTestProject&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置项目&#34;&gt;#&lt;/a&gt; 配置项目&lt;/h2&gt;
&lt;p&gt;由于是空项目，什么都没有，我们需要自行做一些必要的设置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;MFCTestProject&lt;/code&gt;  项目，选择 &lt;code&gt;属性&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中选择 &lt;code&gt;高级&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MFC的使用&lt;/code&gt; 选项，修改为 &lt;code&gt;在静态库中使用MFC&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;在共享DLL中使用MFC&lt;/code&gt;  调试时无法找到 MFC 的源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中展开 &lt;code&gt;链接器&lt;/code&gt; ，选择 &lt;code&gt;系统&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;子系统&lt;/code&gt; 选择 &lt;code&gt;窗口(/SUBSYSTEM:WINDOWS)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写源代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写源代码&#34;&gt;#&lt;/a&gt; 编写源代码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;新建 &lt;code&gt;.cpp&lt;/code&gt;  文件，文件名随意&lt;/li&gt;
&lt;li&gt;编写如下示例代码 &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;F5 运行，编译运行正常会出现这样的窗口
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们就已经建立了一个非常简单的 MFC 程序，并且它还能够运行。&lt;/p&gt;
&lt;h1 id=&#34;源代码注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源代码注释&#34;&gt;#&lt;/a&gt; 源代码注释&lt;/h1&gt;
&lt;p&gt;接下来我们简单对代码进行一些注释：&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;#include &amp;lt;afxwin.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;类似 &lt;code&gt;Win32API&lt;/code&gt;  开发时使用的 &lt;code&gt;#include &amp;lt;windows.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyFrameWnd :public CFrameWnd {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CFrameWnd&lt;/code&gt;  是对窗口框架的封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyWinApp :public CWinApp {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CWinApp&lt;/code&gt;  是对应用程序执行流程的抽象封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;virtual BOOL InitInstance() {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;CMyWinApp&lt;/code&gt;  类中重写 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;InitInstance&lt;/code&gt;  成员虚函数&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;基于 &lt;code&gt;CMyWinApp&lt;/code&gt;  类实例化全局对象 &lt;code&gt;g_theApp&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;当然，这些代码也许会使你感到困惑，毕竟代码中甚至找不到你最熟悉的 main、WinMain，为什么它能够跑起来？&lt;/p&gt;
&lt;p&gt;我们将在下篇文章探索 MFC 的程序启动机制。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-04T11:33:52.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/6339.html</id>
        <title>【MFC】前言</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/6339.html"/>
        <content type="html">&lt;p&gt;当前分类所收录的博客主要是我个人学习 MFC 时记录的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考资料&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1mU4y1C7XA/?p=14&amp;amp;spm_id_from=333.999.header_right.history_list.click&amp;amp;vd_source=2f16cbe6e2d0a9708b5b399c0b862fe3&#34;&gt; C++ 之 MFC 全套教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-04T11:30:00.000Z</updated>
    </entry>
</feed>
