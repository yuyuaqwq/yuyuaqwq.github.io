<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yuyuaqwq.github.io</id>
    <title>鹿鹿鱼鱼</title>
    <link href="http://yuyuaqwq.github.io" />
    <updated>2022-10-05T02:45:26.000Z</updated>
    <category term="MFC" />
    <category term="没饭吃" />
    <entry>
        <id>http://yuyuaqwq.github.io/posts/a6e.html</id>
        <title>【MFC】探索程序启动机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/a6e.html"/>
        <content type="html">&lt;h1 id=&#34;全局对象的构造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局对象的构造&#34;&gt;#&lt;/a&gt; 全局对象的构造&lt;/h1&gt;
&lt;p&gt;C++ 的对象在创建时，会调用构造函数。&lt;br&gt;
而全局对象的构造时机，&lt;emp&gt;自然应当在入口函数`main/WinMain`被调用之前&lt;/emp&gt;，否则我们也就无法在入口函数中使用全局对象了。&lt;/p&gt;
&lt;p&gt;这里以上节编写的示例代码为例，我们在代码中实例化了一个全局对象 &lt;code&gt;g_theApp&lt;/code&gt; ，基于 VS 强大的源码调试能力，我们来对 MFC 程序的启动机制一探究竟。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;g_theapp构造调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让光标停留在 &lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;  行，按下 &lt;code&gt;F9&lt;/code&gt; ，设置断点
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F5&lt;/code&gt;  运行，让程序中断到当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F11&lt;/code&gt;  单步步入，进入到 &lt;code&gt;CMyWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;li&gt;继续单步步入，进入到基类 &lt;code&gt;CWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里，我们就开始调试到 MFC 的源码了。&lt;/p&gt;
&lt;h2 id=&#34;g_theapp构造分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造分析&lt;/h2&gt;
&lt;p&gt;接下来我们选择部分代码进行讲解&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 部分代码一 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CWinApp::&lt;span class=&#34;built_in&#34;&gt;CWinApp&lt;/span&gt;(LPCTSTR lpszAppName)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lpszAppName != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = _tcsdup(lpszAppName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// initialize CWinThread state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pModuleState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pThreadState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pThreadState-&amp;gt;m_pCurrentWinThread = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_hThread = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_nThreadID = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThreadId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;MFC 类库中有一个描述&lt;strong&gt;主模块状态&lt;/strong&gt;的全局对象， &lt;code&gt;_AFX_CMDTARGET_GETSTATE&lt;/code&gt;  宏函数就是用于获取该全局对象的地址&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以及描述&lt;strong&gt;主模块线程状态&lt;/strong&gt;的全局对象，其地址保存在&lt;strong&gt;主模块状态&lt;/strong&gt;中的成员中。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;MFC 在设计时想必已经安排好了构造顺序已确保程序运行的正确性，此处我们的全局对象 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分 &lt;code&gt;CWinApp&lt;/code&gt;  在构造时才能够正确使用这些全局对象，这里不再做深究。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pThreadState-&amp;gt;m_pCurrentWinThread = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 部分代码二 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// initialize CWinApp state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(afxCurrentWinApp == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// only one CWinApp object please&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pModuleState-&amp;gt;m_pCurrentWinApp = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pModuleState-&amp;gt;m_pCurrentWinApp = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;winmain的启动流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#winmain的启动流程&#34;&gt;#&lt;/a&gt; WinMain 的启动流程&lt;/h1&gt;
&lt;p&gt;回忆我们的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类，在类中我们重写了虚函数 &lt;code&gt;InitInstance&lt;/code&gt; 。&lt;br&gt;
见名知意，我们猜测，这是一个初始化函数，但是我们不清楚函数是何时、如何被调用，因此我们需要继续分析 MFC 的源码。&lt;/p&gt;
&lt;h2 id=&#34;initinstance回调调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#initinstance回调调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InitInstance&lt;/code&gt;  回调调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;CMyFrameWnd* frame = new CMyFrameWnd;&lt;/code&gt;  行设置断点&lt;/li&gt;
&lt;li&gt;运行程序，中断在此行&lt;/li&gt;
&lt;li&gt;查看 &lt;code&gt;调用堆栈&lt;/code&gt; ，我们可以看到 &lt;code&gt;InitInstance&lt;/code&gt;  的调用函数，以及调用函数的调用函数… 等层级关系。
&lt;ul&gt;
&lt;li&gt;在这里我们也看到了我们熟悉的 &lt;code&gt;WinMain&lt;/code&gt;  函数，说明 &lt;code&gt;InitInstance&lt;/code&gt;  是在 &lt;code&gt;WinMain&lt;/code&gt;  执行过程中被调用的。&lt;/li&gt;
&lt;li&gt;而我们并没有实现 &lt;code&gt;WinMain&lt;/code&gt; ，那么 &lt;code&gt;WinMain&lt;/code&gt;  自然也是由 MFC 实现的，至此，我们先前的一个疑惑也解决了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;调用堆栈&lt;/code&gt; 中定位到 &lt;code&gt;WinMain&lt;/code&gt;  函数，在此处设置断点，重新运行程序。
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinMain&lt;/code&gt;  函数中仅有一行代码，即调用 &lt;code&gt;AfxWinMain&lt;/code&gt;  并返回，单步进入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;afxwinmain源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#afxwinmain源码分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;AfxWinMain&lt;/code&gt;  源码分析&lt;/h2&gt;
&lt;p&gt;我们依旧选择我们感兴趣的源码进行讲解&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AfxWinMain&lt;/code&gt;  是 MFC 实现的全局函数。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;以 &lt;code&gt;Afx&lt;/code&gt;  开头的函数，基本上都是 MFC 实现的全局函数。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxWinMain部分代码 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFXAPI &lt;span class=&#34;title&#34;&gt;AfxWinMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HINSTANCE hInstance, HINSTANCE hPrevInstance,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	_In_ LPTSTR lpCmdLine, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(hPrevInstance == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nReturnCode = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinThread* pThread = &lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinApp* pApp = &lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// AFX internal initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;AfxWinInit&lt;/span&gt;(hInstance, hPrevInstance, lpCmdLine, nCmdShow))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// App global initializations (rare)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pApp != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; !pApp-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitApplication&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Perform specific initializations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitInstance&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThread-&amp;gt;m_pMainWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: Destroying non-NULL m_pMainWnd\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pThread-&amp;gt;m_pMainWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;DestroyWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinThread* pThread = AfxGetThread();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
因此，此函数实际上是获取 &lt;code&gt;g_theApp&lt;/code&gt;  的地址，也就是说，在 MFC 的启动流程中，可能要使用我们创建的全局对象 &lt;code&gt;g_theApp&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp* pApp = AfxGetApp();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
与 AfxGetThread 作用类似。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp*&lt;/code&gt;  指向 &lt;code&gt;CMyWinApp&lt;/code&gt;  类型的对象，我们是能够理解的；&lt;br&gt;
但是为什么 &lt;code&gt;CWinThread*&lt;/code&gt;  的赋值也能被允许呢？因为 &lt;code&gt;CWinApp&lt;/code&gt;  类就继承自 &lt;code&gt;CWinThread&lt;/code&gt;  类。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (pApp != NULL &amp;amp;&amp;amp; !pApp-&amp;gt;InitApplication())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当前行实际上调用了 &lt;code&gt;g_theApp&lt;/code&gt;  的 &lt;code&gt;InitApplication&lt;/code&gt;  函数，我们并没有提供此函数，因此只可能是 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分提供的。&lt;br&gt;
这个函数实际上也是虚函数，我们能够重写它，一般在我们希望做一些应用程序初始化的工作时重写。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (!pThread-&amp;gt;InitInstance())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;终于又到了我们熟悉的部分了， &lt;code&gt;InitInstance&lt;/code&gt;  就是我们重写的函数，此时 &lt;code&gt;pThread&lt;/code&gt;  指向 &lt;code&gt;g_theApp&lt;/code&gt; ，这就是 &lt;code&gt;多态&lt;/code&gt; 了。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们暂时略过具体代码，最终是通过 &lt;code&gt;return TRUE&lt;/code&gt;  返回的；&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根据 &lt;code&gt;AfxWinMain&lt;/code&gt;  中的代码的逻辑，我们会走到 &lt;code&gt;Run&lt;/code&gt;  这个函数。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;不可或缺的消息循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可或缺的消息循环&#34;&gt;#&lt;/a&gt; 不可或缺的消息循环&lt;/h1&gt;
&lt;p&gt;在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发界面程序时，我们都会编写消息循环以阻塞主线程，避免 &lt;code&gt;WinMain&lt;/code&gt;  返回后终止进程。&lt;br&gt;
MFC 程序自然也不例外，而 MFC 的消息循环究竟编写在哪里呢？&lt;br&gt;
其实读者只要在调试时步过 &lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt; ，就会使得程序直接运行起来，不再处于中断状态，因而得知， &lt;code&gt;Run&lt;/code&gt;  成员函数封装了消息循环。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::Run &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinApp::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMainWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&#34;built_in&#34;&gt;AfxOleGetUserCtrl&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Not launched /Embedding or /Automation, but has no main window!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: m_pMainWnd is NULL in CWinApp::Run - quitting application.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxPostQuitMessage&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CWinThread::&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (m_pMainWnd == NULL &amp;amp;&amp;amp; AfxOleGetUserCtrl())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们忽略对 &lt;code&gt;AfxOleGetUserCtrl&lt;/code&gt;  函数的调用， &lt;code&gt;m_pMainWnd&lt;/code&gt;  是不是有些眼熟？&lt;br&gt;
我们在重写 &lt;code&gt;InitInstance&lt;/code&gt;  时，使 &lt;code&gt;m_pMainWnd&lt;/code&gt;  指向了 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类型的对象。&lt;br&gt;
而我们在调用 &lt;code&gt;Run&lt;/code&gt;  成员函数时，就是以 &lt;code&gt;g_theApp&lt;/code&gt;  的身份进行调用的。&lt;br&gt;
因此，在 &lt;code&gt;Run&lt;/code&gt;  成员函数中访问 &lt;code&gt;m_pMainWnd&lt;/code&gt; ，自然得到我们当时 &lt;code&gt;new&lt;/code&gt;  出来的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象。&lt;/p&gt;
&lt;emp&gt;这也就是 g_theApp 全局对象的主窗口。&lt;/emp&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;return CWinThread::Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接下来我们调用 &lt;code&gt;CWinApp&lt;/code&gt;  的父类 &lt;code&gt;CWinThread&lt;/code&gt;  的 &lt;code&gt;Run&lt;/code&gt;  成员函数&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::Run 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinThread::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT_VALID&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_AFX_THREAD_STATE* pState = &lt;span class=&#34;built_in&#34;&gt;AfxGetThreadState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// for tracking the idle time state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	BOOL bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LONG lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// acquire and dispatch messages until a WM_QUIT message is received.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (;;)        &lt;span class=&#34;comment&#34;&gt;// 开始消息循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果没有消息(PeekMessage返回0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// phase1: check to see if we can do idle work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bIdle &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			!::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// call OnIdle while in bIdle state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;OnIdle&lt;/span&gt;(lIdleCount++))      &lt;span class=&#34;comment&#34;&gt;// 调用成员函数OnIdle，进入空闲处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = FALSE; &lt;span class=&#34;comment&#34;&gt;// assume &amp;quot;no idle&amp;quot; state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，这里直接在代码中注释，可以自行阅读。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;在 MFC 中程序中调用 &lt;code&gt;Win32API&lt;/code&gt;  时，通常都会指明调用的是全局作用域下的函数 :: 。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::Run 第二部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// phase2: pump messages while available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// pump message, but quit on WM_QUIT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;PumpMessage&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// reset &amp;quot;no idle&amp;quot; state after pumping &amp;quot;normal&amp;quot; message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//if (IsIdleMessage(&amp;amp;m_msgCur))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;IsIdleMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE));        &lt;span class=&#34;comment&#34;&gt;// 如果连续有消息就继续处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;&lt;code&gt;if (!PumpMessage())&lt;/code&gt; &lt;br&gt;
 MFC 在此函数中封装对了 &lt;code&gt;GetMessage&lt;/code&gt; 、 &lt;code&gt;TranslateMessage&lt;/code&gt; 、 &lt;code&gt;DispatchMessage&lt;/code&gt;  函数的调用，读者感兴趣可以自行跟进，这里就不再分析了。&lt;/p&gt;
&lt;p&gt;一旦 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt; ，就会调用虚成员函数 &lt;code&gt;ExitInstance&lt;/code&gt;  并退出消息循环。&lt;br&gt;
而 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt;  的条件即是 &lt;code&gt;GetMessage&lt;/code&gt;  获得 &lt;code&gt;WM_QUIT&lt;/code&gt;  消息，程序结束。&lt;/p&gt;
&lt;p&gt;我们也可以重写 &lt;code&gt;ExitInstance&lt;/code&gt; ，在程序结束前做必要的资源释放。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;Run&lt;/code&gt;  成员函数返回后，也会一路返回到 &lt;code&gt;WinMain&lt;/code&gt; ，程序也就退出了。&lt;/p&gt;
&lt;h1 id=&#34;程序退出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#程序退出&#34;&gt;#&lt;/a&gt; 程序退出&lt;/h1&gt;
&lt;p&gt;至此，我们基本上对 MFC 程序的启动机制有了一个大致的认知。&lt;/p&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-05T02:45:26.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/7c79.html</id>
        <title>【MFC】初识MFC</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/7c79.html"/>
        <content type="html">&lt;h1 id=&#34;mfc简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc简述&#34;&gt;#&lt;/a&gt; MFC 简述&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MFC (Microsoft Foundation Classes)，微软基础类库；&lt;/strong&gt;&lt;br&gt;
是微软使用 &lt;code&gt;C++&lt;/code&gt;  的特性，在 &lt;code&gt;Win32API&lt;/code&gt;  基础上再次进行的封装。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc基本使用&#34;&gt;#&lt;/a&gt; MFC 基本使用&lt;/h1&gt;
&lt;p&gt;MFC 只是一个 C++ 类库，我们只需要对 C++ 有一定了解，就能够理解 MFC 的工作机制。&lt;br&gt;
而微软的宇宙第一 IDE &lt;code&gt;Visual Studio&lt;/code&gt;  本身也替我们做好了许多工作，这里以 vs2022 为例，对 MFC 的安装与使用进行简单的说明。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio Installer&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;单个组件&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;搜索 &lt;code&gt;MFC&lt;/code&gt; ，勾选需要的组件
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt; ，等待完成即可
&lt;ul&gt;
&lt;li&gt;我这里已经装过了，就不重新做演示了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;新建项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建项目&#34;&gt;#&lt;/a&gt; 新建项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio 2022&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;创建新项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;空项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目名称随意，我这里写 &lt;code&gt;MFCTestProject&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置项目&#34;&gt;#&lt;/a&gt; 配置项目&lt;/h2&gt;
&lt;p&gt;由于是空项目，什么都没有，我们需要自行做一些必要的设置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;MFCTestProject&lt;/code&gt;  项目，选择 &lt;code&gt;属性&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中选择 &lt;code&gt;高级&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MFC的使用&lt;/code&gt; 选项，修改为 &lt;code&gt;在静态库中使用MFC&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;在共享DLL中使用MFC&lt;/code&gt;  调试时无法找到 MFC 的源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中展开 &lt;code&gt;链接器&lt;/code&gt; ，选择 &lt;code&gt;系统&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;子系统&lt;/code&gt; 选择 &lt;code&gt;窗口(/SUBSYSTEM:WINDOWS)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写源代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写源代码&#34;&gt;#&lt;/a&gt; 编写源代码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;新建 &lt;code&gt;.cpp&lt;/code&gt;  文件，文件名随意&lt;/li&gt;
&lt;li&gt;编写如下示例代码 &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;F5 运行，编译运行正常会出现这样的窗口
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们就已经建立了一个非常简单的 MFC 程序，并且它还能够运行。&lt;/p&gt;
&lt;p&gt;接下来我们简单对代码进行一些注释：&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;#include &amp;lt;afxwin.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;类似 &lt;code&gt;Win32API&lt;/code&gt;  开发时使用的 &lt;code&gt;#include &amp;lt;windows.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyFrameWnd :public CFrameWnd {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CFrameWnd&lt;/code&gt;  是对窗口框架的封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyWinApp :public CWinApp {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CWinApp&lt;/code&gt;  是对应用程序执行流程的抽象封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;virtual BOOL InitInstance() {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;CMyWinApp&lt;/code&gt;  类中重写 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;InitInstance&lt;/code&gt;  成员虚函数&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;基于 &lt;code&gt;CMyWinApp&lt;/code&gt;  类实例化全局对象 &lt;code&gt;g_theApp&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;当然，这些代码也许会使你感到困惑，毕竟代码中甚至找不到你最熟悉的 main、WinMain，为什么它能够跑起来？&lt;/p&gt;
&lt;p&gt;我们将在下篇文章探索 MFC 的程序启动机制。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-04T11:33:52.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/c22c.html</id>
        <title>【MFC】探索消息映射机制的实现原理</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/c22c.html"/>
        <content type="html">&lt;h1 id=&#34;消息机制简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息机制简述&#34;&gt;#&lt;/a&gt; 消息机制简述&lt;/h1&gt;
&lt;p&gt;我们知道，Windows 的窗口是由&lt;strong&gt;消息&lt;/strong&gt;驱动的；&lt;br&gt;
Windows 通过捕获鼠标、键盘等输入设备产生的动作，再生成对应的消息，并传递给正确的窗口。&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;直接基于 &lt;code&gt;Win32API&lt;/code&gt;  开发时，我们需要在注册窗口类时指定&lt;strong&gt;窗口过程函数&lt;/strong&gt;，以告知 Windows 回调 (传递消息) 的入口。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc的消息映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc的消息映射&#34;&gt;#&lt;/a&gt; MFC 的消息映射&lt;/h1&gt;
&lt;p&gt;而 MFC 为我们提供了一种更为方便的机制，&lt;emp&gt;直接为一个消息与一个函数建立映射关系&lt;/emp&gt;，在消息产生时，回调此函数，而不再需要我们去自行分发。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ON_MESSAGE&lt;/span&gt;(WM_CREATE, OnCreate)   &lt;span class=&#34;comment&#34;&gt;// 将WM_CREATE与CMyFrameWnd类的成员函数OnCreate建立映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;消息映射宏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射宏&#34;&gt;#&lt;/a&gt; 消息映射宏&lt;/h2&gt;
&lt;p&gt;MFC 的消息映射是通过几个&lt;strong&gt;宏函数&lt;/strong&gt;来实现的，我们以上述代码为例，将宏展开，一探究竟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明宏&lt;br&gt;
 MFC 的声明宏，就是在窗口类中声明两个受保护的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ECLARE_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义宏&lt;br&gt;
定义则稍显复杂，由多个宏函数组成，实际上是在实现声明宏声明的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; BEGIN_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;BEGIN_MESSAGE_MAP(CMyFrameWnd, CFrameWnd)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ON_MESSAGE() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;ON_MESSAGE(WM_CREATE, OnCreate)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实际上是在为_messageEntries变量的初始化列表添加结构体元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; END_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体展开&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例-宏展开 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;  &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;  &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;通过宏添加消息映射时，实际上是重写了 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数；&lt;br&gt;
而 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数初始化了一个名为 &lt;code&gt;_messageEntries&lt;/code&gt;  和 &lt;code&gt;messageMap&lt;/code&gt;  的&lt;strong&gt;静态局部变量&lt;/strong&gt;，并将该变量的地址返回。&lt;br&gt;
我们简单猜测， &lt;code&gt;CFrameWnd&lt;/code&gt;  类内部在调用 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数时，就得到了我们所设定的&lt;strong&gt;映射关系表&lt;/strong&gt;；&lt;br&gt;
基于此映射表，就可以在其&lt;strong&gt;窗口过程函数&lt;/strong&gt;中，&lt;emp&gt;根据消息调用对应的成员函数&lt;/emp&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <updated>2022-10-04T05:07:21.000Z</updated>
    </entry>
</feed>
