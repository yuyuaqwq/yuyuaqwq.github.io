<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yuyuaqwq.github.io</id>
    <title>鹿鹿鱼鱼</title>
    <link href="http://yuyuaqwq.github.io" />
    <updated>2024-04-29T06:58:25.000Z</updated>
    <category term="MFC" />
    <category term="没饭吃" />
    <category term="逆向分析" />
    <category term="工具" />
    <category term="C/C++" />
    <category term="反汇编" />
    <category term="网络分析" />
    <category term="Proxifier" />
    <category term="编译原理" />
    <category term="动手写ToyLang" />
    <category term="C++" />
    <category term="界面开发" />
    <category term="保护模式" />
    <category term="Windows内核" />
    <category term="密码学" />
    <category term="PKI" />
    <category term="证书" />
    <category term="签名" />
    <category term="Git" />
    <category term="版本管理" />
    <category term="Linux" />
    <category term="计算机网络" />
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5255.html</id>
        <title>2.连接多台终端设备：同轴电缆和集线器</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5255.html"/>
        <content type="html"></content>
        <category term="计算机网络" />
        <updated>2024-04-29T06:58:25.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/7ee4.html</id>
        <title>1.通过网线直连的两台终端设备</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/7ee4.html"/>
        <content type="html">&lt;h2 id=&#34;连接它们&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接它们&#34;&gt;#&lt;/a&gt; 连接它们&lt;/h2&gt;
&lt;p&gt;连接两台终端设备最简单的方式是什么？其一当然是直接通过一条网线来连接。&lt;/p&gt;
&lt;p&gt;假设我们准备了两台 PC，并用铜交叉线连接了它们：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7ee4/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅是如此还是不够的，我们还需要为他们配置一下 IP 地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7ee4/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ping&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ping&#34;&gt;#&lt;/a&gt; Ping&lt;/h2&gt;
&lt;p&gt;相信你应该对 Ping 这个命令有所耳闻，其作用是探测本机与网络中另一主机之间是否可达 (大白话就是连接正不正常)，基于 ICMP 协议 (现在不清楚这些协议也没关系，后面会讲)。&lt;br&gt;
如果配置正确，我们的两台设备应该是能够 Ping 通的。&lt;/p&gt;
&lt;p&gt;配置完 IP 地址之后，我们尝试一下用 &lt;code&gt;192.168.1.10&lt;/code&gt;  这台设备去 Ping &lt;code&gt;192.168.1.11&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7ee4/3.gif&#34; class=&#34;&#34; title=&#34;这是一张动图&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到它们之间是连通的！&lt;br&gt;
在此之上我们就可以使用耳熟能详的 UDP、TCP 协议去交换数据了。&lt;/p&gt;
&lt;h2 id=&#34;mac&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mac&#34;&gt;#&lt;/a&gt; MAC&lt;/h2&gt;
&lt;p&gt;设备之间不是通过 IP 去识别设备身份的，而是使用一个叫 MAC 地址的东西：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAC 地址（英语：Media Access Control Address），直译为媒体访问控制地址，也称为局域网地址（LAN Address），以太网地址（Ethernet Address）或物理地址（Physical Address），它是一个用来确认网络设备位置的地址。在 OSI 模型中，第三层网络层负责 IP 地址，第二层数据链接层则负责 MAC 地址。MAC 地址用于在网络中唯一标示一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的 MAC 地址。        – 摘自维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简而言之，在每一台终端设备的网卡中，都会存在 MAC 地址，该地址应当是在出厂时就确定的、全世界唯一的地址。&lt;/p&gt;
&lt;p&gt;处于统一网段内的设备的网络通信的部分过程是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PC0 期望将某个数据包发送给 PC1，就需要为这个数据包的目标 MAC 地址字段填写为 PC1 的 MAC 地址。&lt;/li&gt;
&lt;li&gt;在我们的示例中，PC0 会通过这一个接口让数据包流向 PC1。&lt;/li&gt;
&lt;li&gt;PC1 收到之后，检查一下这个数据包是不是发给它自己的 (即检查数据包中的目标 MAC 地址和本机网卡 MAC 地址是否匹配)，如果是的话就会接收并向上层转发，如果不是则丢弃，负责此工作的是位于 TCP/IP 分层模型中的&lt;strong&gt;数据链路层&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们查看一下 PC0 和 PC1 的 MAC 地址：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7ee4/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7ee4/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的 Physical Address 就是这两台设备的网卡对应的 MAC 地址了，但是现在又会有一个新的问题：PC0 如何得知 PC1 的 MAC 地址？我们在 Ping 时只填写了目标 IP，并未填写目标 MAC；&lt;br&gt;
关于这个问题你可以先思考一下 and 查阅资料，不懂也没关系，后续我会再详细解答。&lt;/p&gt;
</content>
        <category term="计算机网络" />
        <updated>2024-04-29T04:26:30.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/54a8.html</id>
        <title>1.VsCode环境配置</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/54a8.html"/>
        <content type="html">&lt;h1 id=&#34;visual-studio-code-安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#visual-studio-code-安装&#34;&gt;#&lt;/a&gt; Visual Studio Code 安装&lt;/h1&gt;
&lt;p&gt;这一块应该没什么好细说的，到&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;官网&lt;/a&gt;上下载就可以了。&lt;/p&gt;
&lt;h1 id=&#34;虚拟机-安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟机-安装&#34;&gt;#&lt;/a&gt; 虚拟机 安装&lt;/h1&gt;
&lt;p&gt;我个人的开发环境是，物理机 &lt;code&gt;Windows&lt;/code&gt;  + 虚拟机 &lt;code&gt;Ubuntu&lt;/code&gt; ，因此需要安装一个虚拟机应用。&lt;br&gt;
可以看你个人选择自己喜好的虚拟机应用，例如 &lt;code&gt;VMWare Workstation&lt;/code&gt;  或 &lt;code&gt;VirtualBox&lt;/code&gt; 。&lt;br&gt;
这里我使用的是 &lt;code&gt;VMWare Workstation&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;ubuntu-安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ubuntu-安装&#34;&gt;#&lt;/a&gt; Ubuntu 安装&lt;/h1&gt;
&lt;p&gt;虚拟机上安装 &lt;code&gt;Ubuntu&lt;/code&gt;  的话，网上的教程也很多，也不赘述了，我这里装的是桌面版的。&lt;/p&gt;
&lt;h1 id=&#34;配置vscode的远程开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置vscode的远程开发&#34;&gt;#&lt;/a&gt; 配置 VsCode 的远程开发&lt;/h1&gt;
&lt;p&gt;我们需要在 &lt;code&gt;Windows&lt;/code&gt;  上进行 &lt;code&gt;Linux&lt;/code&gt;  下的开发， &lt;code&gt;VsCode&lt;/code&gt;  给我们提供了一个很好的方案，使用 &lt;code&gt;SSH&lt;/code&gt;  进行远程开发。&lt;/p&gt;
&lt;h2 id=&#34;vscode扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vscode扩展&#34;&gt;#&lt;/a&gt; VsCode 扩展&lt;/h2&gt;
&lt;p&gt;这是 &lt;code&gt;VsCode&lt;/code&gt;  中，微软提供的一个扩展。&lt;br&gt;
首先启动 &lt;code&gt;VsCode&lt;/code&gt; ，选择 &lt;code&gt;Extensions(Ctrl+Shift+X)&lt;/code&gt;  选项卡，搜索 &lt;code&gt;Remote&lt;/code&gt; 。&lt;br&gt;
安装 &lt;code&gt;Remote - SSH&lt;/code&gt;  扩展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Remote - SSH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote Explorer&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;会被自动安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote - SSH: Editing Configuration Files&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;会被自动安装&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;openssh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#openssh&#34;&gt;#&lt;/a&gt; OpenSSH&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Windows&lt;/code&gt;  和 &lt;code&gt;Ubuntu&lt;/code&gt;  中都需要安装。&lt;/p&gt;
&lt;h3 id=&#34;windows&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windows&#34;&gt;#&lt;/a&gt; Windows&lt;/h3&gt;
&lt;p&gt;在虚拟机中测试了一下，似乎 &lt;code&gt;Windows 10&lt;/code&gt;  上已经预置了。&lt;/p&gt;
&lt;h3 id=&#34;ubuntu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ubuntu&#34;&gt;#&lt;/a&gt; Ubuntu&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt;  下的安装相当简单：&lt;br&gt;
 &lt;code&gt;sudo apt-get install openssh-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下命令启动 &lt;code&gt;ssh 服务&lt;/code&gt; ：&lt;br&gt;
 &lt;code&gt;sudo /etc/init.d/ssh start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下命令查看 &lt;code&gt;ssh 服务&lt;/code&gt; 是否启用：&lt;br&gt;
 &lt;code&gt;ps -e|grep ssh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;有进程 &lt;code&gt;sshd&lt;/code&gt;  在运行就是 ok 了。&lt;/p&gt;
&lt;h3 id=&#34;配置免密登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置免密登录&#34;&gt;#&lt;/a&gt; 配置免密登录&lt;/h3&gt;
&lt;p&gt;我们需要让 &lt;code&gt;Linux端的OpenSSH服务&lt;/code&gt; 识别我们的身份，以实现免密登录。&lt;/p&gt;
&lt;h4 id=&#34;生成密钥对&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#生成密钥对&#34;&gt;#&lt;/a&gt; 生成密钥对&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Windows PowerShell&lt;/code&gt;  中输入以下命令：&lt;br&gt;
 &lt;code&gt;ssh-keygen&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;随后第一个待输入：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Generating public/private rsa key pair.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Enter file in which to save the key (C:\Users\yuyu/.ssh/id_rsa):&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接回车。&lt;/p&gt;
&lt;p&gt;第二个待输入，可以直接回车不设置密码，如果为了安全你也可以设置：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Created directory &amp;#x27;C:\Users\yuyu/.ssh&amp;#x27;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Enter passphrase (empty for no passphrase):&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来要求重复输入密码，忽略了密码就继续回车：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Enter same passphrase again:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成生成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;+---[RSA 3072]----+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|                .|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|        . o o . o|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|     . E +o= X .o|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|    . = ++*+= X.o|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|     o .S==o.o.B |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|       ooB.. .o o|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|        +oo    .=|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|          .    oo|&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;|              .  |&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+----[SHA256]-----+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来在以下用户路径中即可找到生成的公钥和私钥文件：&lt;br&gt;
 &lt;code&gt;C:\Users\yuyu\.ssh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;yuyu&lt;/code&gt;  替换成你自己的用户名。&lt;/p&gt;
&lt;h4 id=&#34;配置公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置公钥&#34;&gt;#&lt;/a&gt; 配置公钥&lt;/h4&gt;
&lt;p&gt;如果你是安装的桌面版 &lt;code&gt;Ubuntu&lt;/code&gt; ，就可以很轻松的在 &lt;code&gt;VMWare Workstation&lt;/code&gt;  中通过拖动来传输文件。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Ubuntu桌面&lt;/code&gt; 中打开文件浏览器，会显示在 Home 目录下 (实际路径是 &lt;code&gt;/Home/你的用户名&lt;/code&gt; 、 &lt;code&gt;~&lt;/code&gt; )，按下 &lt;code&gt;Ctrl + H&lt;/code&gt; ，即可显示隐藏文件。&lt;br&gt;
可以看到一个目录 &lt;code&gt;.ssh&lt;/code&gt; ，进入。&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;Windows&lt;/code&gt;  下生成的公钥文件 &lt;code&gt;id_rsa.pub&lt;/code&gt;  复制到 Linux 的 &lt;code&gt;.ssh&lt;/code&gt;  目录下。&lt;/p&gt;
&lt;p&gt;在该目录中复制一份 &lt;code&gt;id_rsa.pub&lt;/code&gt; ，并更名为 &lt;code&gt;authorized_keys&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;vscode远程连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vscode远程连接&#34;&gt;#&lt;/a&gt; VsCode 远程连接&lt;/h2&gt;
&lt;h3 id=&#34;查看ip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看ip&#34;&gt;#&lt;/a&gt; 查看 ip&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Linux终端&lt;/code&gt; 下输入：&lt;br&gt;
 &lt;code&gt;hostname -I&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;记下此 ip&lt;/p&gt;
&lt;h3 id=&#34;配置连接目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置连接目标&#34;&gt;#&lt;/a&gt; 配置连接目标&lt;/h3&gt;
&lt;p&gt;回到 &lt;code&gt;VsCode&lt;/code&gt;  中，由于我们安装了扩展，侧边选项卡新增了一个图标 ( &lt;code&gt;Remote Explorer&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;选择该选项卡，随后点击 &lt;code&gt;齿轮&lt;/code&gt; 按钮。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择第 1 项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Read more about SSH config files: https://linux.die.net/man/5/ssh_config&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Host alias&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     HostName hostname&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#     User user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;Ubuntu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;HostName&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;192.168&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.229&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.132&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;yuyu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;Port&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将 ip 和用户名 (都是 &lt;code&gt;linux&lt;/code&gt;  的) 修改为你的，保存即可。&lt;/p&gt;
&lt;p&gt;配置完成后即出现了你添加的主机，开始连接吧！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里选择 &lt;code&gt;Linux&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;继续。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于我们配置了免密登录，此时我们成功连接了！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来可以打开一个文件夹了，这里我创建了一个 project 的目录来管理我的项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/8.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至此，我们的远程开发环境就已经配置完毕了。&lt;/p&gt;
&lt;h1 id=&#34;在vscode中构建与调试项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在vscode中构建与调试项目&#34;&gt;#&lt;/a&gt; 在 VsCode 中构建与调试项目&lt;/h1&gt;
&lt;h2 id=&#34;cmake&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cmake&#34;&gt;#&lt;/a&gt; CMake&lt;/h2&gt;
&lt;p&gt;先前我就纠结过是选择 CMake 还是 XMake 来管理项目工程，最后还是选择了 CMake，因为用的人比较多吧，学习一下总不是坏事。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Linux终端&lt;/code&gt; 输入命令：&lt;br&gt;
 &lt;code&gt;sudo apt install cmake&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;资料&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#资料&#34;&gt;#&lt;/a&gt; 资料&lt;/h3&gt;
&lt;p&gt;这里推荐两篇文章：&lt;br&gt;
1.&lt;a href=&#34;https://subingwen.cn/cmake/CMake-primer/index.html&#34;&gt;CMake 保姆级教程（上）&lt;/a&gt;&lt;br&gt;
2.&lt;a href=&#34;https://subingwen.cn/cmake/CMake-advanced/&#34;&gt;CMake 保姆级教程（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;能够快速上手 CMake 并了解到足够在当前阶段使用的知识。&lt;/p&gt;
&lt;h2 id=&#34;vscode扩展-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vscode扩展-2&#34;&gt;#&lt;/a&gt; VsCode 扩展&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;C/C++&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;语法、浏览等辅助扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMake&lt;/code&gt;  &amp;amp;  &lt;code&gt;CMake Tools&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;cmake&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Native Debug&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;调试辅助扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C/C++ Compile Run&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;单文件运行扩展，按 f6 即可直接编译运行当前浏览的源文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clangd&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;这个和 &lt;code&gt;C/C++&lt;/code&gt;  是差不多的作用，两个扩展是不能同时启用的 (存在冲突)，我尝试了一下还是 &lt;code&gt;C/C++&lt;/code&gt;  更好用一点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Catppuccin Noctis&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;非必须，感觉还行的主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Remote - SSH&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;远程开发，已经安装了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hello-world&#34;&gt;#&lt;/a&gt; Hello world！&lt;/h2&gt;
&lt;p&gt;好了，接下来是喜闻乐见的 &lt;code&gt;Hello world&lt;/code&gt;  环节。&lt;br&gt;
咱们来学习如何构建和调试项目。&lt;/p&gt;
&lt;p&gt;我这里在 &lt;code&gt;VsCode&lt;/code&gt;  的远程连接状态中打开目录：&lt;br&gt;
 &lt;code&gt;/home/yuyu/project/hello_world&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;编写源代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写源代码&#34;&gt;#&lt;/a&gt; 编写源代码&lt;/h3&gt;
&lt;p&gt;新建源文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;敲上代码：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::cout &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;构建与调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构建与调试&#34;&gt;#&lt;/a&gt; 构建与调试&lt;/h3&gt;
&lt;p&gt;代码是写完了，接下来我们如何构建和调试呢？&lt;br&gt;
我们这里用 &lt;code&gt;CMake&lt;/code&gt;  做示例，尽管只有一个文件，杀鸡用牛刀的感觉，但我们真正开发项目自然是需要更加现代的项目管理方式的。&lt;/p&gt;
&lt;p&gt;同目录下新建 &lt;code&gt;CMakeLists.txt&lt;/code&gt;  文件，输入以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight cmake&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;cmake_minimum_required&lt;/span&gt;(VERSION &lt;span class=&#34;number&#34;&gt;3.0&lt;/span&gt;.&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;project&lt;/span&gt;(hello_world)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Output path of the library&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;set&lt;/span&gt;(EXECUTABLE_OUTPUT_PATH &lt;span class=&#34;variable&#34;&gt;$&amp;#123;PROJECT_SOURCE_DIR&amp;#125;&lt;/span&gt;/bin)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# We need to enable debugging information.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SET&lt;/span&gt;(CMAKE_BUILD_TYPE &lt;span class=&#34;string&#34;&gt;&amp;quot;Debug&amp;quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SET&lt;/span&gt;(CMAKE_CXX_FLAGS_DEBUG &lt;span class=&#34;string&#34;&gt;&amp;quot;$ENV&amp;#123;CXXFLAGS&amp;#125; -O0 -Wall -g2 -ggdb&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SET&lt;/span&gt;(CMAKE_CXX_FLAGS_RELEASE &lt;span class=&#34;string&#34;&gt;&amp;quot;$ENV&amp;#123;CXXFLAGS&amp;#125; -O3 -Wall&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# All original files in the current path.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;aux_source_directory&lt;/span&gt;(&lt;span class=&#34;variable&#34;&gt;$&amp;#123;PROJECT_SOURCE_DIR&amp;#125;&lt;/span&gt; SRC_LIST)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# build&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;add_executable&lt;/span&gt;(hello_world &lt;span class=&#34;variable&#34;&gt;$&amp;#123;SRC_LIST&amp;#125;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;构建方法一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构建方法一&#34;&gt;#&lt;/a&gt; 构建方法一&lt;/h4&gt;
&lt;p&gt;在终端中输入：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cmake ..&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;make all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;构建方法二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构建方法二&#34;&gt;#&lt;/a&gt; 构建方法二&lt;/h4&gt;
&lt;p&gt;右键 &lt;code&gt;CMakeLists.txt&lt;/code&gt;  文件&lt;br&gt;
 1.Configure All Projects&lt;br&gt;
2.Build All Projects&lt;/p&gt;
&lt;p&gt;顺利的话都能够看到出现了一个 bin 目录，目录中就有我们编译的文件了。&lt;/p&gt;
&lt;h4 id=&#34;调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#调试&#34;&gt;#&lt;/a&gt; 调试&lt;/h4&gt;
&lt;p&gt;菜单栏中选择 &lt;code&gt;Run&lt;/code&gt; -&amp;gt; &lt;code&gt;Add Configuration&lt;/code&gt; ，在弹出的菜单中选择 &lt;code&gt;GDB&lt;/code&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/10.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将此处的 &lt;code&gt;executable&lt;/code&gt;  修改成 &lt;code&gt;hello_world&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/11.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回到 &lt;code&gt;hello_world.cpp&lt;/code&gt; ，在第 4 行处按下 &lt;code&gt;f9&lt;/code&gt;  设置断点， &lt;code&gt;f7&lt;/code&gt;  编译， &lt;code&gt;f5&lt;/code&gt;  运行。&lt;br&gt;
成功断下！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/54a8/12.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;gcc升级至132&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gcc升级至132&#34;&gt;#&lt;/a&gt; GCC 升级至 13.2&lt;/h1&gt;
&lt;p&gt;由于 Ubuntu22.04 自带的 GCC 版本是 11 的，这里因为个人需要需要升级成 13，特意记录一下。&lt;/p&gt;
&lt;h2 id=&#34;下载gcc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载gcc&#34;&gt;#&lt;/a&gt; 下载 GCC&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget http://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;解压&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解压&#34;&gt;#&lt;/a&gt; 解压&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar xf gcc-13.2.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;安装组件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装组件&#34;&gt;#&lt;/a&gt; 安装组件&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd gcc-13.2.0/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./contrib/download_prerequisites&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;构建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构建&#34;&gt;#&lt;/a&gt; 构建&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mkdir build &amp;amp;&amp;amp; cd build&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo make -j2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;安装-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装-2&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;更新c库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新c库&#34;&gt;#&lt;/a&gt; 更新 C++ 库&lt;/h2&gt;
&lt;p&gt;不更新的话编译出来的程序会无法运行。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo add-apt-repository ppa:ubuntu-toolchain-r/test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install --only-upgrade libstdc++6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;查看更新结果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看更新结果&#34;&gt;#&lt;/a&gt; 查看更新结果&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是新的 C++ 库&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GLIBCXX_3.4.31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;GLIBCXX_3.4.32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;参考&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/x_wukong/p/4475567.html&#34;&gt;Linux 上安装使用 SSH (ubuntu&amp;amp;&amp;amp;redhat)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/68577071&#34;&gt;VS Code Remote SSH 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_48617416/article/details/131729829&#34;&gt;Linux 系统 ubuntu22.04 安装最新版的 gcc13.1.0 编译器，支持 c++20、23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/76974555/glibcxx-3-4-32-not-found-error-at-runtime-gcc-13-2-0&#34;&gt;“`GLIBCXX_3.4.32’ not found” error at runtime. GCC 13.2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="C++" />
        <category term="Linux" />
        <updated>2023-10-29T03:39:42.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/c23d.html</id>
        <title>0.前言</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/c23d.html"/>
        <content type="html">&lt;p&gt;好久没写博客了…&lt;/p&gt;
&lt;p&gt;嗯… 因为某些原因，打算转 Linux 下做 C++ 开发，Windows 的东西就当成业余的兴趣去研究吧。&lt;/p&gt;
&lt;p&gt;这个系列的文章就记录一下我在学习过程中的一些思考，想法，以及备忘吧，就这样吧。&lt;/p&gt;
</content>
        <category term="C++" />
        <category term="Linux" />
        <updated>2023-10-28T14:25:37.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/f54c.html</id>
        <title>【保护模式】2.基于段的保护</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/f54c.html"/>
        <content type="html">&lt;h1 id=&#34;段寄存器的扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段寄存器的扩展&#34;&gt;#&lt;/a&gt; 段寄存器的扩展&lt;/h1&gt;
&lt;p&gt;我们需要划分权限，让操作系统和应用处在不同的权限中，以保证系统安全；&lt;br&gt;
并且决定基于段机制进行延展。&lt;/p&gt;
&lt;p&gt;相较于实模式的 1MB 寻址 (2&lt;sup&gt;20)，保护模式下的寻址范围已经达到了 4GB (2&lt;/sup&gt;32)，在汇编指令上可以直接书写 4 字节的内存地址。&lt;/p&gt;
&lt;p&gt;此时，段寄存器的 16 位宽度已经显得有些相形见绌了。&lt;br&gt;
为了扩展，段寄存器在保护模式下，不再直接存放段的基址，而是存放了&lt;strong&gt;索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;全局描述符表-global-descriptor-table&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局描述符表-global-descriptor-table&#34;&gt;#&lt;/a&gt; 全局描述符表 (Global Descriptor Table)&lt;/h2&gt;
&lt;p&gt;具体是索引什么呢？&lt;br&gt;
这里引入了一张表，叫做&lt;strong&gt;全局描述符表&lt;/strong&gt;，其实就是在内存中存放的数组。&lt;br&gt;
其元素叫做&lt;strong&gt;段描述符&lt;/strong&gt;，在内存中顺序组织起来，也就是一张表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简称&lt;strong&gt; GDT&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;段选择子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段选择子&#34;&gt;#&lt;/a&gt; 段选择子&lt;/h2&gt;
&lt;p&gt;段寄存器由于有了新的用途，因此也有了新的名字，叫做&lt;strong&gt;段选择子&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大概是意为用于选择段的寄存器吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;段描述符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段描述符&#34;&gt;#&lt;/a&gt; 段描述符&lt;/h2&gt;
&lt;p&gt;那么说回段描述符，它究竟有什么作用呢？为什么会有这么一个东西呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;段描述符是 GDT 或 LDT (暂时忽略) 中的元素；&lt;br&gt;
它为处理器提供诸如段基址，段大小，访问权限及状态等信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先来看英特尔白皮书上对段描述符的图示
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个段描述符是 8 字节，由多个字段组成。&lt;br&gt;
我们发现，字段的排列有些混乱，基址 (Base)、界限 (Limit) 甚至需要跨几个字段组合。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;据说是英特尔为了兼容，这里也不做探究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;字段这么多，咱们先来看最熟悉的基址字段。&lt;br&gt;
还记得 &lt;strong&gt;4. 段寄存器&lt;/strong&gt; 小节中的 &lt;strong&gt;CPU 对内存的访问&lt;/strong&gt; 那部分吗？&lt;br&gt;
&lt;strong&gt;在实模式下，cpu 访问任何在汇编指令中显式书写的地址，都会将地址视作偏移 (逻辑地址)，加上段基地址形成真正的物理地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这里也不例外，只不过段寄存器并不直接存放段基址了，而是存放用于了在 GDT 中选择段描述符的索引值。&lt;/p&gt;
&lt;h2 id=&#34;访问内存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问内存&#34;&gt;#&lt;/a&gt; 访问内存&lt;/h2&gt;
&lt;p&gt;至此，我们也能初步设想在保护模式下，CPU 是如何基于段访问内存的：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mov eax, dword ptr ds:[0x12345678]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;汇编指令中的内存地址 (偏移，&lt;strong&gt;offset&lt;/strong&gt;) 是&lt;strong&gt; 0x12345678&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;汇编指令中指定使用的段寄存器是 &lt;strong&gt;ds&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;访问 ds 段寄存器，得到&lt;strong&gt;索引 (index)&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;访问&lt;strong&gt; GDT [index]&lt;/strong&gt;，得到段描述符；&lt;/li&gt;
&lt;li&gt;解析段描述符中的&lt;strong&gt; Base&lt;/strong&gt; 字段；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ds.Base&lt;/strong&gt; + &lt;strong&gt;offset&lt;/strong&gt; = &lt;strong&gt;最终的物理地址&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;通过物理地址访问内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;地址分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#地址分类&#34;&gt;#&lt;/a&gt; 地址分类&lt;/h1&gt;
&lt;p&gt;至此我们基本了解了，保护模式下 CPU 如何基于段描述符进行寻址。&lt;br&gt;
并且在上文，我列出了 CPU 将汇编指令中书写的地址转换为物理地址的猜想。&lt;/p&gt;
&lt;p&gt;在保护模式下，实际寻址过程的各个阶段的地址也都是有命名的。&lt;br&gt;
为了向下深入学习，先了解一下还是有必要的。&lt;/p&gt;
&lt;h2 id=&#34;逻辑地址相对地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逻辑地址相对地址&#34;&gt;#&lt;/a&gt; 逻辑地址 / 相对地址&lt;/h2&gt;
&lt;p&gt;百度百科的解释是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指在计算机体系结构中是指应用程序角度看到的内存单元（memory cell）、存储单元（storage element）、网络主机（network host）的地址。 逻辑地址往往不同于物理地址（physical address），通过地址翻译器（address translator）或映射函数可以把逻辑地址转化为物理地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;咱们简单一点，&lt;strong&gt;还是理解成在汇编指令中显式书写的地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上一节举例的汇编指令：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mov eax, dword ptr ds:[0x12345678]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在当时把它叫做偏移 (offset)，其实它应该叫做&lt;strong&gt;逻辑地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在实模式下，&lt;strong&gt;逻辑地址 + 段基地址 = 物理地址&lt;/strong&gt;；&lt;br&gt;
在保护模式下， &lt;strong&gt;逻辑地址 + 段基地址 = 线性地址&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;线性地址虚拟地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线性地址虚拟地址&#34;&gt;#&lt;/a&gt; 线性地址 / 虚拟地址&lt;/h2&gt;
&lt;p&gt;摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线性地址（Linear Address）是逻辑地址到物理地址变换之间的中间层。在分段部件中逻辑地址是段中的偏移地址，然后加上基地址就是线性地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线性地址是在保护模式下出现的，通过&lt;strong&gt;页表&lt;/strong&gt;将&lt;strong&gt;线性地址&lt;/strong&gt;转换成&lt;strong&gt;物理地址&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;在上节举例时，我们将 &amp;quot;线性地址&amp;quot; 称为 &amp;quot;物理地址&amp;quot;；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线性地址到物理地址的转换涉及到分页机制，在未学习分页机制之前，请暂时将笔记中所有 &amp;quot;线性地址&amp;quot; 视作 &amp;quot;物理地址&amp;quot;。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;物理地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#物理地址&#34;&gt;#&lt;/a&gt; 物理地址&lt;/h2&gt;
&lt;p&gt;摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在存储器里以字节为单位存储信息，为正确地存放或取得信息，每一个字节单元给以一个唯一的存储器地址，称为物理地址（Physical Address），又叫实际地址或绝对地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CPU 最终通过&lt;strong&gt;物理地址&lt;/strong&gt;去访问&lt;strong&gt;真正的存储单元&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;段描述符缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段描述符缓存&#34;&gt;#&lt;/a&gt; 段描述符缓存&lt;/h1&gt;
&lt;h2 id=&#34;gdtr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gdtr&#34;&gt;#&lt;/a&gt; GDTR&lt;/h2&gt;
&lt;p&gt;我们说到，既然 CPU 访问内存，需要先访问 GDT，那么 GDT 的地址又是从哪里来的呢？&lt;/p&gt;
&lt;p&gt;CPU 提供了一个 48bit、名为&lt;strong&gt; GDTR&lt;/strong&gt; 的寄存器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;高 32bit 存放 GDT 的首地址（线性地址）；&lt;br&gt;
低 16bit 存放 GDT 的界限，即整个 GDT 表的长度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通过 windbg 调试 Windows XP，查看&lt;strong&gt; GDTR&lt;/strong&gt; 的内容：
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 windbg 的使用，在内核的学习阶段是非常重要的，所学的知识都需要自己动手实验、验证；&lt;br&gt;
如果有需要的话，我会考虑再找时间写一篇关于环境配置的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 windbg 下：&lt;br&gt;
查询&lt;strong&gt; gdtr&lt;/strong&gt;，即查询 GDT 的首地址；&lt;br&gt;
查询&lt;strong&gt; gdtl&lt;/strong&gt;，即查询 GDT 的界限。&lt;/p&gt;
&lt;p&gt;CPU 每次访问&lt;strong&gt; GDT&lt;/strong&gt; 时，都是从&lt;strong&gt; GDTR&lt;/strong&gt; 中获取&lt;strong&gt;线性地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而 GDTR 的值，是由操作系统在初始化阶段填入的。&lt;/p&gt;
&lt;h2 id=&#34;不可见寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可见寄存器&#34;&gt;#&lt;/a&gt; 不可见寄存器&lt;/h2&gt;
&lt;p&gt;解决了一个问题，当然又会出现新的问题。&lt;br&gt;
通过引入&lt;strong&gt; GDT&lt;/strong&gt;，我们解决了&lt;strong&gt;段寄存器&lt;/strong&gt;宽度太小无法满足保护模式需求的问题。&lt;/p&gt;
&lt;p&gt;但是每次访问内存，都要先查&lt;strong&gt; GDT&lt;/strong&gt;，这是不是有点浪费 CPU 的性能了？&lt;/p&gt;
&lt;p&gt;是的，内存访问对于 CPU 而言，是很慢的行为，为了避免这种性能浪费，引入了名为&lt;strong&gt;描述符缓存&lt;/strong&gt;的寄存器。&lt;br&gt;
实际上，&lt;strong&gt;描述符缓存&lt;/strong&gt;是不可见的，它在保护模式下是属于&lt;strong&gt;段寄存器&lt;/strong&gt;的一部分。&lt;/p&gt;
&lt;p&gt;保护模式下的段寄存器，就分为了&lt;strong&gt;两个部分&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;段选择子
&lt;ul&gt;
&lt;li&gt;原先的段寄存器，可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;描述符缓存
&lt;ul&gt;
&lt;li&gt;对段寄存器进行扩展，不可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然它不可见，无法直接操作，但是是真实存在的。&lt;/p&gt;
&lt;h2 id=&#34;段寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段寄存器&#34;&gt;#&lt;/a&gt; 段寄存器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保护模式下，将段选择子与描述符缓存部分 合称为段寄存器&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;加载段寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加载段寄存器&#34;&gt;#&lt;/a&gt; 加载段寄存器&lt;/h3&gt;
&lt;p&gt;在&lt;strong&gt;加载段选择子&lt;/strong&gt;时，CPU 会通过我们给定的段选择子，查询 GDT，得到描述符。&lt;/p&gt;
&lt;p&gt;解析描述符，将字段填入&lt;strong&gt;描述符缓存&lt;/strong&gt;中。&lt;/p&gt;
&lt;p&gt;未来每次发生内存访问，都不会去查询 GDT，而是直接从&lt;strong&gt;描述符缓存&lt;/strong&gt;中获取字段。&lt;/p&gt;
&lt;p&gt;那么，段选择子是由谁加载的呢？为什么我们平时没有见到过相关的代码呢？&lt;br&gt;
我们可以在 windows 下打开随意 x64dbg、od 之类的调试器，拖入一个程序，就可以看到，段选择子是存在初始值的，而加载的工作是由操作系统负责的。&lt;br&gt;
我们也应该明白，所谓的&lt;strong&gt;加载段选择子&lt;/strong&gt;，实际上也是&lt;strong&gt;加载描述符缓存&lt;/strong&gt;，合称为&lt;strong&gt;加载段寄存器&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;访问内存-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问内存-2&#34;&gt;#&lt;/a&gt; 访问内存&lt;/h2&gt;
&lt;p&gt;至此，我们可以将上一节的设想进行改进：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mov eax, dword ptr ds:[0x12345678]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;逻辑地址&lt;/strong&gt;是&lt;strong&gt; 0x12345678&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;汇编指令中指定使用的段寄存器是 &lt;strong&gt;ds&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;从&lt;strong&gt;描述符缓存&lt;/strong&gt;中取得&lt;strong&gt; Base&lt;/strong&gt; 字段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ds.Base&lt;/strong&gt; + &lt;strong&gt;逻辑地址&lt;/strong&gt; = &lt;strong&gt;线性地址&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;通过&lt;strong&gt;线性地址&lt;/strong&gt;访问内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;访问控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问控制&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h1&gt;
&lt;p&gt;那么，说了这么久保护，究竟应该怎样才能做到所谓的保护呢？&lt;/p&gt;
&lt;p&gt;在第 5 节我们简单提及了权限的建立，通过为不同的段设置权限级别，以&lt;strong&gt;控制不同程序对内存的访问&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;特权级划分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特权级划分&#34;&gt;#&lt;/a&gt; 特权级划分&lt;/h2&gt;
&lt;p&gt;接下来咱们想一下，既然是权限，那自然是有高有低，就像身份一样，我是排长，你是士卒，那我的级别自然就比你高。&lt;/p&gt;
&lt;p&gt;接下来我们尝试用两个数字表示两种权限级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0
&lt;ul&gt;
&lt;li&gt;最高权限级别，表示当前的 CPU 是以&lt;strong&gt;系统&lt;/strong&gt;身份在跑的，操作系统运行在此级别下；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3
&lt;ul&gt;
&lt;li&gt;最低权限级别，表示当前的 CPU 是以&lt;strong&gt;用户&lt;/strong&gt;身份在跑的，应用程序运行在此级别下。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;再次构思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再次构思&#34;&gt;#&lt;/a&gt; 再次构思&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;基地址 (Base)&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;访问此段需要权限 (DPL)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00 ~ 0x3f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给操作系统内核存放数据&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x40 ~ 0x7f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给操作系统内核存放代码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x40&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80 ~ 0xcf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A 存放数据&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xd0 ~ 0xff&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A 存放代码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xd0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;内核是指操作系统驻留在内存中的最基本的部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;同时，我们已经学习过段描述符了，&lt;strong&gt;段基址&lt;/strong&gt;是放到段描述符中的，那么&lt;strong&gt;访问权限&lt;/strong&gt;自然也可以放到段描述符中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本控制&#34;&gt;#&lt;/a&gt; 基本控制&lt;/h2&gt;
&lt;p&gt;假定我是 CPU，此刻我的 ip 指针指向了应用程序中的指令序列，并且我的&lt;strong&gt;当前身份是用户&lt;/strong&gt;。&lt;br&gt;
一旦我试图&lt;strong&gt;访问我不应该访问的内存&lt;/strong&gt; (如提供给操作系统内核存放数据的段)，因为我没有那么高的特权，&lt;strong&gt;就应当受到制止。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;表明当前程序的身份&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表明当前程序的身份&#34;&gt;#&lt;/a&gt; 表明当前程序的身份&lt;/h3&gt;
&lt;p&gt;既然我们知道，访问内存中的段增加了一项对权限的例行检查，那么自然就需要有一项能表示我们当前身份的东西了。&lt;/p&gt;
&lt;h3 id=&#34;dpl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dpl&#34;&gt;#&lt;/a&gt; DPL&lt;/h3&gt;
&lt;p&gt;组成段描述符的字段之一，表明段描述符的特权级，访问该段应具备的权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Descriptor Privilege Level，描述符特权级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rpl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rpl&#34;&gt;#&lt;/a&gt; RPL&lt;/h3&gt;
&lt;p&gt;还记得我们之前学过的段选择子吗？当时我们只说了，段选择子用于从 GDT 中选择段描述符并加载，实际上，段选择子一共有 16bit，其中高 13bit，才是 GDT 的索引。&lt;/p&gt;
&lt;p&gt;在段选择子中，低 3bit 是另作他用的，其中低 2bit，用于表示 CPU 加载段描述符时的请求权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;即 RPL，Requested Privilege Level ，请求特权级&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;意为发起访问请求时的特权级&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;cpl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cpl&#34;&gt;#&lt;/a&gt; CPL&lt;/h3&gt;
&lt;p&gt;cs 段选择子与 ss 段选择子的 RPL 字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;又称为 CPL，Current Privilege Level，当前特权级&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接下来我们通过使用机密文档来举个栗子，尝试理解它。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;文档&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;最低阅读准许级别&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文档 A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;排长&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文档 B&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;连长&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，假定军官可以申请阅读机密文档，并且每个机密文档都有对应的权限要求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;又假定我是排长，想阅读排长级别才能阅读的机密文件，于是我写了一份申请报告 (请求)，上面写着 **“排长级别”&lt;strong&gt;，并且对审核人员说，我希望能阅读&lt;/strong&gt;文档 A**，审核人员在查看了报告上的请求级别，再与文档 A 的级别进行比较，如果报告上的级别达到了文档 A 的阅读准许级别，审核人员则会批准，我就可以阅读了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是当我想阅读具有连长身份才能阅读的机密文档时，于是我依旧提交申请报告，填写 **“排长级别”&lt;strong&gt;，并告诉他我希望阅读&lt;/strong&gt;文档 B**，负责审批的人一看，你这不对啊，你这申请报告上写的是排长级别，但你想阅读的文档是连长级别才能阅读的机密文档，拒绝也就是理所当然的事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;此处 以军官的身份与阅读机密文件进行比喻 仅出于个人认为易于理解的想法，无其他意义，我尊敬军人，热爱祖国。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;既然有 RPL 了，那么为什么要多此一举，弄出来一个 CPL，这个 CPL 又是个什么东西呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在上面我们强调的是&lt;strong&gt;请求&lt;/strong&gt;，那么为什么要划分&lt;strong&gt;请求&lt;/strong&gt;和&lt;strong&gt;当前&lt;/strong&gt;呢？&lt;/p&gt;
&lt;p&gt;就好比阅读机密文档，需要有足够的身份，才能拥有对应的权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求
&lt;ul&gt;
&lt;li&gt;即我希望阅读的机密文档的级别；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当前
&lt;ul&gt;
&lt;li&gt;表示我现在的身份。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果没有对&lt;strong&gt;当前身份&lt;/strong&gt;的检查，那么即便我是排长，我也可以&lt;strong&gt;提交一个 &amp;quot;连长级别&amp;quot; 的申请报告&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只校验请求是不够的，更重要的是当前的身份&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;程序的运行是依赖于 CPU 的，而 CPU 通过 CPL，辨认当前被 CPU 取指执行的程序的身份；通过 RPL，确定当前程序发起的请求时指定的特权级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可能有的同学又要发炎啦，啊那我直接看身份级别不就行了，为什么还要多此一举，弄出来一个请求级别。&lt;/p&gt;
&lt;h3 id=&#34;arpl&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arpl&#34;&gt;#&lt;/a&gt; ARPL&lt;/h3&gt;
&lt;p&gt;咱们再看一个例子，假设我有一个朋友，他是团长，在平时我抽不开身的时候，就干脆让他帮我递交&lt;strong&gt;申请报告&lt;/strong&gt;，并且告诉他我想查看什么文档，让他替我带回文档。&lt;/p&gt;
&lt;p&gt;而 RPL 的意义在于此，假设我想阅读&lt;strong&gt;文档 B&lt;/strong&gt;，但是我转交给他的申请报告写的是 &amp;quot;排长级别&amp;quot;，就算他&lt;strong&gt;以团长的身份递交申请报告，因为申请报告中填写的级别不足，依旧会被拒绝&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个时候新的问题又来了，如果我转交给他的是一个 &amp;quot;连长级别&amp;quot; 的申请报告呢？这个时候的检查工作就落在团长的身上，他必须&lt;strong&gt;先检查我的身份和我的申请报告&lt;/strong&gt;，如果我的申请报告与我的身份存在问题，那么他就会将我递交的申请报告进行修改，虽然他依旧会原样传达我的话 (我想阅读&lt;strong&gt;文档 B&lt;/strong&gt;)，但是审核人员可以通过查阅申请报告，以及团长传递的话，从而选择拒绝与否。&lt;/p&gt;
&lt;h4 id=&#34;检查工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查工作&#34;&gt;#&lt;/a&gt; 检查工作&lt;/h4&gt;
&lt;p&gt;而这个检查与修改的过程就是 ARPL 指令所做的工作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们的&lt;strong&gt;应用 (连长)&lt;strong&gt; 委托&lt;/strong&gt;操作系统 (团长)&lt;strong&gt; 访问指定的&lt;/strong&gt;段 (机密文档)&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用的&lt;strong&gt; RPL (申请报告)&lt;/strong&gt;，以及应用的&lt;strong&gt; CPL (身份)&lt;/strong&gt;，&lt;strong&gt;操作系统&lt;/strong&gt;通过 ARPL 指令进行校验以及修改，以保证操作系统不会不小心替应用访问了不应该访问的段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后由&lt;strong&gt; cpu (审核员)&lt;strong&gt; 检查段的访问权限&lt;/strong&gt; DPL (机密文档的阅读权限)&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;而 应用是如何委托操作系统 等内容，请在学习权限切换后，再次回来复习。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;权限检查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限检查&#34;&gt;#&lt;/a&gt; 权限检查&lt;/h1&gt;
&lt;p&gt;我们讲述了基于段机制的内存访问是如何受到控制的。&lt;/p&gt;
&lt;p&gt;我想，各位看完之后依旧会存在不少疑惑，比如所谓的&lt;strong&gt;访问&lt;/strong&gt;，对权限的检查，具体是发生在什么时候呢？&lt;/p&gt;
&lt;h2 id=&#34;段的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段的分类&#34;&gt;#&lt;/a&gt; 段的分类&lt;/h2&gt;
&lt;p&gt;我们知道，由地址上连续的多个内存单元组织而成的内存区域，就可以将其称之为段。&lt;br&gt;
为了减少错误的出现与降低开发难度，在实模式时，就已经开始将内存划分为多个段，并且根据用途为段进行了分类。&lt;/p&gt;
&lt;p&gt;在前面的笔记我们粗略提及过段的分类，本篇再对保护模式下的段的分类进行讲述。&lt;/p&gt;
&lt;h2 id=&#34;实模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实模式&#34;&gt;#&lt;/a&gt; 实模式&lt;/h2&gt;
&lt;p&gt;在实模式下，段的分类更偏向于程序设计者自主安排，我不强求，你想怎么安排，就可以怎么安排，重要的是哪个段寄存器指向了那块内存区域。&lt;/p&gt;
&lt;p&gt;如将 x8000 这个地址作为段的基址，我可以将其赋值给 cs，也可以将其赋值给 ds，取决于我如何使用它。&lt;/p&gt;
&lt;h2 id=&#34;保护模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保护模式&#34;&gt;#&lt;/a&gt; 保护模式&lt;/h2&gt;
&lt;p&gt;为何我会说实模式的段分类下是程序设计者的自主安排，难道保护模式就不是了吗？&lt;br&gt;
实际上，对于应用程序设计者而言，确实是的。&lt;/p&gt;
&lt;p&gt;你也许会想，实模式的段寄存器我可以随便加载，保护模式的段选择子就不可以了吗？&lt;/p&gt;
&lt;p&gt;很遗憾，应用程序设计者确实没有这么大的权限，要不为何会着重&lt;strong&gt;保护&lt;/strong&gt;二字呢？&lt;/p&gt;
&lt;h2 id=&#34;段描述符相关字段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段描述符相关字段&#34;&gt;#&lt;/a&gt; 段描述符相关字段&lt;/h2&gt;
&lt;p&gt;咱们还是要看英特尔白皮书中对段描述符的解释，在往后的笔记中还会经常与它见面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- &amp;#123;% asset_img 1.png 这是一张图片 %&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;s字段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#s字段&#34;&gt;#&lt;/a&gt; S 字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;S 字段为 1
&lt;ul&gt;
&lt;li&gt;当前段描述符描述的段是代码段或数据段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;S 字段为 0
&lt;ul&gt;
&lt;li&gt;当前段描述符描述的段是系统段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据段&#34;&gt;#&lt;/a&gt; 数据段&lt;/h3&gt;
&lt;p&gt;数据段是指用于存放数据的内存区域，向下还能再细分为&lt;strong&gt;只读数据段&lt;/strong&gt;、&lt;strong&gt;栈段&lt;/strong&gt;等，供 CPU 读或写。&lt;/p&gt;
&lt;h3 id=&#34;代码段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代码段&#34;&gt;#&lt;/a&gt; 代码段&lt;/h3&gt;
&lt;p&gt;代码段是指用于存放指令序列的内存区域，供 CPU 执行。&lt;/p&gt;
</content>
        <category term="保护模式" />
        <category term="Windows内核" />
        <updated>2023-02-17T14:57:07.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/4aaf.html</id>
        <title>【保护模式】1.初探保护模式与分段机制</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/4aaf.html"/>
        <content type="html">&lt;h1 id=&#34;保护模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保护模式&#34;&gt;#&lt;/a&gt; 保护模式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;保护模式是在硬件层面提供的 CPU 运行机制，是现代操作系统的根本。&lt;/li&gt;
&lt;li&gt;没有保护模式，操作系统是没有安全性可言的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;何为保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#何为保护&#34;&gt;#&lt;/a&gt; 何为保护&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;指令是存放在内存中的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定你的程序试图对操作系统的关键代码进行破坏：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mov byte ptr ds:[kernel], 0x90&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统应该如何制止？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也许这个时候有同学发炎了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“也许操作系统它能监控呢？”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;答案是，监控你程序的并不是操作系统，这种工作必须在硬件层完成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很简单的道理，实际上运行指令的是 CPU，只有 CPU 知道当前 CPU 正在做什么事，操作系统是不可能知道的
&lt;ul&gt;
&lt;li&gt;操作系统也是由 CPU 运行的指令序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;除非 CPU 提供了一种回调机制，运行任何指令都先运行操作系统的指令，但这是不现实的，对性能影响过于严重
&lt;ul&gt;
&lt;li&gt;实现一套虚拟机也可以保证安全性，但是依旧存在性能问题，也不在本文讨论范围之内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;模式之分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#模式之分&#34;&gt;#&lt;/a&gt; 模式之分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们得到了结论，保证 操作系统的安全性 这种机制，必须是硬件提供的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在早期，CPU 并未提供这种保护模式，为此才划分出了 “实模式” 与 “保护模式”&lt;/li&gt;
&lt;li&gt;在保护模式出现时，为了兼容，因此也诞生了 “虚拟 8086 模式”，但已经不重要了，也不在本文讨论范围内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在学习保护模式时也需要牢记，保护模式是硬件层的东西，切勿与操作系统混淆。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;物理内存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#物理内存&#34;&gt;#&lt;/a&gt; 物理内存&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;我们都知道，我们可见的物理内存，其实就是&lt;strong&gt;连续的、对每一个单元进行了地址编号的很大的存储器。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;数据&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xff&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x01&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;表格仅为举例，与真实物理内存布局无关&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序必须是存放在内存中，才能被 CPU&lt;strong&gt; 取指执行&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假定你是操作系统 (给你管理硬件资源)，那么多个程序又如何存放比较好呢？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;多个程序的安置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多个程序的安置&#34;&gt;#&lt;/a&gt; 多个程序的安置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可能有同学回答了：
&lt;ul&gt;
&lt;li&gt;我&lt;strong&gt;顺序加载&lt;/strong&gt;嘛，第一个程序从哪里占用到哪里，第二个程序从哪里占用到哪里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;程序&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00 ~ 0x7f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80 ~ 0xff&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 B&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如表格所述，我们成功将两个程序分别放到了不同的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样子他们就互不干扰了，我们真是个小天才。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;问题仍在&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问题仍在&#34;&gt;#&lt;/a&gt; 问题仍在&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;很遗憾，这样子的程序，运行依旧存在困难&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在编写程序的时候，无法预知程序在运行时究竟会被加载到内存的哪个位置。&lt;/li&gt;
&lt;li&gt;假设&lt;strong&gt; B&lt;/strong&gt; 选择 &lt;code&gt;0x40&lt;/code&gt;  这个地址存放一些数据，那不是正好破坏了&lt;strong&gt; A&lt;/strong&gt; 的指令序列？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为此，&lt;strong&gt;内存分段&lt;/strong&gt;诞生了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;内存分段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存分段&#34;&gt;#&lt;/a&gt; 内存分段&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果我们在编写程序的时候，任何使用内存的指令，填写的内存地址，都是一个&lt;strong&gt;偏移值&lt;/strong&gt;，让 CPU 替我们去与&lt;strong&gt;基地址&lt;/strong&gt;相加，最终得到真正的&lt;strong&gt;物理地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么不管我们的程序被加载到内存的哪个位置，只要提供一个正确的&lt;strong&gt;基地址&lt;/strong&gt;，就可以让多个程序互不干扰了！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#示例&#34;&gt;#&lt;/a&gt; 示例&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;基地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00 ~ 0x7f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80 ~ 0xff&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 B&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设&lt;strong&gt; B&lt;/strong&gt; 选择 &lt;code&gt;0x40&lt;/code&gt;  这个地址存放一些数据，我们还会破坏&lt;strong&gt; A&lt;/strong&gt; 的指令序列吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这样看上去，是不是像给&lt;strong&gt;内存分段&lt;/strong&gt;了一样？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x00 ~ 0x7f&lt;/code&gt;  看作一段，分给&lt;strong&gt;程序 A&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0x80 ~ 0xff&lt;/code&gt;  看作一段，分给&lt;strong&gt;程序 B&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;实模式下的分段机制大抵如此。&lt;/p&gt;
&lt;h1 id=&#34;段寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段寄存器&#34;&gt;#&lt;/a&gt; 段寄存器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;想来各位读者对寄存器都有所了解，既然我们需要一个容器来存放&lt;strong&gt;段的基地址&lt;/strong&gt;，寄存器自然是不错的选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是通用寄存器本身数量也不够多，再想腾出来存放&lt;strong&gt;段基址&lt;/strong&gt;，也是心有余而力不足了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此，理所当然的，就有了以&lt;strong&gt;段&lt;/strong&gt;为名的&lt;strong&gt;段寄存器&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ds寄存器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ds寄存器&#34;&gt;#&lt;/a&gt; ds 寄存器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ds，即 data segment，意为数据段&lt;/li&gt;
&lt;li&gt;咱们一看就知道，这个东西就是和&lt;strong&gt;数据&lt;/strong&gt;、&lt;strong&gt;段&lt;/strong&gt; 相关的。&lt;/li&gt;
&lt;li&gt;它也十分简单，16 位的宽度，作用就是存放数据段的基址&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实际在实模式下，物理地址的转换公式略微复杂一些&lt;br&gt;
 (ds &amp;lt;&amp;lt; 4) + address = 最终的物理地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;结合先前的示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结合先前的示例&#34;&gt;#&lt;/a&gt; 结合先前的示例&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;基地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00 ~ 0x7f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80 ~ 0xff&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 B&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;我们选择让&lt;strong&gt; B&lt;/strong&gt; 在 &lt;code&gt;0x40&lt;/code&gt;  这个位置存放一些数据&lt;/li&gt;
&lt;li&gt;而现在我们有了 ds 寄存器，只要在程序运行前初始化 ds 寄存器，就可以做到不破坏&lt;strong&gt; A&lt;/strong&gt; 的程序了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;根据段的用途进行划分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据段的用途进行划分&#34;&gt;#&lt;/a&gt; 根据段的用途进行划分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;但是这样子明显我们还需要小心翼翼，毕竟虽然不会破坏其他程序了，但不代表不会破坏自己的指令序列啊！&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;都放在一个段里，是不是不便管理？&lt;/li&gt;
&lt;li&gt;如果我们对代码和数据再做进一步的&lt;strong&gt;划分&lt;/strong&gt;，是不是更好？&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;地址&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;基地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00 ~ 0x3f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A 存放数据&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x40 ~ 0x7f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 A 存放代码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80 ~ 0xcf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 B 存放数据&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xd0 ~ 0xff&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;提供给程序 B 存放代码&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0xd0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为此，自然是可以存在更多的段寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cs(code segment)&lt;/li&gt;
&lt;li&gt;ss(stack segment)&lt;/li&gt;
&lt;li&gt;ds(data segment)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;还是先前的问题，程序&lt;strong&gt; B&lt;/strong&gt; 试图在 &lt;code&gt;0x40&lt;/code&gt;  这个地址存放数据，我们只需要让 cpu 知道，&lt;strong&gt;数据段基址&lt;/strong&gt;是 &lt;code&gt;0x80&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x80 + 0x40 = 0xc0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们只需要划分好各个段，就可以很好的让程序工作了！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cpu对内存的访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cpu对内存的访问&#34;&gt;#&lt;/a&gt; CPU 对内存的访问&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;为此，cpu 也被设计为，在&lt;strong&gt;访问任何汇编指令中显式书写的内存地址时&lt;/strong&gt;，都会先根据&lt;strong&gt;用途&lt;/strong&gt;选择&lt;strong&gt;段寄存器&lt;/strong&gt;，得到&lt;strong&gt;段基地址&lt;/strong&gt;，&lt;strong&gt;指令中的地址&lt;/strong&gt;视作&lt;strong&gt;偏移 (逻辑地址)&lt;/strong&gt;，&lt;strong&gt;运算后&lt;/strong&gt;得到&lt;strong&gt;真正的物理地址&lt;/strong&gt;，再进行&lt;strong&gt;访问&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注解&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;读写内存，可以划分为对数据段的访问&lt;br&gt;
执行指令，可以划分为对代码段的访问&lt;br&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;初探基于段的保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初探基于段的保护&#34;&gt;#&lt;/a&gt; 初探基于段的保护&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在实模式下，对于任何存在于内存中的指令序列，cpu 是&lt;strong&gt;一视同仁&lt;/strong&gt;的，ip 指哪它跑哪，埋头苦干。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统将我们的程序加载到内存，使得 cs:ip 指向我们程序的入口点之后，&lt;strong&gt;我们想干什么，就不是操作系统能说了算了&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当然我们也可以反手来一波背刺，&lt;strong&gt;捅死操作系统&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;尝试分段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试分段&#34;&gt;#&lt;/a&gt; 尝试分段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你可能想到了，啊，我们先前不是才讲过，分段不就好了吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其实所谓的分段，也是建立在大家都&lt;strong&gt;规规矩矩&lt;/strong&gt;，&lt;strong&gt;和睦相处&lt;/strong&gt;的情况下，才能最大程度上避免 &amp;quot;不小心&amp;quot; 出现的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单地说，全看编写程序的人自觉不自觉。&lt;/li&gt;
&lt;li&gt;既然操作系统能&lt;strong&gt;修改 cs、ds 段寄存器&lt;/strong&gt;，我们有何不可呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;权限的建立&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限的建立&#34;&gt;#&lt;/a&gt; 权限的建立&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，咱们既然要保证&lt;strong&gt;安全&lt;/strong&gt;，那自然就要划分哪些是应用能做的，哪些是应用不能做的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，总归要有程序去管理软硬件的，操作系统的不受限制也理所应当了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;权限划分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限划分&#34;&gt;#&lt;/a&gt; 权限划分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;既然有了&lt;strong&gt;不能做&lt;/strong&gt;和&lt;strong&gt;能做&lt;/strong&gt;之分，并且还有了 &amp;quot;区别对待&amp;quot;，&lt;strong&gt;权限&lt;/strong&gt;自然也就建立起来了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;至此，咱们初步确定了&lt;strong&gt;权限&lt;/strong&gt;的划分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规应用，拥有&lt;strong&gt;部分权限&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;操作系统，拥有&lt;strong&gt;所有权限&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;段机制的延展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#段机制的延展&#34;&gt;#&lt;/a&gt; 段机制的延展&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;咱们最先想到的，最不能让应用去乱搞的是什么呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先就是不能让应用去破坏咱们的操作系统，咱们首先要把自己&lt;strong&gt;保护&lt;/strong&gt;起来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果应用能随意修改操作系统的指令序列，那么所谓的保护将毫无意义&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;初步构想&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初步构想&#34;&gt;#&lt;/a&gt; 初步构想&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们可以沿用实模式下存在的段机制，为段设立权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用的指令序列处在一个&lt;strong&gt;权限受限&lt;/strong&gt;的段中，&lt;strong&gt;不允许访问除自己段内的任何内存。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而操作系统就处在拥有&lt;strong&gt;最高特权&lt;/strong&gt;的段中，&lt;strong&gt;掌有生杀大权&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="保护模式" />
        <category term="Windows内核" />
        <updated>2023-02-17T14:34:48.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/91e5.html</id>
        <title>【Git】远程仓库登录</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/91e5.html"/>
        <content type="html">&lt;h2 id=&#34;github身份验证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#github身份验证&#34;&gt;#&lt;/a&gt; Github 身份验证&lt;/h2&gt;
&lt;p&gt;Github 通过 SSH 登录，通过提前在 Github 上设置公钥，以及本地存储的私钥，使得 Github 能够验证身份的合法性。&lt;/p&gt;
&lt;h2 id=&#34;配置用户名和邮箱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置用户名和邮箱&#34;&gt;#&lt;/a&gt; 配置用户名和邮箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;&amp;lt;用户名&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email &amp;quot;&amp;lt;邮箱地址&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看配置&#34;&gt;#&lt;/a&gt; 查看配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;密钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密钥&#34;&gt;#&lt;/a&gt; 密钥&lt;/h2&gt;
&lt;p&gt;生成密钥对：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;&amp;lt;邮箱地址|用户名|...&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;放置在～/.ssh 目录中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config 文件指定有效的密钥文件&lt;/li&gt;
&lt;li&gt;Windows 下可以在 Git Bash 中查看路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认公钥文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id_rsa.pub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认私钥文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id_rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开公钥文件，将其复制。&lt;/p&gt;
&lt;h2 id=&#34;设置公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置公钥&#34;&gt;#&lt;/a&gt; 设置公钥&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开 Github&lt;/li&gt;
&lt;li&gt;在个人设置 -&amp;gt; SSH and GPG keys -&amp;gt; SSH keys 中，添加刚刚复制的公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;验证登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证登录&#34;&gt;#&lt;/a&gt; 验证登录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh -T git@github.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出现 “Hi xxxx! …” 表示配置完成&lt;/p&gt;
</content>
        <category term="Git" />
        <category term="版本管理" />
        <updated>2023-01-31T01:05:39.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/75b5.html</id>
        <title>【C/C++逆向】AMD64架构下MSVC编译器的调用约定与栈帧分析</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/75b5.html"/>
        <content type="html"></content>
        <updated>2022-12-19T03:36:37.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5d13.html</id>
        <title>【密码学】PKI体系：谁来保证我的通信安全？</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5d13.html"/>
        <content type="html">&lt;h1 id=&#34;PKI概述&#34;&gt;&lt;a href=&#34;#PKI概述&#34; class=&#34;headerlink&#34; title=&#34;PKI概述&#34;&gt;&lt;/a&gt;PKI概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Public Key Infrastructure，即公钥基础设施。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥基础设施是一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。&lt;br&gt;PKI体系是计算机软硬件、权威机构及应用系统的结合。它为实施电子商务、电子政务、办公自动化等提供了基本的安全服务，从而使那些彼此不认识或距离很远的用户能通过信任链安全地交流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，要是光看定义能看懂的话，想必各位也不会见到这一篇文章了，贴出定义只是个人习惯，咱们往下看。&lt;/p&gt;
&lt;h1 id=&#34;明文与密文&#34;&gt;&lt;a href=&#34;#明文与密文&#34; class=&#34;headerlink&#34; title=&#34;明文与密文&#34;&gt;&lt;/a&gt;明文与密文&lt;/h1&gt;&lt;p&gt;首先咱们要知道，咱们能够阅读理解的东西是&lt;code&gt;明文&lt;/code&gt;，比如远在天边的网友给你发的一条qq消息，你看到的时候它就是明文，这样你才能看得懂你的网友想和你说些什么。&lt;/p&gt;
&lt;p&gt;当然，你看得懂，别人也看得懂，中文嘛，大家都学过。&lt;br&gt;你想着，我要是不想赤裸裸的让别人窥探我的聊天内容是吧，咱们多少还是希望能有些隐私的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;自然而然的出现了。&lt;/p&gt;
&lt;p&gt;我们通过某种方法对明文原本的信息进行可逆的改变，别人只要不知道我们是如何改变的，就无法还原，只有我们才能够还原为明文。&lt;br&gt;加密后无法直接理解的信息，我们就叫做&lt;code&gt;密文&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;前置知识&#34;&gt;&lt;a href=&#34;#前置知识&#34; class=&#34;headerlink&#34; title=&#34;前置知识&#34;&gt;&lt;/a&gt;前置知识&lt;/h1&gt;&lt;h2 id=&#34;密钥&#34;&gt;&lt;a href=&#34;#密钥&#34; class=&#34;headerlink&#34; title=&#34;密钥&#34;&gt;&lt;/a&gt;密钥&lt;/h2&gt;&lt;p&gt;通常也是一组数据，就像现实世界的钥匙，是&lt;strong&gt;加锁/解锁&lt;/strong&gt;的关键。&lt;/p&gt;
&lt;h2 id=&#34;对称加密&#34;&gt;&lt;a href=&#34;#对称加密&#34; class=&#34;headerlink&#34; title=&#34;对称加密&#34;&gt;&lt;/a&gt;对称加密&lt;/h2&gt;&lt;p&gt;首先创建一把&lt;strong&gt;密钥&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过这把密钥可以加密明文；&lt;br&gt;对密文的解密也需要&lt;strong&gt;同样的一把密钥&lt;/strong&gt;。&lt;br&gt;&lt;em&gt;如同常见的钥匙和锁一般，加锁和解锁都是同一把钥匙。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷：在公共的网络环境中，密钥难以安全传递。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;非对称加密&#34;&gt;&lt;a href=&#34;#非对称加密&#34; class=&#34;headerlink&#34; title=&#34;非对称加密&#34;&gt;&lt;/a&gt;非对称加密&lt;/h2&gt;&lt;p&gt;创建两把密钥，一把公钥，一把私钥，&lt;strong&gt;这两把密钥是对应关系&lt;/strong&gt;。&lt;br&gt;公钥是公开的，任何人都可以获得。&lt;br&gt;私钥是私有的，只有创建者持有。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;公钥加密的东西，只有对应的私钥能够解密；&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;私钥加密的东西，只有对应的公钥能够解密。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;相对对称加密而言，不存在密钥无法安全传递的问题。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷：基本上基于数学难题，加密速度十分缓慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;信息摘要&#34;&gt;&lt;a href=&#34;#信息摘要&#34; class=&#34;headerlink&#34; title=&#34;信息摘要&#34;&gt;&lt;/a&gt;信息摘要&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据的指纹，具有不可逆的性质。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般输出的指纹数据长度都是固定的，便于传输。&lt;br&gt;通常可以用于验证数据是否被篡改。&lt;br&gt;&lt;strong&gt;&lt;em&gt;数据被篡改一位，都会导致计算出来的信息摘要不同。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;安全通信&#34;&gt;&lt;a href=&#34;#安全通信&#34; class=&#34;headerlink&#34; title=&#34;安全通信&#34;&gt;&lt;/a&gt;安全通信&lt;/h1&gt;&lt;p&gt;有了上述基础，你能否在公共网络中构建安全通信信道呢？&lt;br&gt;我们来尝试一下。&lt;/p&gt;
&lt;h2 id=&#34;基本框架：非对称加密&#34;&gt;&lt;a href=&#34;#基本框架：非对称加密&#34; class=&#34;headerlink&#34; title=&#34;基本框架：非对称加密&#34;&gt;&lt;/a&gt;基本框架：非对称加密&lt;/h2&gt;&lt;p&gt;当然，我们的数据不能在公网上裸奔，因此首先就需要对明文进行加密。&lt;/p&gt;
&lt;p&gt;但此时我们难以解决密钥安全传输的问题，故需要引入&lt;code&gt;非对称加密&lt;/code&gt;。&lt;br&gt;&lt;em&gt;你可能会想到，如果我把密钥也加密呢？那如何解密加密后的密钥呢？是不是也需要一把新的密钥？这把密钥如何传输呢？&lt;/em&gt;&lt;br&gt;&lt;em&gt;往复下去也不会有变化，并没有改变无法安全传输密钥的根本问题。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;通信过程&#34;&gt;&lt;a href=&#34;#通信过程&#34; class=&#34;headerlink&#34; title=&#34;通信过程&#34;&gt;&lt;/a&gt;通信过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;假设A、B需要通信，各自创建私钥与公钥，并且交换公钥；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥是可以公开的，任何人都可以持有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A向B发送消息之前，使用B的公钥加密，再发送给B；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密文只有B能够解密，因为只有B持有对应的私钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B向A发送消息也是如此，使用A的公钥加密，再发送给A。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第一个问题：计算效率&#34;&gt;&lt;a href=&#34;#第一个问题：计算效率&#34; class=&#34;headerlink&#34; title=&#34;第一个问题：计算效率&#34;&gt;&lt;/a&gt;第一个问题：计算效率&lt;/h3&gt;&lt;p&gt;在基础中提及到，非对称加密的计算缓慢，假设传输的数据较多，那么需要消耗大量的时间进行计算。&lt;/p&gt;
&lt;h2 id=&#34;性能提高：引入对称加密&#34;&gt;&lt;a href=&#34;#性能提高：引入对称加密&#34; class=&#34;headerlink&#34; title=&#34;性能提高：引入对称加密&#34;&gt;&lt;/a&gt;性能提高：引入对称加密&lt;/h2&gt;&lt;p&gt;此时，对称加密计算效率高的特性能够完美弥补这个缺陷，故我们还是需要引入&lt;code&gt;对称加密&lt;/code&gt;：&lt;br&gt;&lt;em&gt;加密方案基本上都会首先基于流行的&lt;code&gt;加密算法&lt;/code&gt;，只有这种经过全世界密码学家考验的加密算法才是可靠的。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;通信过程改进&#34;&gt;&lt;a href=&#34;#通信过程改进&#34; class=&#34;headerlink&#34; title=&#34;通信过程改进&#34;&gt;&lt;/a&gt;通信过程改进&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;A、B交换公钥；&lt;/li&gt;
&lt;li&gt;A生成本次通信的密钥，使用B的公钥加密，再将加密后的密钥发送给B；&lt;/li&gt;
&lt;li&gt;B生成本次通信的密钥，使用A的公钥加密，再将加密后的密钥发送给A；&lt;ul&gt;
&lt;li&gt;此步并不一定需要，可以共用一把对称加密密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各自用私钥解密密钥，往后的通信都使用这把密钥加密/解密。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二个问题：中间人攻击&#34;&gt;&lt;a href=&#34;#第二个问题：中间人攻击&#34; class=&#34;headerlink&#34; title=&#34;第二个问题：中间人攻击&#34;&gt;&lt;/a&gt;第二个问题：中间人攻击&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;A、B交换公钥；&lt;ul&gt;
&lt;li&gt;假设A、B交换公钥的通信信道被C窃听了，C也生成了自己的公钥与私钥对，将A、B的公钥保存起来，并将信道上的A、B的公钥替换为C的公钥发给对方；&lt;/li&gt;
&lt;li&gt;A收到的是C的公钥，B收到的也是C的公钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A、B交换密钥；&lt;ul&gt;
&lt;li&gt;A使用C的公钥加密密钥，发往B；&lt;ul&gt;
&lt;li&gt;依旧被C劫持，C通过私钥解密，得到原始密钥，再将其通过B的公钥加密，替换后发往B。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B收到B的公钥加密的密钥，用B的私钥解密，得到密钥。&lt;/li&gt;
&lt;li&gt;B发往A同理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程中，A和B看似正常安全的通信，实际上自以为隐私的通信信道早已被C看得干干净净。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于A而言，&lt;strong&gt;C伪造身份为B与A通信&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;对于B而言，&lt;strong&gt;C伪造身份为A与B通信&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;避免篡改：数据指纹&#34;&gt;&lt;a href=&#34;#避免篡改：数据指纹&#34; class=&#34;headerlink&#34; title=&#34;避免篡改：数据指纹&#34;&gt;&lt;/a&gt;避免篡改：数据指纹&lt;/h2&gt;&lt;p&gt;你可能会想到，既然信息摘要可以避免数据被篡改，那么能不能在发送公钥的时候顺带发送信息摘要来避免中间人伪造身份？&lt;/p&gt;
&lt;p&gt;实际上是不行的，因为&lt;strong&gt;中间人完全可以重新使用相同的信息摘要算法重新计算被替换的公钥，得到新的指纹，将信息摘要也替换。&lt;/strong&gt;&lt;br&gt;&lt;em&gt;而接收者无法辨别信息摘要是否已被替换。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;验明身份：数字证书&#34;&gt;&lt;a href=&#34;#验明身份：数字证书&#34; class=&#34;headerlink&#34; title=&#34;验明身份：数字证书&#34;&gt;&lt;/a&gt;验明身份：数字证书&lt;/h2&gt;&lt;p&gt;首先想一下，现实世界咱们是如何证明你是你呢？&lt;br&gt;多数情况下都是亮出身份证，对吧，我们有国家颁发的身份证。&lt;br&gt;因为是国家颁发的，有&lt;code&gt;权威性&lt;/code&gt;和&lt;code&gt;公信力&lt;/code&gt;，大家伙都相信和认可。&lt;/p&gt;
&lt;p&gt;在公网上证明你是你的话，也得拿出证据说话，随便说说我是不认的，谁知道你是不是中间人那个坏蛋呢？&lt;/p&gt;
&lt;p&gt;因此，证书自然就出现了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;证书&#34;&gt;&lt;a href=&#34;#证书&#34; class=&#34;headerlink&#34; title=&#34;证书&#34;&gt;&lt;/a&gt;证书&lt;/h3&gt;&lt;p&gt;证书类似”身份证”，用于证明某个人(公司)的身份，如：&lt;/p&gt;
&lt;p&gt;所有者：ABC, www.abc.com&lt;br&gt;公钥：xxxxxx&lt;br&gt;颁发CA机构：XXX&lt;br&gt;…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;证书当中记录了一些必要的信息，当然，就简简单单的在证书里写我是XXX，那肯定也不行，因为一点可信度都没有，中间人也可以给你发这么一串数据，说他也是XXX，你是信还是不信呢？&lt;/p&gt;
&lt;p&gt;因此引入证书也不可避免的产生了一个问题：&lt;strong&gt;证书也能被替换&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;拒绝伪造：数字签名&#34;&gt;&lt;a href=&#34;#拒绝伪造：数字签名&#34; class=&#34;headerlink&#34; title=&#34;拒绝伪造：数字签名&#34;&gt;&lt;/a&gt;拒绝伪造：数字签名&lt;/h2&gt;&lt;p&gt;上面我们提到过，私钥加密的东西，只有公钥才能解密。&lt;br&gt;咋一看好像没什么鸡蛋饼用，我这私钥加密，所有人都能解密，这有个啥用啊？&lt;br&gt;实际上，这也是验证身份的核心关键：&lt;code&gt;不可抵赖性&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果我们将这个特性应用到证书上呢？&lt;/p&gt;
&lt;p&gt;A的私钥只有A持有，那么A用私钥加密的A证书，只有用A的公钥才能正确解密。&lt;br&gt;B想要判断A的身份，只需要用A的公钥解密A证书，如果能够正确解密的话，那么这个证书就一定是A的，别人无法伪造的东西，A自然无法抵赖，也就验明了A的身份。&lt;/p&gt;
&lt;p&gt;我们就把经过公钥加密的证书叫做&lt;code&gt;数字证书&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而用私钥加密数据的过程就叫做&lt;code&gt;数字签名&lt;/code&gt;&lt;br&gt;&lt;strong&gt;数字签名具备不可抵赖性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;咋一看好像已经完结撒花了，实际上还是无法真正避免中间人攻击。&lt;br&gt;因为A的公钥需要在公网上传播，就存在被C偷天换日，替换为C的公钥的可能。&lt;/p&gt;
&lt;p&gt;B以为拿到的是A的公钥，实际上还是C的公钥，因此C用C的私钥伪造数字证书再发给B，B当然能够正确解密，这也给了B一个错觉：和我通信的A的身份没有问题。&lt;br&gt;所以A和B见面后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B：就是你，A！你为什么要骂我？我要和你绝交！&lt;br&gt;A：？？？？啥啊，我说啥了！&lt;br&gt;B：还想抵赖？我都能用你的公钥解开你的数字证书！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;无奈之举：本地预装&#34;&gt;&lt;a href=&#34;#无奈之举：本地预装&#34; class=&#34;headerlink&#34; title=&#34;无奈之举：本地预装&#34;&gt;&lt;/a&gt;无奈之举：本地预装&lt;/h2&gt;&lt;p&gt;哪里都有C这个小人，咱们实在是没法子了，干脆直接在本地计算机中预先存放公钥吧，这样C就没有替换公钥的机会了。&lt;/p&gt;
&lt;p&gt;但是这样又会出现其他的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何提前预装需要与其通信的对象的公钥？这就跟如何安全交换对称加密密钥是一个难度了，属于物理层面的难题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最终解法：权威机构&#34;&gt;&lt;a href=&#34;#最终解法：权威机构&#34; class=&#34;headerlink&#34; title=&#34;最终解法：权威机构&#34;&gt;&lt;/a&gt;最终解法：权威机构&lt;/h2&gt;&lt;p&gt;人们怎么能被C这个小人打败呢？于是，这么一套验证体系出现了：&lt;br&gt;&lt;strong&gt;在本地计算机中预装&lt;code&gt;权威机构CA&lt;/code&gt;颁发的&lt;code&gt;数字证书&lt;/code&gt;，通过CA的数字证书来验证经过了公网的数字证书是否可信，避免中间人攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;CA证书授权中心&#34;&gt;&lt;a href=&#34;#CA证书授权中心&#34; class=&#34;headerlink&#34; title=&#34;CA证书授权中心&#34;&gt;&lt;/a&gt;CA证书授权中心&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;CA证书授权(CertificateAuthority)中心&lt;/code&gt;是数字证书发行的唯一机构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CA机构持有自己的公钥与私钥&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥是公开的，会包含在&lt;strong&gt;数字证书&lt;/strong&gt;内，预置到操作系统/浏览器中。&lt;ul&gt;
&lt;li&gt;即CA机构会生成一份自己的明文证书(里面的公钥就是公开的公钥)，然后自己用私钥&lt;strong&gt;签名&lt;/strong&gt;(又或者是交给其他CA机构去签名)，自签发的数字证书就应该是根证书，不管是自签发还是其他CA机构签发的，最后都会得到&lt;strong&gt;数字证书&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;私钥由CA机构自行保存。&lt;ul&gt;
&lt;li&gt;这样子就保证了数字签名的可靠，因为别人是无法得到CA机构的私钥的，也就无法伪造该CA机构所签发的数字证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;签发数字证书&#34;&gt;&lt;a href=&#34;#签发数字证书&#34; class=&#34;headerlink&#34; title=&#34;签发数字证书&#34;&gt;&lt;/a&gt;签发数字证书&lt;/h2&gt;&lt;p&gt;B假定是服务器，他如果想和客户端建立安全信道，得到客户端的信任，就需要先向CA机构申请数字证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B提交证书；&lt;/li&gt;
&lt;li&gt;CA机构对证书进行签名，得到数字证书，交回给B。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签发后的数字证书包含了：&lt;strong&gt;证书内容&lt;/strong&gt;、&lt;strong&gt;摘要算法&lt;/strong&gt;、&lt;strong&gt;加密摘要信息&lt;/strong&gt; 三部分。&lt;/p&gt;
&lt;p&gt;CA机构使用摘要算法对证书内容进行计算，得到摘要信息，再对摘要信息使用私钥进行加密。&lt;br&gt;&lt;em&gt;为什么不直接加密证书内容？因为加密摘要信息可以减少计算量，同样也可以保证数字证书不被篡改。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;客户端收到B的数字证书时，就会先使用预装的CA数字证书(包含了CA的公钥)对加密摘要信息进行解密，同时用摘要算法对证书内容进行计算，得到摘要信息。&lt;br&gt;最后比较解密后的摘要信息与计算得出的摘要信息，相同则表示数据并未被篡改。&lt;/p&gt;
&lt;p&gt;看到这里想必有些读者就迷糊了：&lt;br&gt;&lt;strong&gt;&lt;em&gt;CA机构颁发的数字证书和服务器的数字证书到底是不是一回事呢？&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;可以说是一回事，他们是逐层签发的关系。&lt;br&gt;我先信任我计算机中的数字证书，而服务器发过来的数字证书又是我所信任的数字证书对应的私钥(CA机构持有)签发的(通过我所信任的数字证书进行验证)，故我再信任服务器发过来的数字证书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;可为什么预装的是数字证书，而不是直接是公钥呢？&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;有更多的信息需要存放，因此将其封装是更好的选择。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;为什么是服务器申请数字证书，客户端不需要吗？&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;首先数字证书通常需要向权威机构申请，并且是需要钱的；&lt;br&gt;其次也很难为全世界所有计算机都分配数字证书；&lt;br&gt;最后通常也无需验证客户端的身份，因为服务器所服务的对象绝大多数应用场景下并不特指某个客户端(不管你是正常用户还是坏蛋，我都一视同仁)，只需要客户端认证服务器的身份就足够了。&lt;/p&gt;
&lt;h1 id=&#34;验证过程&#34;&gt;&lt;a href=&#34;#验证过程&#34; class=&#34;headerlink&#34; title=&#34;验证过程&#34;&gt;&lt;/a&gt;验证过程&lt;/h1&gt;&lt;h2 id=&#34;签名：&#34;&gt;&lt;a href=&#34;#签名：&#34; class=&#34;headerlink&#34; title=&#34;签名：&#34;&gt;&lt;/a&gt;签名：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;A生成证书(填好个人信息)，发给CA机构。&lt;/li&gt;
&lt;li&gt;CA机构通过散列函数对明文证书进行计算，得到明文证书的信息摘要。&lt;/li&gt;
&lt;li&gt;CA机构通过持有的私钥加密信息摘要，其结果即&lt;strong&gt;数字签名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将明文证书以及数字签名打包，即得到&lt;strong&gt;数字证书&lt;/strong&gt;，再发给申请者A。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;验签：&#34;&gt;&lt;a href=&#34;#验签：&#34; class=&#34;headerlink&#34; title=&#34;验签：&#34;&gt;&lt;/a&gt;验签：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;B收到A发来的&lt;strong&gt;数字证书&lt;/strong&gt;，包含了明文证书与CA机构签发的&lt;strong&gt;数字签名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;B通过本地预置的CA机构&lt;strong&gt;数字证书&lt;/strong&gt;中的公钥，对&lt;strong&gt;数字签名&lt;/strong&gt;进行解密，得到信息摘要&lt;/li&gt;
&lt;li&gt;B通过散列函数对明文证书进行计算，得到明文证书的信息摘要。&lt;/li&gt;
&lt;li&gt;比较计算明文证书得到的信息摘要与解密&lt;strong&gt;数字签名&lt;/strong&gt;得到的信息摘要，不同则表示明文证书被篡改了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;补充&#34;&gt;&lt;a href=&#34;#补充&#34; class=&#34;headerlink&#34; title=&#34;补充&#34;&gt;&lt;/a&gt;补充&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CA是有能力进行中间人攻击的，因为CA持有大家伙本地计算机预置公钥的私钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA叫做CA的意义就在这里，CA机构必须是权威公信的，不能做出这种行为，否则将会失去大家伙的信任。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数字签名并非只能用于签名明文证书得到数字证书，可以用于签名任何数据防止篡改。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;证书信任链&#34;&gt;&lt;a href=&#34;#证书信任链&#34; class=&#34;headerlink&#34; title=&#34;证书信任链&#34;&gt;&lt;/a&gt;证书信任链&lt;/h1&gt;&lt;p&gt;如公司ABC的数字证书，就是由A机构签发的，需要用A机构的数字证书来验签；&lt;br&gt;而A机构的数字证书又是B机构签发的，需要用B机构的数字证书来验签；&lt;br&gt;这样就形成了信任链。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信任过程就是逐层向上的验签，直到根证书(Root，即自签名的证书)为止；&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;对根证书只能无条件信任。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;WindowsPE文件数字签名简述&#34;&gt;&lt;a href=&#34;#WindowsPE文件数字签名简述&#34; class=&#34;headerlink&#34; title=&#34;WindowsPE文件数字签名简述&#34;&gt;&lt;/a&gt;WindowsPE文件数字签名简述&lt;/h1&gt;&lt;p&gt;Windows的PE文件如果存在数字签名，那么在其安全目录中，即包含了数字证书，再将PE文件散列值进行数字签名(由PE文件数字证书的所有者签名)，同样也包含在内。&lt;br&gt;首先通过本地预置数字证书证明PE文件中数字证书的可靠性，再通过PE文件中的数字证书的公钥解密(验签)数字签名，得到正确的散列值，再计算PE文件的散列值进行比较。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a href=&#34;#参考文献&#34; class=&#34;headerlink&#34; title=&#34;参考文献&#34;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sky8336/article/details/113696551&#34;&gt;https://blog.csdn.net/sky8336/article/details/113696551&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/43789231&#34;&gt;https://zhuanlan.zhihu.com/p/43789231&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="密码学" />
        <category term="PKI" />
        <category term="证书" />
        <category term="签名" />
        <updated>2022-12-08T07:31:19.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/819.html</id>
        <title>【动手写ToyLang】6-虚拟机设计</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/819.html"/>
        <content type="html">&lt;h1 id=&#34;所谓解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#所谓解释器&#34;&gt;#&lt;/a&gt; 所谓 &amp;quot;解释器&amp;quot;&lt;/h1&gt;
&lt;p&gt;我们除了能对遵循 ToyLang 语法的源文件编译之外，还要能够执行编译的结果。&lt;br&gt;
若编译结果需要由其他程序负责执行，该程序便可称之为解释器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如先前提及的 AST 解释器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;百度百科上对解释器的定义也较为模糊：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释器（英语：Interpreter），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照百度百科的定义，一行一行动态执行高级编程语言的程序，才能算解释器。&lt;br&gt;
但是以现在常见的编程语言，如 Python、Java 等也在某些情况下会被定义为解释型语言来看，已经与 &amp;quot;解释器&amp;quot; 的定义相违背了。&lt;br&gt;
因为 Python 和 Java 并不是逐行解释源代码的，实际上得以 &amp;quot;解释&amp;quot; 的是字节码，而执行字节码的程序又被称为 &amp;quot;虚拟机&amp;quot;。&lt;/p&gt;
&lt;p&gt;我的个人理解是，“解释器”、&amp;quot;解释型语言&amp;quot; 等名词的诞生，或许是为了与在当时已成体系的本地编译型语言进行区分，不过历史是否如此我也不好追溯了。&lt;/p&gt;
&lt;p&gt;因此，不必过度纠结 &amp;quot;解释器&amp;quot; 和 &amp;quot;虚拟机&amp;quot;，可以简单理解成解释器是一种笼统的统称，虚拟机是一种具体的实现，AST 解释器则是另一种实现，最终目标都是为了使得源代码得以以某种方式运行起来。&lt;/p&gt;
&lt;h1 id=&#34;虚拟机简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟机简述&#34;&gt;#&lt;/a&gt; 虚拟机简述&lt;/h1&gt;
&lt;p&gt;想必各位读者读者也经常见过&lt;strong&gt;虚拟机&lt;/strong&gt;这个词。&lt;/p&gt;
&lt;p&gt;咱们的 ToyLang 不选择直接解释 AST，而是设计虚拟机以执行编译结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟机在不同场景下，所代指的东西存在差异，此处仅解释在编译原理中虚拟机的定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;实际上，虚拟机的开发应该是在更靠后一些的章节中讲述，在编写指令生成时顺带完成虚拟机。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;不过虚拟机的编写并不复杂，并且相对独立，因此就提前将其设计好，代码生成时以我们所设计的虚拟机为准去生成代码，有需要再对虚拟机进行修改与补充。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们并不选择生成本地代码 (与机器相关的机器指令)，而是生成一种被称为 &lt;code&gt;字节码&lt;/code&gt; 的编译产物。&lt;/p&gt;
&lt;p&gt;如果读者曾经学习过 &lt;code&gt;Java&lt;/code&gt; ，应该或多或少听过这种说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 并不直接生成 &lt;code&gt;机器指令&lt;/code&gt; ，而是生成 &lt;code&gt;字节码&lt;/code&gt; ，交给 &lt;code&gt;JVM&lt;/code&gt;  去执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以我个人的理解看来， &lt;code&gt;机器指令&lt;/code&gt; 和 &lt;code&gt;字节码&lt;/code&gt; 并没有特别多的区别，只不过负责执行的对象不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是直接由硬件执行&lt;/li&gt;
&lt;li&gt;一个是模拟了硬件执行指令的流程的程序，自己设计了一套指令集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，我们所做的也与 &lt;code&gt;Java&lt;/code&gt;  类似，我们也会设计 ToyLang 所生成的字节码，以及执行字节码的虚拟机。&lt;br&gt;
当然这个虚拟机你要叫什么都可以，我在这里就把它叫成 &lt;code&gt;TVM(Toy Virtual Machine)&lt;/code&gt; ，&lt;/p&gt;
&lt;h1 id=&#34;tvm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tvm&#34;&gt;#&lt;/a&gt; TVM&lt;/h1&gt;
&lt;p&gt;我们的 &lt;code&gt;TVM&lt;/code&gt;  设计十分简单，只有十几条指令，但也足够我们使用了。&lt;/p&gt;
&lt;p&gt;为了实现更加简单， &lt;code&gt;TVM&lt;/code&gt;  被设计为基于栈的虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;指令集设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令集设计&#34;&gt;#&lt;/a&gt; 指令集设计&lt;/h2&gt;
&lt;h3 id=&#34;指令结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令结构&#34;&gt;#&lt;/a&gt; 指令结构&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;长度&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Reserved&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1bit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保留位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opcode&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7bit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Immediate&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;立即数，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;opcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#opcode&#34;&gt;#&lt;/a&gt; Opcode&lt;/h3&gt;
&lt;p&gt;Opcode，即操作码，是指令的一部分，在虚拟机的指令解码器在会根据指令的 Opcode 来进行不同的操作。&lt;br&gt;
以下是 TVM 指令集的 Opcode 表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;助记符&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;编码&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;停止虚拟机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x01&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;空指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pushk&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x02&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将常量推入栈顶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pushv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x03&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将变量推入栈顶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x04&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;弹出栈顶值并抛弃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;popv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x05&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;弹出栈顶值并保存到变量中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x06&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 + stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x07&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 - stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;mul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 * stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;div&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x09&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 /stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;call&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ret&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数调用返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ne&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;eq&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0d&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0e&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;le&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小于等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;gt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ge&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大于等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;jcf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;条件为否则跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;jmp&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无条件跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;toylang-源码-最终转换为-虚拟机指令的简单示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#toylang-源码-最终转换为-虚拟机指令的简单示例&#34;&gt;#&lt;/a&gt; ToyLang 源码 最终转换为 虚拟机指令的简单示例&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if a == 1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;a==1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;a!=1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pushv a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pushk 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eq&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jcf .else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jmp .end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.end:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-12-07T16:24:27.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/41fe.html</id>
        <title>【保护模式】x64下定位随机页表基址的思路</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/41fe.html"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;昨天在看周哥讲 x64 内核的时候，得知了 windows10 的某个版本开始，页表基址不再固定了。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;今天晚上突然有了个思路，就动手把他敲出来了，这种思路是不是已经烂大街了我也不确定，就当发出来学习交流吧。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;随机页表基址原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随机页表基址原理&#34;&gt;#&lt;/a&gt; 随机页表基址原理&lt;/h1&gt;
&lt;p&gt;这里用 x86 的 10-10-12 分页举例吧，比较好理解，理解了 x64 的也差不多的&lt;/p&gt;
&lt;p&gt;启用了保护模式和分页机制后，咱就不能直接访问物理地址了，都会被 MMU 当作虚拟地址进行转换。&lt;/p&gt;
&lt;p&gt;但是 cr3 存的又是物理地址，不能直接操作页表了，那咋办呢？&lt;/p&gt;
&lt;p&gt;聪明的前辈们，选择在页目录表中选择一项 (共 1024 项，每一项 4 字节)，使其存储的物理地址与页目录表的基址 (cr3) 相同，这样子就可以构造一个访问页表的虚拟地址了，大概就是&lt;strong&gt;让 cpu 在地址转换的过程中绕圈圈&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画个图吧&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/41fe/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定位思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位思路&#34;&gt;#&lt;/a&gt; 定位思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x64 也必然是随机选择 PXT 的其中一项 PXE 来存储 PXT 的物理地址，实现的随机页表基址&lt;/li&gt;
&lt;li&gt;那么就可以通过&lt;strong&gt;构造所有可能指向 PXT 的虚拟地址 (共 512 项)&lt;/strong&gt;，转换为物理地址，再与 cr3 比较，最终得到正确的 PXT 基址。&lt;/li&gt;
&lt;li&gt;只要知道了存储 PXT 的物理地址的 PXE 的 PXI，构造 PPT/PDT/PTT 基址都很简单了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h1&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PVOID &lt;span class=&#34;title&#34;&gt;GetPXTBase&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	UINT64 cr3 = __readcr3();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;KdPrint&lt;/span&gt;((&lt;span class=&#34;string&#34;&gt;&amp;quot;yuyu:cr3:%p\n&amp;quot;&lt;/span&gt;, cr3));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (UINT64 i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 通过PXI构造虚拟地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		PVOID pxtBase = (PVOID)(&lt;span class=&#34;number&#34;&gt;0xffff000000000000&lt;/span&gt; | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;39&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		PHYSICAL_ADDRESS physical = &lt;span class=&#34;built_in&#34;&gt;MmGetPhysicalAddress&lt;/span&gt;(pxtBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;KdPrint&lt;/span&gt;((&lt;span class=&#34;string&#34;&gt;&amp;quot;yuyu:i:%d 物理:%p 虚拟:%p\n&amp;quot;&lt;/span&gt;, i, physical.QuadPart, pxtBase));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cr3 == physical.QuadPart) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; pxtBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/41fe/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结尾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h1&gt;
&lt;p&gt;理解有限，如有错误，还请指正&lt;/p&gt;
&lt;h1 id=&#34;2022514补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2022514补充&#34;&gt;#&lt;/a&gt; 2022/5/14 补充&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;其实除开这个之外，我先想到的是另一个思路，即&lt;strong&gt;构造所有可能存储 PXT 的物理地址的 PXE 的虚拟地址&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;依旧是 512 项，探测地址是否可访问，读取 8 字节；&lt;/li&gt;
&lt;li&gt;将其当作 PXE，取出物理页面基址，再与 cr3 进行比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是这种方法有概率出现问题，即存放的数据可能正好与 cr3 相同，但所在页面并不是 PXT。
&lt;ul&gt;
&lt;li&gt;因此我就没有写出来，不过我想了一下，还是贴出来了，也算是一种思路嘛。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="保护模式" />
        <category term="Windows内核" />
        <updated>2022-12-02T08:21:05.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/329c.html</id>
        <title>【动手写ToyLang】5.四则表达式解析与运算</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/329c.html"/>
        <content type="html">&lt;h1 id=&#34;准备冻手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备冻手&#34;&gt;#&lt;/a&gt; 准备冻手&lt;/h1&gt;
&lt;p&gt;理论讲那么多，想必大家也犯困了，马上就到冻手环节了，本节我们会实现一个支持括号的四则表达式编译器 &amp;amp; AST 解释器，用以验证我们所学习的知识。&lt;/p&gt;
&lt;h1 id=&#34;ebnf文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf文法&#34;&gt;#&lt;/a&gt; EBNF 文法&lt;/h1&gt;
&lt;p&gt;这里把本节代码所参考的 EBNF 文法贴上。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = parenexp &amp;#123;oper1 parenexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;parenexp = &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt; addexp &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt; | numexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numexp = number&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在上节文法的基础上稍作修改，支持了括号。&lt;/p&gt;
&lt;h1 id=&#34;ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast&#34;&gt;#&lt;/a&gt; AST&lt;/h1&gt;
&lt;p&gt;在编写语法分析器之前，我们需要先定义好每个 AST 节点 (符号) 的结构。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\ast\exp.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExpType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kAdd,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kMul,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kNum,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kParen,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 表达式抽象基类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exp&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 加法表达式节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MulExp&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AddExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AddExp&lt;/span&gt;(std::unique_ptr&amp;lt;MulExp&amp;gt; t_leftMulExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;std::unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_mulExpList);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;MulExp&amp;gt; leftMulExp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;std::unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt; mulExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 乘法表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParenExp&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MulExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;MulExp&lt;/span&gt;(std::unique_ptr&amp;lt;ParenExp&amp;gt; t_leftParenExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;std::unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_parenExpList);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;ParenExp&amp;gt; leftParenExp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;std::unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt; parenExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 括号表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParenExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ParenExp&lt;/span&gt;(std::unique_ptr&amp;lt;Exp&amp;gt; texp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;Exp&amp;gt; exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 数值表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NumExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NumExp&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t_num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace ast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们创建了四个类用于描述 AST 节点：&lt;br&gt;
 &lt;code&gt;Exp&lt;/code&gt;  是抽象基类，只是为了让我们的实现更加优雅，实际描述节点的是下列四个类；&lt;br&gt;
 &lt;code&gt;AddExp&lt;/code&gt; 、 &lt;code&gt;MulExp&lt;/code&gt; 、 &lt;code&gt;ParenExp&lt;/code&gt; 、 &lt;code&gt;NumExp&lt;/code&gt;  皆继承自 &lt;code&gt;Exp&lt;/code&gt; ，各自表示三个终结符节点和一个非终结符节点。&lt;/p&gt;
&lt;p&gt;其中，派生类的成员变量存储了节点的连接关系与值。&lt;br&gt;
暂时看不懂也没关系，你可以先拷贝代码，理解的关键在于语法分析器。&lt;/p&gt;
&lt;p&gt;接下来是 AST 节点的实现，就是类的构造与析构，并没有什么特别的代码，大致浏览下即可。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\ast\exp.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; std::unique_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;AddExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AddExp::&lt;span class=&#34;built_in&#34;&gt;AddExp&lt;/span&gt;(unique_ptr&amp;lt;MulExp&amp;gt; t_leftMulExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_mulExpList) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;leftMulExp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_leftMulExp)), &lt;span class=&#34;built_in&#34;&gt;operList&lt;/span&gt;(t_operList), &lt;span class=&#34;built_in&#34;&gt;mulExpList&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_mulExpList)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;MulExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MulExp::&lt;span class=&#34;built_in&#34;&gt;MulExp&lt;/span&gt;(unique_ptr&amp;lt;ParenExp&amp;gt; t_leftParenExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_parenExoList) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;leftParenExp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_leftParenExp)), &lt;span class=&#34;built_in&#34;&gt;operList&lt;/span&gt;(t_operList), &lt;span class=&#34;built_in&#34;&gt;parenExpList&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_parenExoList)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;ParenExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ParenExp::&lt;span class=&#34;built_in&#34;&gt;ParenExp&lt;/span&gt;(unique_ptr&amp;lt;Exp&amp;gt; t_exp) : &lt;span class=&#34;built_in&#34;&gt;exp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_exp)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;NumExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kNum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NumExp::&lt;span class=&#34;built_in&#34;&gt;NumExp&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t_num) : &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt;(t_num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace ast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h1 id=&#34;parser&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#parser&#34;&gt;#&lt;/a&gt; Parser&lt;/h1&gt;
&lt;p&gt;我们在第 2 节已经实现了一个词法分析器，接下来我们继续完成语法分析器。&lt;/p&gt;
&lt;p&gt;以下是头文件，接下来我们把重心放到实现上。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ast/exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 语法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParserException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ParserException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parser&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Parser&lt;/span&gt;(Lexer* t_lexer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;Exp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;AddExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;MulExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;ParenExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;NumExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseNumExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer* m_lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace parser&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;解析exp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析exp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;exp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;首先我们知道，我们所编写的是四则表达式运算器，那么接收到的用户输入就是一个表达式，即非终结符 &lt;code&gt;exp&lt;/code&gt; ，因此，解析就是从 &lt;code&gt;exp&lt;/code&gt;  开始层层下降的。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;Exp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = &lt;span class=&#34;built_in&#34;&gt;ParseAddExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;().&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ParserException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Incomplete parsing&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码非常简单，根据 EBNF 描述的文法来看， &lt;code&gt;exp&lt;/code&gt;  由一个 &lt;code&gt;addexp&lt;/code&gt;  组成；&lt;br&gt;
因此我们调用 &lt;code&gt;ParseAddExp&lt;/code&gt;  去解析 &lt;code&gt;addexp&lt;/code&gt; ，返回一个 &lt;code&gt;AddExp&lt;/code&gt;  类对象，返回就表示解析完成了。&lt;/p&gt;
&lt;p&gt;接下来我们前瞻一个 token，看看是不是已经将所有 token 都吃完了，还有可用 token 就表示输入串有错误，抛出一个异常即可。&lt;/p&gt;
&lt;p&gt;最后直接返回 &lt;code&gt;AddExp&lt;/code&gt;  对象，到这里你可能有些疑惑，我们解析的不是 &lt;code&gt;exp&lt;/code&gt;  吗？为什么不是返回一个 &lt;code&gt;Exp&lt;/code&gt;  对象，而是返回一个 &lt;code&gt;AddExp&lt;/code&gt;  对象？&lt;br&gt;
因为实际上 EBNF 文法描述上， &lt;code&gt;exp&lt;/code&gt;  就只由 &lt;code&gt;addexp&lt;/code&gt;  组成，它们基本上可以看作是等价的，为了省事，我就直接让 &lt;code&gt;AddExp&lt;/code&gt;  对象成为 AST 的根节点。&lt;/p&gt;
&lt;p&gt;而我们实际上没有实现描述非终结符 &lt;code&gt;exp&lt;/code&gt;  的类， &lt;code&gt;Exp&lt;/code&gt;  并不是描述 &lt;code&gt;exp&lt;/code&gt;  的类，只是看起来很像。&lt;br&gt;
 &lt;code&gt;Exp&lt;/code&gt;  是我们另外定义的基类，基类指针自然可以指向派生类对象。&lt;/p&gt;
&lt;h2 id=&#34;解析addexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析addexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;addexp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来我们需要解析 &lt;code&gt;addexp&lt;/code&gt; ，对应的类自然就是 &lt;code&gt;AddExp&lt;/code&gt; ，返回它的实例化对象。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;AddExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; leftMulExp = &lt;span class=&#34;built_in&#34;&gt;ParseMulExp&lt;/span&gt;();    &lt;span class=&#34;comment&#34;&gt;// 解析左边的mulexp，保存解析的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt; mulExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 循环解析右边的mulexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前瞻一下，如果后面已经不是加法符号或者减法符号了，就可以返回了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpAdd) &amp;amp;&amp;amp; !token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpSub)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 吃掉刚刚前瞻的运算符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(token.type);   &lt;span class=&#34;comment&#34;&gt;// 保存符号，因为连接两个mulexp的符号可能是加法，也可能是减法，保存起来供解释时使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mulExpList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;ParseMulExp&lt;/span&gt;());    &lt;span class=&#34;comment&#34;&gt;// 解析并保存右侧mulexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 构造AddExp对象并返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;AddExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(leftMulExp), operList, std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(mulExpList));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;依旧是按照 EBNF 文法来解析。&lt;/p&gt;
&lt;p&gt;我们先解析最左边的一个 &lt;code&gt;mulexp&lt;/code&gt;  非终结符，接下来就可能是多对 &lt;code&gt;oper2&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  了，因此用一个循环来解析，分别保存到 &lt;code&gt;vector&lt;/code&gt;  容器中。&lt;/p&gt;
&lt;h2 id=&#34;解析mulexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析mulexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;mulexp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来解析 &lt;code&gt;mulexp&lt;/code&gt; ，对应的类是 &lt;code&gt;MulExp&lt;/code&gt; ，返回它的实例化对象。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; leftParenExp = &lt;span class=&#34;built_in&#34;&gt;ParseParenExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt; parenExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpMul) &amp;amp;&amp;amp; !token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpDiv)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    operList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(token.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parenExpList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;ParseParenExp&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;MulExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(leftParenExp), operList, std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(parenExpList));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;由于 &lt;code&gt;addexp&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  的结构基本相同，他们的解析过程也一般无二。&lt;/p&gt;
&lt;h2 id=&#34;解析parenexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析parenexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;parenexp&lt;/code&gt;&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;ParenExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kSepLParen)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;ParenExp&amp;gt;(&lt;span class=&#34;built_in&#34;&gt;ParseNumExp&lt;/span&gt;());   &lt;span class=&#34;comment&#34;&gt;// 不是以`(`开头的子表达式，直接当成numexp解析。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = &lt;span class=&#34;built_in&#34;&gt;ParseAddExp&lt;/span&gt;();   &lt;span class=&#34;comment&#34;&gt;// 解析一个addexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;MatchToken&lt;/span&gt;(TokenType::kSepRParen);        &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;ParenExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(exp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;解析 &lt;code&gt;parenexp&lt;/code&gt;  的代码也比较简单，根据 EBNF 所描述的文法，要么就是以 &lt;code&gt;(&lt;/code&gt; 开始的子表达式，要么就是数值表达式。&lt;/p&gt;
&lt;h2 id=&#34;解析numexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析numexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;numexp&lt;/code&gt;&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;NumExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseNumExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;MatchToken&lt;/span&gt;(TokenType::kNumber);   &lt;span class=&#34;comment&#34;&gt;// 直接匹配一个NumberToken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;built_in&#34;&gt;atoi&lt;/span&gt;(token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;());    &lt;span class=&#34;comment&#34;&gt;// 字符串转整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;NumExp&amp;gt;(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;&lt;code&gt;numexp&lt;/code&gt;  的解析是最简单的，直接从词法分析器那边匹配一个 &lt;code&gt;Number&lt;/code&gt;  类型的 token，就能拿到其字符串。&lt;/p&gt;
&lt;p&gt;至此，语法分析告一段落。&lt;/p&gt;
&lt;h1 id=&#34;interpreter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#interpreter&#34;&gt;#&lt;/a&gt; Interpreter&lt;/h1&gt;
&lt;p&gt;经过语法分析阶段，如果一切顺利，我们就将输入串转换成了 AST，接下来我们编写一个解释器，解释这颗树，得到结果。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\interpreter\interpreter.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; INTERPRETER_INTERPRETER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; INTERPRETER_INTERPRETER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ast/exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Interpreter&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Exp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AddExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MulExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ParenExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretNumberExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(NumExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace interpreter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// INTERPRETER_INTERPRETER_H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;头文件也很简单，就是定义了一个解释器类，其成员函数负责解释不同类型的 AST 节点。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\interpreter\interpreter.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;interpreter.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Exp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretAddExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;AddExp*&amp;gt;(exp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AddExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;leftMulExp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; exp-&amp;gt;operList.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;operList[i] == TokenType::kOpAdd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res += &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;mulExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res -= &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;mulExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MulExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;leftParenExp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; exp-&amp;gt;operList.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;operList[i] == TokenType::kOpMul) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res *= &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;parenExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res /= &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;parenExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ParenExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;exp-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetType&lt;/span&gt;() == ExpType::kNum) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretNumberExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;NumExp*&amp;gt;(exp-&amp;gt;exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretAddExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;AddExp*&amp;gt;(exp-&amp;gt;exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretNumberExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(NumExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; exp-&amp;gt;num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace interpreter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;实现代码能看到些许上述语法分析的代码的影子，实际上就是树的深度优先遍历并向上返回运算结果。&lt;br&gt;
只要理解了语法分析，解释的过程也很好理解。&lt;br&gt;
&lt;em&gt;如果你需要考虑四则运算的性能，甚至可以在语法分析阶段就返回数值结果，而不是构造 AST 树。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;完整测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整测试&#34;&gt;#&lt;/a&gt; 完整测试&lt;/h1&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;parser/parser.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;interpreter/interpreter.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; parser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) + 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Parser &lt;span class=&#34;title&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&amp;amp;lexer)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = parser.&lt;span class=&#34;built_in&#34;&gt;ParseExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Interpreter inter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = inter.&lt;span class=&#34;built_in&#34;&gt;InterpretExp&lt;/span&gt;(exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h1 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h1&gt;
&lt;p&gt;我将本节完整代码放到了 github 上，你可以将其克隆下来亲自调试运行，鉴于 vs 强大的调试能力，你可以一步一步观察 AST 树的构造过程，加深理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuyuaqwq/ToyLang/tree/5.arithmetic&#34;&gt;https://github.com/yuyuaqwq/ToyLang/tree/5.arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-11-22T16:10:11.333Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/f573.html</id>
        <title>【动手写ToyLang】4.递归下降</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/f573.html"/>
        <content type="html">&lt;h1 id=&#34;递归下降&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归下降&#34;&gt;#&lt;/a&gt; 递归下降&lt;/h1&gt;
&lt;p&gt;先前用于描述的加减运算表达式的文法，实际上并不能直接通过递归下降分析法来解析。&lt;/p&gt;
&lt;p&gt;说了这么多，递归下降到底是个什么玩意呢？&lt;br&gt;
接下来我们通过以下能够应用递归下降进行解析的文法来解析输入串，了解其解析过程，读者大概就明白了。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;block&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&amp;#x27;&lt;/span&gt; &amp;#123;stat&amp;#125; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stat = assignExp &lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assignExp = ident &lt;span class=&#34;string&#34;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;value = number | string&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;stat&amp;#125;&lt;/code&gt;  表示重复 &lt;code&gt;stat&lt;/code&gt; ，此处表示可以有 0~n 个 &lt;code&gt;stat&lt;/code&gt; 。&lt;br&gt;
其中， &lt;code&gt;ident&lt;/code&gt;  是标识符， &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt;  是字面量，我们都会放到词法分析中去解析，故不在此列出其文法。&lt;/p&gt;
&lt;p&gt;首先，假设 &lt;code&gt;block&lt;/code&gt;  输入串为：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = &amp;quot;qwq&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是解析的伪代码：&lt;/p&gt;
&lt;h2 id=&#34;解析block&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析block&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;block&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseBlock(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#123;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while in.is(&amp;#x27;&amp;#125;&amp;#x27;) == false &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ParseStat(in);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#125;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先从输入串中匹配 &lt;code&gt;&amp;#123;&lt;/code&gt; 字符；&lt;br&gt;
由于语句是可选的，因此需要检查紧接着的符号是否为 &lt;code&gt;&amp;#125;&lt;/code&gt;  字符，不是的话就可以匹配 &lt;code&gt;stat&lt;/code&gt;  了；&lt;br&gt;
 &lt;code&gt;stat&lt;/code&gt;  是一个非终结符，需要继续展开，此处交给 &lt;code&gt;ParseStat&lt;/code&gt;  进一步解析；&lt;br&gt;
 &lt;code&gt;ParseStat&lt;/code&gt;  返回后，表示一条语句的解析完成了，但语句可能存在多条，因此循环进行；&lt;br&gt;
最后匹配一个 &lt;code&gt;&amp;#125;&lt;/code&gt;  字符；&lt;br&gt;
 &lt;code&gt;block&lt;/code&gt;  解析完成。&lt;/p&gt;
&lt;p&gt;抽象语法树如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;为什么这里没有添加 &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  节点呢？&lt;/em&gt;&lt;br&gt;
&lt;em&gt;因为树构建完成后，我们自然可以知道这个节点是 block，在词法阶段的两个符号于语法树而言并无关紧要。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析stat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析stat&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;stat&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;关于 &lt;code&gt;stat&lt;/code&gt;  的解析，在 &lt;code&gt;ParseStat&lt;/code&gt;  函数中完成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseStat(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseAssignExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解析assignexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析assignexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;assignExp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来是 &lt;code&gt;assignExp&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseAssignExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kIdent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;=&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseValue(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;这里同样没有将符号 &lt;code&gt;=&lt;/code&gt;  作为节点添加。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析value&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析value&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;Value&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;最后完成关于 &lt;code&gt;Value&lt;/code&gt;  的解析：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseValue(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr in.is(kNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in.match(kNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键描述文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键描述文法&#34;&gt;#&lt;/a&gt; 关键：描述文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;这种自顶逐层向下解析，以构造语法树的分析法，就叫做递归下降。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;虽然笔者并没有在伪代码中添加构造树的节点相关的代码，但不妨碍读者理解递归下降。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你会发现，只要我们描述好了文法，用递归下降来解析输入串是一件非常简单的事情。&lt;/p&gt;
&lt;h2 id=&#34;无限递进&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无限递进&#34;&gt;#&lt;/a&gt; 无限递进&lt;/h2&gt;
&lt;p&gt;还记得我在上一篇文章中所描述的文法吗？&lt;/p&gt;
&lt;p&gt;如果直接编写解析代码，就会形成无限递进：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if inStr.is(&amp;#x27;+&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;+&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;-&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseNumber(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;左递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左递归&#34;&gt;#&lt;/a&gt; 左递归&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;如果非终结符 &lt;code&gt;r&lt;/code&gt;  被直接或间接推导后，其结果最左边又出现非终结符 &lt;code&gt;r&lt;/code&gt;  的情况，便称之为左递归。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理想解析情况：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp = exp + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; exp = number + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码解析情况：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp = exp + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; exp = exp + number + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;消除左递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消除左递归&#34;&gt;#&lt;/a&gt; 消除左递归&lt;/h2&gt;
&lt;p&gt;为此，我们需要改写文法，以避免出现左递归。&lt;/p&gt;
&lt;h2 id=&#34;四则表达式文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四则表达式文法&#34;&gt;#&lt;/a&gt; 四则表达式文法&lt;/h2&gt;
&lt;p&gt;首先，我们用 EBNF 描述更加完整的四则表达式文法：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = addexp oper2 mulexp | mulexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = mulexp oper1 number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;关于 &lt;code&gt;number&lt;/code&gt;  的产生式就不再列出，实际上我们会在词法分析阶段将 &lt;code&gt;number&lt;/code&gt;  解析为 &lt;code&gt;token&lt;/code&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们现在很容易就能看出，在该文法中，左式为 &lt;code&gt;addexp&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  的产生式都存在左递归的问题。&lt;/p&gt;
&lt;p&gt;如何消除呢？&lt;br&gt;
首先观察产生式 &lt;code&gt;addexp = addexp oper2 mulexp | mulexp&lt;/code&gt; &lt;br&gt;
 我们会发现这么一条规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addexp&lt;/code&gt;  的推导产生的句型，必然是 &lt;code&gt;mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是我们可以重写文法为：&lt;/p&gt;
&lt;figure class=&#34;highlight bnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;addexp ::= mulexp addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;addexp&amp;#x27;&lt;/span&gt; ::= oper2 addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27; | ε&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;教学时消除左递归时经常用于举例的 BNF 文法；&lt;br&gt;
其中 &lt;code&gt;ε&lt;/code&gt;  表示空。&lt;br&gt;
&lt;em&gt;事实上关于 BNF 的格式规范，网上许多文章的写法似乎都不尽相同，在这里笔者也不做深究了。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;addexp&lt;/span&gt; = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 EBNF 描述的文法，通过 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  做了简化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;事实上，我们如果直接按照第一种文法编写解析代码，最终构成的语法树会存在结合律的问题。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;如果使用第二种文法，以多叉树的形式存储其节点，则会更加简单，因此本系列文章采用第二种文法。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;构造语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造语法树&#34;&gt;#&lt;/a&gt; 构造语法树&lt;/h1&gt;
&lt;p&gt;接下来我们尝试基于此文法与表达式 &lt;code&gt;1 + 5 * 6&lt;/code&gt; ，构造其抽象语法树。&lt;/p&gt;
&lt;p&gt;以下是完整文法：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = number &amp;#123;oper1 number&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是解析过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/8.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读者不妨尝试自己编写一些表达式，然后画一画解析图，找找感觉。&lt;br&gt;
也可以尝试自己在脑中遍历这颗语法树，看看能否能够正确计算出结果。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 消除左递归.&lt;a href=&#34;https://blog.csdn.net/qq2071114140/article/details/102787831&#34;&gt;https://blog.csdn.net/qq2071114140/article/details/102787831&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-30T08:34:27.524Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/1571.html</id>
        <title>【动手写ToyLang】3.语法分析</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/1571.html"/>
        <content type="html">&lt;h1 id=&#34;语法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析&#34;&gt;#&lt;/a&gt; 语法分析&lt;/h1&gt;
&lt;p&gt;按照传统的编译原理教材讲述的编译器结构， &lt;code&gt;词法分析阶段&lt;/code&gt; 之后，便是 &lt;code&gt;语法分析阶段&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如 “程序”，“语句”，“表达式” 等等。语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。语法分析程序可以用 YACC 等工具自动生成。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简而言之，语法分析即要求完成对输入串是否能符合语言文法规定的检查。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;关于文法的定义，参照下文。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法分析器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析器&#34;&gt;#&lt;/a&gt; 语法分析器&lt;/h2&gt;
&lt;p&gt;我们需要实现的是语法分析器。&lt;br&gt;
&lt;strong&gt;语法分析器的主要工作就是接收词法分析器输出的 Token，产出抽象语法树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本意我是不想讲太多学科中严谨定义的内容，一个是不好懂，容易劝退；一个是我个人的理解也有限。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;所以本系列文章就只简单提及我认为的 ToyLang 开发过程中必要的东西。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文法&#34;&gt;#&lt;/a&gt; 文法&lt;/h1&gt;
&lt;p&gt;这里还是请出百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;文法是一个汉语词汇，读音为 wén fǎ ，即文章的书写法规，一般用来指以文字、词语、短句、句子的编排而组成的完整语句和文章的合理性组织。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习编译原理的过程中，确实会有许多概念难以理解。&lt;/p&gt;
&lt;p&gt;我们先简单理解成，&lt;strong&gt;文法就是描述如何将 token 组织成语法树的规则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的语言自然也需要存在文法，比如 if 语句必须按照下列文法来解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;   &lt;code&gt;exp&lt;/code&gt;   &lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，现在我们还是将重心放到四则表达式的解析上。&lt;/p&gt;
&lt;h2 id=&#34;上下文无关文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文无关文法&#34;&gt;#&lt;/a&gt; 上下文无关文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在推导产生式时，正在进行的非终结符展开与前后已经展开的终结符不存在关联的文法。&lt;/strong&gt;&lt;br&gt;
可以先继续向下看。&lt;/p&gt;
&lt;h1 id=&#34;ebnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf&#34;&gt;#&lt;/a&gt; EBNF&lt;/h1&gt;
&lt;p&gt;我们选择通过 &lt;code&gt;EBNF&lt;/code&gt;  来描述 &lt;code&gt;ToyLang&lt;/code&gt;  的文法。&lt;/p&gt;
&lt;p&gt;EBNF 是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;扩展巴科斯 - 瑙尔范式 (Extended Backus–Naur Form,EBNF) 是一种用于描述计算机编程语言等正式语言的与上下文无关语法的元语法 (metasyntax) 符号表示法。简而言之，它是一种描述语言的语言。它是基本巴科斯范式 (BNF) 元语法符号表示法的一种扩展。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只看描述通常很难理解新事物，咱们尝试一下用 EBNF 描述四则运算表达式的文法。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; number | exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;number = digit &amp;#123;digit&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;digit = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;5&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;6&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;7&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;8&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了便于理解，这里只描述了加法与减法。&lt;/p&gt;
&lt;h2 id=&#34;基本规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本规则&#34;&gt;#&lt;/a&gt; 基本规则&lt;/h2&gt;
&lt;p&gt;读者或许没看明白，没关系，笔者简单讲解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  左边的，我们称为 &lt;code&gt;左式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  右边的，我们称为 &lt;code&gt;右式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;这样一行式子，我们称为 &lt;code&gt;产生式&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非终结符&#34;&gt;#&lt;/a&gt; 非终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;是某条产生式的左式，可以用其右式代换。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;exp&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;digit&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终结符&#34;&gt;#&lt;/a&gt; 终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无法被再被代换的符号。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; …。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;关于更多 EBNF 的语法规则，请参阅相关资料。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;自顶向下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自顶向下&#34;&gt;#&lt;/a&gt; 自顶向下&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;已知 &lt;code&gt;输入串&lt;/code&gt; 为某条产生式的左式，扫描输入串以不断展开其非终结符，直至只剩下终结符。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;这个展开的过程我们叫做推导，这属于自顶向下解析的思想。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试解析&#34;&gt;#&lt;/a&gt; 尝试解析&lt;/h2&gt;
&lt;p&gt;我们先来看第一行产生式：&lt;br&gt;
 &lt;code&gt;exp = exp &#39;+&#39; number | exp &#39;-&#39; number | number&lt;/code&gt; &lt;br&gt;
 它描述了 &lt;code&gt;表达式&lt;/code&gt; 可以由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;表达式+数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以由 &lt;code&gt;表达式-数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以只由 &lt;code&gt;数字&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;其中， &lt;code&gt;|&lt;/code&gt;  表示或的意思，如果读者学习过正则表达式，应当很容易理解。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假设我们需要解析的 &lt;code&gt;exp&lt;/code&gt;  非终结符输入串为 &lt;code&gt;1 + 2&lt;/code&gt; ，解析过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;+&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; number &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是在重复将右式中的非终结符展开的过程。&lt;br&gt;
&lt;em&gt;这里为了节约篇幅，笔者没有将从 number 推导成 digit，再推导成数字的推导过程记录下来，读者明白这一点即可。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;再尝试一下解析 &lt;code&gt;exp&lt;/code&gt;  非终结符输入串 &lt;code&gt;1&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;3&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; exp &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; number &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; &amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这个推导过程我们忽略了很多细节，并不能直接编写代码实现。&lt;/p&gt;
&lt;h1 id=&#34;尾声&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尾声&#34;&gt;#&lt;/a&gt; 尾声&lt;/h1&gt;
&lt;p&gt;在下一篇文章，我们会通过 EBNF 来描述完整的四则表达式的文法，并讲解 &lt;code&gt;递归下降&lt;/code&gt; 分析法。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 扩展巴科斯范式 (EBNF) 简介.&lt;a href=&#34;https://blog.csdn.net/lin_strong/article/details/78583543&#34;&gt;https://blog.csdn.net/lin_strong/article/details/78583543&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; [2] 应该如何理解「上下文无关文法」？.&lt;a href=&#34;https://www.zhihu.com/question/21833944&#34;&gt;https://www.zhihu.com/question/21833944&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; 其他网络上较为零散的资料，无法一一列举，十分抱歉。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-30T03:52:33.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/aca7.html</id>
        <title>【动手写ToyLang】2.词法分析</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/aca7.html"/>
        <content type="html">&lt;h1 id=&#34;词法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#词法分析&#34;&gt;#&lt;/a&gt; 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析是整个编译器结构中最简单的一个阶段，所以放轻松，咱们往下看。&lt;/p&gt;
&lt;p&gt;那么，词法分析是什么呢？&lt;br&gt;
我们知道，程序开发者编写的源代码，也就是编译器最初能够接收到的输入，即连续的字符序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析存在的意义，就是提前将源代码切分成能被后续编译程序直接使用的单词序列。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如源代码中的变量标识，关键字，字符串字面量，数值字面量等…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们上一节课所展示的算术表达式， &lt;code&gt;3 + 2&lt;/code&gt; ，也是先将其分成 &lt;code&gt;3&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;  三个节点，才能用于构成抽象语法树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析器产出的单词序列，我们将其称为 &lt;code&gt;Token&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;输入四则运算表达式产出token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入四则运算表达式产出token&#34;&gt;#&lt;/a&gt; 输入四则运算表达式，产出 &lt;code&gt;Token&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;我们既然需要将四则运算表达式转成 &lt;code&gt;Token&lt;/code&gt; ，也就需要知道其单词序列的规则，当然，关于这一点，我们早已烂熟于心了。&lt;br&gt;
以下是我通过正则表达式描述的 &lt;code&gt;Token&lt;/code&gt;  匹配规则 (以我们将要开发的词法分析器为准)。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TokenType&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eof&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Number&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\d+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpAdd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpSub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpMul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpDiv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepLParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepRParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;此处笔者忽略了运算符在正则表达式中需要转义的情况，做一个参考即可。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;lexer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer&#34;&gt;#&lt;/a&gt; Lexer&lt;/h1&gt;
&lt;p&gt;Lexer，即词法分析器。&lt;br&gt;
接下来我们编写代码实现 Lexer。&lt;/p&gt;
&lt;h2 id=&#34;token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token&#34;&gt;#&lt;/a&gt; Token&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\token.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// token类型常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TokenType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNil = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kEof,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpAdd,    &lt;span class=&#34;comment&#34;&gt;// +&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpSub,    &lt;span class=&#34;comment&#34;&gt;// -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpMul,    &lt;span class=&#34;comment&#34;&gt;// *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpDiv,    &lt;span class=&#34;comment&#34;&gt;// /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepLPar,  &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepRPar,  &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 描述token的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Token&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; line;		&lt;span class=&#34;comment&#34;&gt;// 行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TokenType type;		&lt;span class=&#34;comment&#34;&gt;// token类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string str;	&lt;span class=&#34;comment&#34;&gt;// 保存必要的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\token.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token::Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t_type == type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;token 这部分十分简单，不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;lexer-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer-2&#34;&gt;#&lt;/a&gt; Lexer&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\lexer.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;lexer/token.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LexerException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析器类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Lexer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;LookAHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;MatchToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string m_src;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; m_idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Token m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\lexer.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LexerException::&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg) : std::&lt;span class=&#34;built_in&#34;&gt;exception&lt;/span&gt;(t_msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src) : m_src&amp;#123; t_src &amp;#125;, m_line&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_idx&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_save&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, TokenType::kNil &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_idx &amp;lt; m_src.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_src[m_idx++];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 跳过指定字符数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_idx += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 前瞻下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::LookAHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_save.type == TokenType::kNil) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果没有前瞻过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_save = &lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();       &lt;span class=&#34;comment&#34;&gt;// 获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Token token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_save.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kNil)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果有前瞻保存的token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回前瞻的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token = m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_save.type = TokenType::kNil;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 跳过空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;amp;&amp;amp; c == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token.line = m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kEof;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据字符返回对应类型的Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpSub;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpDiv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepLParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepRParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;SkipChar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot parse token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 匹配下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::MatchToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType type)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = &lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(type)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot match token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们封装了一个词法分析器类；&lt;br&gt;
 &lt;code&gt;Lexer::LookAHead&lt;/code&gt;  前瞻一个 Token。&lt;br&gt;
 &lt;code&gt;Lexer::NextToken&lt;/code&gt;  是关键成员函数，用于扫描字符序列，匹配一个完整的 Token 并返回，如果前瞻过则返回前瞻的结果。&lt;br&gt;
 &lt;code&gt;Lexer::MatchToken&lt;/code&gt;  要求下一 token 为指定类型，否则会抛出异常。&lt;/p&gt;
&lt;h1 id=&#34;测试成果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试成果&#34;&gt;#&lt;/a&gt; 测试成果&lt;/h1&gt;
&lt;p&gt;接下来，我们编写测试代码，用于测试新鲜出炉的词法分析器。&lt;br&gt;
用于测试的表达式是： &lt;code&gt;1 + 33 - 0 * (33 / 999) - 123&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) - 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = lexer.&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (token.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kNumber:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;()); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpAdd: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;+\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpDiv: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;/\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpMul: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;*\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpSub: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepLParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;(\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepRParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 打印结果 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;999&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-29T04:29:50.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/56ac.html</id>
        <title>【动手写ToyLang】1.从四则运算表达式开始</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/56ac.html"/>
        <content type="html">&lt;h1 id=&#34;由此开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由此开始&#34;&gt;#&lt;/a&gt; 由此开始&lt;/h1&gt;
&lt;p&gt;如果你曾经接触过《编译原理》的话，不知道是否与我有着同样的困惑呢？&lt;/p&gt;
&lt;p&gt;各种不近人情的名词，公式乱飞，这让我学习起来格外痛苦。&lt;/p&gt;
&lt;p&gt;我在阅读过不少文章、书籍，并且尝试敲下一些代码之后，才逐渐理解了一些较为关键的东西。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实际上，当我真正完成了对四则运算表达式的解析的那一刻，我才真切感受到了编译原理的优雅与美妙之处，这大概就是由人类智慧的伟大之处吧 (偏得有点远了)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，我才会选择先从四则运算表达式开始，将其逐步扩展成为一门 &lt;code&gt;通用编程语言&lt;/code&gt; ，也能让读者每一节都能感受到学习有所反馈的喜悦。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初尝构思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初尝构思&#34;&gt;#&lt;/a&gt; 初尝构思&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;现在，我来尝试给你出一道题吧，请你用你所熟悉的语言，编写一个模块：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入符合四则运算表达式规范的字符串 (可以假定只有整数，不存在括号)；&lt;/li&gt;
&lt;li&gt;输出整型结果；&lt;/li&gt;
&lt;li&gt;要求关键逻辑由自己实现，不可借由库、语言本身提供的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你能实现吗？&lt;/p&gt;
&lt;p&gt;是否觉得脑子有些空白，难以组织成较为优雅的实现思路呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果你现在就能想到很棒的解法，那至少你要比我厉害多了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我曾经因为某些需求做过尝试，虽然最后写出来了，但是具体实现也非常丑陋，这里就不献丑了。&lt;/p&gt;
&lt;p&gt;但是我可以给你大致描述一下我当初的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，查找字符串中优先级较高的运算符  &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt; ，再前 / 后瞻运算符前后的数字，这个子串也能形成一个表达式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算出结果后，在原表达式中，用结果替换掉子串 (刚刚被计算的表达式)，再继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后再从头开始查找优先级更低一级的运算符 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt; ，直到运算完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当然，我们不会用这么低效的方法，也不会要求现在就给出实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在提出这个问题，并不是为了为难你，只是为了让你记住眼下的感觉，当你学完本系列文章后，再回来看看，这一道题，是否真的有那么难呢？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;抽象语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象语法树&#34;&gt;#&lt;/a&gt; 抽象语法树&lt;/h1&gt;
&lt;p&gt;咱们先来看百度百科对 &lt;code&gt;抽象语法树&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E6%A0%91/7031301?fromModule=lemma_inlink&#34;&gt;语法树&lt;/a&gt;（Syntax tree），是&lt;a href=&#34;https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink&#34;&gt;源代码&lt;/a&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95?fromModule=lemma_inlink&#34;&gt;语法&lt;/a&gt;结构的一种抽象表示。它以树状的形式表现&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;的语法结构，树上的每个节点都表示源代码中的一种结构。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯… 不愧是名字就带着抽象的东西，连说明都这么抽象。&lt;/p&gt;
&lt;p&gt;咱们先不整那么多虚头巴脑的，干就完了。&lt;/p&gt;
&lt;h2 id=&#34;构造四则运算表达式的ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造四则运算表达式的ast&#34;&gt;#&lt;/a&gt; 构造四则运算表达式的 AST&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;3 + 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个是大家熟悉的算术表达式，实际上，我们的大脑是如何计算这个表达式的呢？当然需要遵循某些规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先乘除&lt;/li&gt;
&lt;li&gt;再加减&lt;/li&gt;
&lt;li&gt;从左往右结合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我们自然是需要先&lt;strong&gt;左往右找&lt;/strong&gt;在表达式中找到 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt;  两种符号，好消息是，没有，嘿嘿。&lt;/p&gt;
&lt;p&gt;接下来继续&lt;strong&gt;左往右找&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; ，找到之后将其取出，这也是我们需要计算的子表达式。&lt;/p&gt;
&lt;p&gt;我们将其分成三部分，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边的数字  &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加法运算符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右边的数字  &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人脑的表达式计算模型，可以归纳成这么一颗树型结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历树与我们的计算过程极度相似：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 + 2&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多运算符与结合律&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多运算符与结合律&#34;&gt;#&lt;/a&gt; 多运算符与结合律&lt;/h3&gt;
&lt;p&gt;那么，当一个表达式中，存在多个运算符时，应该如何构造语法树呢？&lt;br&gt;
接下来我们构造表达式  &lt;code&gt;3 - 2 + 4&lt;/code&gt;  的树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先我们应该注意的一点是，需要先被执行运算 (优先级更高) 的子表达式，其节点的相对深度更深：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还是先来遍历这颗树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；
&lt;ol&gt;
&lt;li&gt;左子节点是减法，表明需要用左子节点减去右子节点，需要继续向下展开；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 - 2&lt;/code&gt; ，返回结果  &lt;code&gt;1&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 4&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，遍历的过程也符合我们所要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由左边的运算符开始，向右结合。&lt;/li&gt;
&lt;li&gt;同优先级下，我们需要优先计算左边的运算符组成的子表达式，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我再给你画一下另一种情况，你也就明白了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以尝试一下遍历这棵树，会发现先被执行的一定是加法，这并不符合我们的从一开始就要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;br&gt;
在部分情况下，由于结合律的错误，就会产出错误的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如我们本次求解的表达式，通过遍历此树得出的结果为 &lt;code&gt;-3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标根据语法规则生成ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标根据语法规则生成ast&#34;&gt;#&lt;/a&gt; 目标：根据语法规则生成 AST&lt;/h2&gt;
&lt;p&gt;我不说你大概也已经猜到了，其实我们上面所构造的树，在当前的应用场景下，就叫做 &lt;code&gt;抽象语法树&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;遍历抽象语法树并计算的过程，与我们人脑对表达式的计算的过程是十分相似的。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，我们只需要构造出这么一颗抽象语法树，就已经基本上完成了编译工作的一大半。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;此时，若需要执行编译产生的结果，只需要遍历我们所生成 AST 即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在遍历的过程中，我们就能够正确的完成对加法表达式的加法运算，再完成对赋值表达式的赋值运算。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ast解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast解释器&#34;&gt;#&lt;/a&gt; AST 解释器&lt;/h1&gt;
&lt;p&gt;最后，笔者向读者展示了有关 &amp;quot;解释器&amp;quot; 的东西，是的，即便你难以置信。&lt;br&gt;
遍历这棵树的过程，就可以叫做解释；&lt;br&gt;
如果我们写出代码实现遍历树的过程，即是 &lt;code&gt;AST解释器&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，解释器是一种比较广泛的概念，即便到后面我们基于 AST 生成了字节码，交给虚拟机执行，我们的程序也依然可以称之为解释器，只不过解释的对象从 AST 换成了字节码。&lt;/p&gt;
&lt;p&gt;我个人觉得，当初造这个词的人只是为了区分所谓的 &amp;quot;编译型语言&amp;quot; 和 &amp;quot;解释型语言&amp;quot;。&lt;br&gt;
以下是百度百科对解释器的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;解释器（&lt;a href=&#34;https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997?fromModule=lemma_inlink&#34;&gt;英语&lt;/a&gt;：Interpreter），又译为直译器，是一种电脑程序，能够把高级&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;此处关于 &lt;code&gt;每转译一行程序叙述就立刻运行&lt;/code&gt; 的说明也不尽然，至少现在很多被称为 &lt;code&gt;解释器&lt;/code&gt; 的程序，并非如此 (如 Python 解释器、Java 解释器等)。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-28T15:01:12.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/c4d3.html</id>
        <title>【动手写ToyLang】0.前言</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/c4d3.html"/>
        <content type="html">&lt;h1 id=&#34;关于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于&#34;&gt;#&lt;/a&gt; 关于&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本系列文章会手把手教你打造一门&lt;emp&gt;玩具&lt;/emp&gt;通用编程语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机本身就是一门需要动手的学科，在对基本原理有一定程度的理解之后，自己动手实践才是学习的最好捷径，为此制造 &amp;quot;玩具&amp;quot;，并不丢人。&lt;/p&gt;
&lt;p&gt;我对《编译原理》这门学科的学习程度也十分有限，因此本系列文章的读者不仅仅是你们，也包括我，写下的这篇文章也是支撑我继续动手实践的动力。&lt;br&gt;
学完本系列文章之后，基本上可以对编译原理有所认知，再继续往下学习也就不会那么困难了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我会尽可能保证文章内容的准确，若还是难以避免的出现了错误，望批评指正，感激不尽。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;开发语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发语言&#34;&gt;#&lt;/a&gt; 开发语言&lt;/h2&gt;
&lt;p&gt;这里笔者选用个人较为常用的 C++ 作为开发语言，风格尽量以《Google C++ Style Guide》为准，在我个人能力范围内尽量写得 &amp;quot;现代 C++&amp;quot; 一点。&lt;/p&gt;
&lt;p&gt;另外，笔者对 C++ 的理解也较为浅薄，代码写得不好，还请理解。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境&lt;/h2&gt;
&lt;p&gt;笔者基本上只在 &lt;code&gt;Windows&lt;/code&gt;  下进行开发工作，因此选择自然是 &lt;code&gt;Visual Studio&lt;/code&gt; ，读者可以自由选择自己喜欢的开发环境。&lt;/p&gt;
&lt;h1 id=&#34;项目地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目地址&#34;&gt;#&lt;/a&gt; 项目地址&lt;/h1&gt;
&lt;p&gt;最后，笔者已经将完整的项目代码放到了 &lt;code&gt;github&lt;/code&gt;  上，另外每一学习阶段的代码会以分支的形式推送，供读者参考学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuyuaqwq/ToyLang&#34;&gt;https://github.com/yuyuaqwq/ToyLang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="编译原理" />
        <category term="动手写ToyLang" />
        <updated>2022-10-28T13:18:53.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5e1f.html</id>
        <title>【Proxifier】基本配置与使用</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5e1f.html"/>
        <content type="html">&lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;br&gt;
 Block:&lt;/li&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;br&gt;
 Proxy HTTPS 127.0.0.1:&lt;/li&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书。&lt;/p&gt;
</content>
        <updated>2022-10-26T16:37:40.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/5e1f.html</id>
        <title>【Proxifier】基本配置与使用</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/5e1f.html"/>
        <content type="html">&lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/10.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Block:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proxy HTTPS 127.0.0.1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/11.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/12.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/13.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;fiddler抓取应用配置示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fiddler抓取应用配置示例&#34;&gt;#&lt;/a&gt; Fiddler 抓取应用配置示例&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;我们需要将目标端口为 &lt;code&gt;80&lt;/code&gt;  和 &lt;code&gt;443&lt;/code&gt;  的请求转发到 &lt;code&gt;Fiddler&lt;/code&gt;  创建的代理服务器中。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Fiddler.exe&lt;/code&gt;  设为过滤项，(因为 &lt;code&gt;Fiddler&lt;/code&gt;  再次转发请求时，又会被 &lt;code&gt;Proxifier&lt;/code&gt;  捕获，因此要将其过滤)，通过右边的 &lt;code&gt;↑&lt;/code&gt;   &lt;code&gt;↓&lt;/code&gt; 按钮调整其优先级为最高。&lt;/li&gt;
&lt;li&gt;这里另外示范了过滤 &lt;code&gt;Chrome.exe&lt;/code&gt;  浏览器的情况，使浏览器的请求也不会被转发。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/14.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书用于校验。&lt;/p&gt;
</content>
        <category term="网络分析" />
        <category term="Proxifier" />
        <updated>2022-10-26T16:37:40.000Z</updated>
    </entry>
    <entry>
        <id>http://yuyuaqwq.github.io/posts/842e.html</id>
        <title>【MFC】视图与文档</title>
        <link rel="alternate" href="http://yuyuaqwq.github.io/posts/842e.html"/>
        <content type="html">&lt;h1 id=&#34;视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图&#34;&gt;#&lt;/a&gt; 视图&lt;/h1&gt;
&lt;h2 id=&#34;视图窗口简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图窗口简述&#34;&gt;#&lt;/a&gt; 视图窗口简述&lt;/h2&gt;
&lt;p&gt;在 MFC 的设计中，图形的显示的这部分工作，交由 &lt;code&gt;视图窗口&lt;/code&gt; 负责。&lt;br&gt;
框架窗口则担容器之任，成为菜单、标题栏、视图窗口等窗口的容身之所，通常不直接在其客户区中绘制。&lt;/p&gt;
&lt;emp&gt;视图窗口就被设计为一个没有标题栏，只有客户区的窗口，通常覆盖在框架窗口的客户区上。&lt;/emp&gt;
&lt;h2 id=&#34;cview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cview&#34;&gt;#&lt;/a&gt; CView&lt;/h2&gt;
&lt;p&gt;在 MFC 中，视图窗口对应的类即 &lt;code&gt;CView&lt;/code&gt; ，继承自 &lt;code&gt;CWnd&lt;/code&gt; ；&lt;/p&gt;
&lt;h3 id=&#34;cviewondraw&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cviewondraw&#34;&gt;#&lt;/a&gt; CView::OnDraw&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CView&lt;/code&gt;  中声明了一个纯虚函数 &lt;code&gt;CView::OnDraw&lt;/code&gt; ，因此继承必须重写这个函数，用于处理绘制消息；&lt;br&gt;
这个函数是由 &lt;code&gt;CView::OnPanit&lt;/code&gt;  调用的。&lt;/p&gt;
&lt;h2 id=&#34;使用视图窗口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用视图窗口&#34;&gt;#&lt;/a&gt; 使用视图窗口&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyView* pView = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pView-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCView&amp;quot;&lt;/span&gt;, WS_CHILD | WS_VISIBLE | WS_BORDER,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CRect&amp;#123;&amp;#125;, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, AFX_IDW_PANE_FIRST);     &lt;span class=&#34;comment&#34;&gt;// AFX_IDW_PANE_FIRST及以上的id创建出来的视图窗口，边框将与客户区重叠，不使用我们传递的CRect对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pViewActive = pView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;老朋友了，相信读者阅读起来不会有什么困难，我们为框架窗口的客户区覆盖上了一个视图窗口。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档&#34;&gt;#&lt;/a&gt; 文档&lt;/h1&gt;
&lt;h2 id=&#34;文档简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档简述&#34;&gt;#&lt;/a&gt; 文档简述&lt;/h2&gt;
&lt;p&gt;在 MFC 中，将数据的管理交给 &lt;code&gt;文档&lt;/code&gt; 负责，再与负责显示数据的 &lt;code&gt;视图&lt;/code&gt; 进行数据交互。&lt;/p&gt;
&lt;h2 id=&#34;cdocument&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cdocument&#34;&gt;#&lt;/a&gt; CDocument&lt;/h2&gt;
&lt;p&gt;MFC 提供的文档类。&lt;/p&gt;
&lt;p&gt;一个文档可以同时与多个视图窗口交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部维护了一个链表，连接所有与当前文档对象交互的视图对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个视图窗口只能与一个文档交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部由一个成员变量指向交互的文档对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用文档&#34;&gt;#&lt;/a&gt; 使用文档&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口，并挂接到框架窗口的主活动视图中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这回，我们有了不少改动。&lt;/p&gt;
&lt;p&gt;首先，我们先从应用的实例初始化开始看起：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们修改了 &lt;code&gt;CMyWinApp::InitInstance&lt;/code&gt;  (及 &lt;code&gt;CMyView&lt;/code&gt;  类)，通过 MFC 的 &lt;code&gt;动态创建机制&lt;/code&gt; ，让 MFC 为我们创建视图窗口，并与主框架窗口建立关联。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说实话，我觉得 MFC 整这么多种选择就很烦 = =，这个也要学哪个也要学，既然要封装不妨封装彻底一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我们还建立了消息映射 &lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt; 、 &lt;code&gt;CMyView::OnCreate&lt;/code&gt; ，但是并没有做别的事，只是调用了父类实现的消息映射；&lt;br&gt;
实际上并不需要我们去建立消息映射然后调用父类的成员函数，这里是为了方便读者看得更明显。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多视图&#34;&gt;#&lt;/a&gt; 多视图&lt;/h1&gt;
&lt;p&gt;在一个 &lt;code&gt;不规则框架窗口&lt;/code&gt; 中，可以同时存在多个视图窗口。&lt;/p&gt;
&lt;p&gt;我们需要在主框架窗口的客户区中，放置不规则框架窗口；&lt;br&gt;
再在不规则框架窗口中放置多个视图窗口。&lt;/p&gt;
&lt;h2 id=&#34;csplitterwnd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csplitterwnd&#34;&gt;#&lt;/a&gt; CSplitterWnd&lt;/h2&gt;
&lt;p&gt;拆分窗口类，即不规则框架窗口，&lt;emp&gt;其客户区可以放置多个视图窗口。&lt;/emp&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试多视图&#34;&gt;#&lt;/a&gt; 尝试多视图&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CSplitterWnd m_pSplitWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 重写框架窗口创建客户区时调用的成员函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateStatic&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);       &lt;span class=&#34;comment&#34;&gt;// 创建布局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView), &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, pContext-&amp;gt;m_pNewViewClass, &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;</content>
        <category term="MFC" />
        <category term="没饭吃" />
        <category term="C++" />
        <category term="界面开发" />
        <updated>2022-10-25T14:01:10.000Z</updated>
    </entry>
</feed>
