<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>鹿鹿鱼鱼 • Posts by &#34;编译原理&#34; tag</title>
        <link>http://yuyuaqwq.github.io</link>
        <description>人为什么要起床？</description>
        <language>zh-CN</language>
        <pubDate>Sun, 30 Oct 2022 11:52:33 +0800</pubDate>
        <lastBuildDate>Sun, 30 Oct 2022 11:52:33 +0800</lastBuildDate>
        <category>MFC</category>
        <category>没饭吃</category>
        <category>逆向分析</category>
        <category>工具</category>
        <category>C/C++</category>
        <category>反汇编</category>
        <category>网络分析</category>
        <category>Proxifier</category>
        <category>编译原理</category>
        <category>动手写ToyLang</category>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/1571.html</guid>
            <title>【动手写ToyLang】3.语法分析</title>
            <link>http://yuyuaqwq.github.io/posts/1571.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Sun, 30 Oct 2022 11:52:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析&#34;&gt;#&lt;/a&gt; 语法分析&lt;/h1&gt;
&lt;p&gt;按照传统的编译原理教材讲述的编译器结构， &lt;code&gt;词法分析阶段&lt;/code&gt; 之后，理当是 &lt;code&gt;语法分析阶段&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如 “程序”，“语句”，“表达式” 等等。语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。语法分析程序可以用 YACC 等工具自动生成。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简而言之，语法分析即要求完成对输入串是否能符合语言文法规定的检查。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;关于文法的定义，参照下文。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法分析器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析器&#34;&gt;#&lt;/a&gt; 语法分析器&lt;/h2&gt;
&lt;p&gt;我们需要实现的是语法分析器。&lt;br&gt;
&lt;strong&gt;语法分析器的主要工作就是接收词法分析器输出的 Token，产出抽象语法树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本意我是不想讲太多学科中严谨定义的内容，一个是不好懂，容易劝退；一个是我个人的理解也有限。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;所以本系列文章就只简单提及我认为的 ToyLang 开发过程中必要的东西。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文法&#34;&gt;#&lt;/a&gt; 文法&lt;/h1&gt;
&lt;p&gt;这里还是请出百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;文法是一个汉语词汇，读音为 wén fǎ ，即文章的书写法规，一般用来指以文字、词语、短句、句子的编排而组成的完整语句和文章的合理性组织。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单点说，&lt;strong&gt;文法就是描述了 Token 应当如何组织的规则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的语言自然也需要存在文法，比如 if 语句必须按照下列规定的文法来解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;   &lt;code&gt;exp&lt;/code&gt;   &lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，现在我们还是将重心放到四则表达式的解析上。&lt;/p&gt;
&lt;h2 id=&#34;上下文无关文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文无关文法&#34;&gt;#&lt;/a&gt; 上下文无关文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在推导产生式时，正在进行的非终结符展开与前后已经展开的终结符不存在关联。&lt;/strong&gt;&lt;br&gt;
可以先继续向下看。&lt;/p&gt;
&lt;h1 id=&#34;ebnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf&#34;&gt;#&lt;/a&gt; EBNF&lt;/h1&gt;
&lt;p&gt;我们选择通过 &lt;code&gt;EBNF&lt;/code&gt;  来描述 &lt;code&gt;ToyLang&lt;/code&gt;  的文法。&lt;/p&gt;
&lt;p&gt;EBNF 是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;扩展巴科斯 - 瑙尔范式 (Extended Backus–Naur Form,EBNF) 是一种用于描述计算机编程语言等正式语言的与上下文无关语法的元语法 (metasyntax) 符号表示法。简而言之，它是一种描述语言的语言。它是基本巴科斯范式 (BNF) 元语法符号表示法的一种扩展。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只看说明通常很难理解新事物，咱们尝试一下用 EBNF 描述四则运算表达式的文法。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; number | exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;number = digit &amp;#123;digit&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;digit = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;5&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;6&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;7&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;8&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了便于理解，这里只描述了加法与减法。&lt;/p&gt;
&lt;h2 id=&#34;基本规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本规则&#34;&gt;#&lt;/a&gt; 基本规则&lt;/h2&gt;
&lt;p&gt;你可能看不明白，没关系，我简单给你讲解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  左边的，我们称为 &lt;code&gt;左式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  右边的，我们称为 &lt;code&gt;右式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;这样一行式子，我们称为 &lt;code&gt;产生式&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非终结符&#34;&gt;#&lt;/a&gt; 非终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;是某条产生式的左式，可以用其右式代换。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;exp&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;digit&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终结符&#34;&gt;#&lt;/a&gt; 终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无法被再被代换的符号。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; …。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;关于更多 EBNF 的语法规则，请参阅相关资料。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;自顶向下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自顶向下&#34;&gt;#&lt;/a&gt; 自顶向下&lt;/h1&gt;
&lt;p&gt;我们需要做的就是：&lt;br&gt;
&lt;strong&gt;找到可以通过不断展开右式的非终结符，直到右式只剩下终结符时，能够与 &lt;code&gt;输入串&lt;/code&gt; 匹配的产生式。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;这个展开的过程我们叫做推导，这属于自顶向下解析的思想。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试解析&#34;&gt;#&lt;/a&gt; 尝试解析&lt;/h2&gt;
&lt;p&gt;我们先来看第一行产生式：&lt;br&gt;
 &lt;code&gt;exp = exp &#39;+&#39; number | exp &#39;-&#39; number | number&lt;/code&gt; &lt;br&gt;
 它描述了 &lt;code&gt;表达式&lt;/code&gt; 可以由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;表达式+数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以由 &lt;code&gt;表达式-数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以只由 &lt;code&gt;数字&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;其中， &lt;code&gt;|&lt;/code&gt;  表示或的意思，如果你学习过正则表达式，应当很容易理解。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假设我们需要解析的 token 序列为 &lt;code&gt;1&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt; ，解析过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;+&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; number &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是在重复将右式中的非终结符展开的过程。&lt;br&gt;
&lt;em&gt;这里为了节约篇幅，我没有将从 number 推导成 digit，再推导成数字的推导过程记录下来，你明白这一点即可。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;再尝试一下解析 token 序列 &lt;code&gt;1&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;3&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; exp &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; number &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; &amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这个推导过程我们忽略了很多细节，并不能直接编写代码实现。&lt;/p&gt;
&lt;h1 id=&#34;尾声&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尾声&#34;&gt;#&lt;/a&gt; 尾声&lt;/h1&gt;
&lt;p&gt;在下一篇文章，我们会通过 EBNF 来描述完整的四则表达式的文法，并且通过 &lt;code&gt;递归下降&lt;/code&gt; 算法实现语法分析器。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 扩展巴科斯范式 (EBNF) 简介.&lt;a href=&#34;https://blog.csdn.net/lin_strong/article/details/78583543&#34;&gt;https://blog.csdn.net/lin_strong/article/details/78583543&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; [2] 应该如何理解「上下文无关文法」？.&lt;a href=&#34;https://www.zhihu.com/question/21833944&#34;&gt;https://www.zhihu.com/question/21833944&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; 其他网络上较为零散的资料，无法一一列举，十分抱歉。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/aca7.html</guid>
            <title>【动手写ToyLang】2.词法分析</title>
            <link>http://yuyuaqwq.github.io/posts/aca7.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Sat, 29 Oct 2022 12:29:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;词法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#词法分析&#34;&gt;#&lt;/a&gt; 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析是整个编译器结构中最简单的一个阶段，所以放轻松，咱们往下看。&lt;/p&gt;
&lt;p&gt;那么，词法分析是什么呢？&lt;br&gt;
我们知道，程序开发者编写的源代码，也就是编译器最初能够接收到的输入，即连续的字符序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析存在的意义，就是提前将源代码切分成能被后续编译程序直接使用的单词序列。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如源代码中的变量标识，关键字，字符串字面量，数值字面量等…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们上一节课所展示的算术表达式， &lt;code&gt;3 + 2&lt;/code&gt; ，也是先将其分成 &lt;code&gt;3&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt; ，才能用于构成抽象语法树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析器产出的单词序列，我们将其称为 &lt;code&gt;Token&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;输入四则运算表达式产出token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入四则运算表达式产出token&#34;&gt;#&lt;/a&gt; 输入四则运算表达式，产出 &lt;code&gt;Token&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;我们既然需要将四则运算表达式转成 &lt;code&gt;Token&lt;/code&gt; ，也就需要知道其单词序列的规则，当然，关于这一点，我们早已烂熟于心了。&lt;br&gt;
以下是我通过正则表达式描述的 &lt;code&gt;Token&lt;/code&gt;  匹配规则 (以我们将要开发的词法分析器为准)。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TokenType&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eof&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Number&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\d+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpAdd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpSub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpMul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpDiv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepLParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepRParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;此处我忽略了运算符在正则表达式中需要转义的情况，做一个参考即可。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;lexer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer&#34;&gt;#&lt;/a&gt; Lexer&lt;/h1&gt;
&lt;p&gt;Lexer，即词法分析器。&lt;br&gt;
接下来我们编写代码实现 Lexer。&lt;/p&gt;
&lt;h2 id=&#34;token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token&#34;&gt;#&lt;/a&gt; Token&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\token.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// token类型常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TokenType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNil = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kEof,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpAdd,    &lt;span class=&#34;comment&#34;&gt;// +&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpSub,    &lt;span class=&#34;comment&#34;&gt;// -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpMul,    &lt;span class=&#34;comment&#34;&gt;// *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpDiv,    &lt;span class=&#34;comment&#34;&gt;// /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepLPar,  &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepRPar,  &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 描述token的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Token&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; line;		&lt;span class=&#34;comment&#34;&gt;// 行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TokenType type;		&lt;span class=&#34;comment&#34;&gt;// token类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string str;	&lt;span class=&#34;comment&#34;&gt;// 保存必要的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\token.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token::Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t_type == type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;token 这部分十分简单，不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;lexer-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer-2&#34;&gt;#&lt;/a&gt; Lexer&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\lexer.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;lexer/token.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LexerException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析器类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Lexer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string m_src;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; m_idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Token m_reserve;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \lexer\lexer.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LexerException::&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg) : std::&lt;span class=&#34;built_in&#34;&gt;exception&lt;/span&gt;(t_msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src) : m_src&amp;#123; t_src &amp;#125;, m_line&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_idx&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_reserve&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, TokenType::kNil &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_idx &amp;lt; m_src.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_src[m_idx++];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 跳过指定字符数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_idx += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Token token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_reserve.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kNil)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果有前瞻保存的token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回前瞻的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token = m_reserve;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_reserve.type = TokenType::kNil;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 跳过空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;amp;&amp;amp; c == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token.line = m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kEof;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据字符返回对应类型的Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpSub;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpDiv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepLParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepRParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;SkipChar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot parse token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们封装了一个词法分析器类；&lt;br&gt;
 &lt;code&gt;Lexer::NextToken&lt;/code&gt;  是关键成员函数，用于扫描字符序列，匹配一个完整的 Token 并返回。&lt;/p&gt;
&lt;h1 id=&#34;测试成果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试成果&#34;&gt;#&lt;/a&gt; 测试成果&lt;/h1&gt;
&lt;p&gt;接下来，我们编写测试代码，用于测试新鲜出炉的词法分析器。&lt;br&gt;
用于测试的表达式是： &lt;code&gt;1 + 33 - 0 * (33 / 999) - 123&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) - 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = lexer.&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (token.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kNumber:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;()); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpAdd: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;+\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpDiv: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;/\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpMul: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;*\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpSub: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepLParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;(\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepRParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 打印结果 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;999&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/56ac.html</guid>
            <title>【动手写ToyLang】1.从四则运算表达式开始</title>
            <link>http://yuyuaqwq.github.io/posts/56ac.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Fri, 28 Oct 2022 23:01:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;由此开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由此开始&#34;&gt;#&lt;/a&gt; 由此开始&lt;/h1&gt;
&lt;p&gt;如果你曾经接触过《编译原理》的话，不知道是否与我有着同样的困惑呢？&lt;/p&gt;
&lt;p&gt;各种不近人情的名词，公式乱飞，这让我学习起来格外痛苦。&lt;/p&gt;
&lt;p&gt;我在尝试阅读过不少文章、书籍，动手之后，才逐渐理解了一些比较关键的东西。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实际上，当我真正自己动手完成了对四则运算表达式的解析的那一刻，我才真切感受到了编译原理的优雅与美妙之处，这大概就是由无数人智慧造就的伟大吧 (偏得有点远了)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，我才会选择先从四则运算表达式开始，将其逐步扩展成为一门 &lt;code&gt;通用编程语言&lt;/code&gt; ，也能让读者每一节都能感受到学习有所反馈的喜悦。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初尝构思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初尝构思&#34;&gt;#&lt;/a&gt; 初尝构思&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;现在，我来尝试给你出一道题吧，请你用你所熟悉的语言，编写一个模块：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;输入符合四则运算表达式规范的字符串 (可以假定只有整数，不存在括号)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出整型结果；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要求关键逻辑由自己实现，不可借由库、语言本身提供的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你能实现吗？&lt;/p&gt;
&lt;p&gt;是否觉得脑子有些空白，难以组织成较为优雅的实现思路呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果你现在就能想到很棒的解法，那至少你要比我厉害多了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我曾经因为某些需求做过尝试，虽然最后写出来了，但是具体实现也非常丑陋，这里就不献丑了。&lt;/p&gt;
&lt;p&gt;但是我可以给你大致描述一下我当初的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，查找字符串中优先级较高的运算符  &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt; ，再前 / 后瞻运算符前后的数字，这个子串也能形成一个表达式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算出结果后，在原表达式中，用结果替换掉子串 (刚刚被计算的表达式)，再继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后再从头开始查找优先级更低一级的运算符 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt; ，直到运算完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当然，我们不会用这么低效的方法，也不会要求你真的写出来。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在提出来，也不是为了为难你，只是为了让你记住眼下的感觉，当你学完本系列文章后，再回来看看，这一道题，是否真的有那么难呢？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;抽象语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象语法树&#34;&gt;#&lt;/a&gt; 抽象语法树&lt;/h1&gt;
&lt;p&gt;咱们先来看百度百科对 &lt;code&gt;抽象语法树&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E6%A0%91/7031301?fromModule=lemma_inlink&#34;&gt;语法树&lt;/a&gt;（Syntax tree），是&lt;a href=&#34;https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink&#34;&gt;源代码&lt;/a&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95?fromModule=lemma_inlink&#34;&gt;语法&lt;/a&gt;结构的一种抽象表示。它以树状的形式表现&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;的语法结构，树上的每个节点都表示源代码中的一种结构。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯… 不愧是名字就带着抽象的东西，连说明都这么抽象。&lt;/p&gt;
&lt;p&gt;咱们先不整那么多虚头巴脑的，干就完了。&lt;/p&gt;
&lt;h2 id=&#34;构造四则运算表达式的ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造四则运算表达式的ast&#34;&gt;#&lt;/a&gt; 构造四则运算表达式的 AST&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;3 + 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个是大家熟悉的算术表达式，实际上，我们人脑是如何计算这个表达式的呢？当然需要遵循某些规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先乘除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再加减&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从左往右结合&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我们自然是需要先&lt;strong&gt;左往右找&lt;/strong&gt;在表达式中找到 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt;  两种符号，好消息是，没有，嘿嘿。&lt;/p&gt;
&lt;p&gt;接下来继续&lt;strong&gt;左往右找&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; ，找到之后将其取出，这也是我们需要计算的子表达式。&lt;/p&gt;
&lt;p&gt;我们将其分成三部分，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边的数字  &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加法运算符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右边的数字  &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以得到这么一棵树型结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们遍历这棵树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 + 2&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多运算符与结合律&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多运算符与结合律&#34;&gt;#&lt;/a&gt; 多运算符与结合律&lt;/h3&gt;
&lt;p&gt;那么，当一个表达式中，存在多个运算符时，应该如何构造语法树呢？&lt;/p&gt;
&lt;p&gt;接下来我们构造表达式  &lt;code&gt;3 - 2 + 4&lt;/code&gt;  的树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先我们应该注意的一点是，需要先被执行运算 (优先级更高) 的子表达式，其节点相对的，要在更底下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还是先来遍历这颗树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；
&lt;ol&gt;
&lt;li&gt;左子节点是减法，表明需要用左子节点减去右子节点，需要继续向下展开；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 - 2&lt;/code&gt; ，返回结果  &lt;code&gt;1&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 4&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，遍历的过程也符合我们所要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由左边的运算符开始，向右结合。&lt;/li&gt;
&lt;li&gt;同优先级下，我们需要优先计算左边的运算符组成的子表达式，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我再给你画一下另一种情况，你也就明白了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以尝试一下遍历这棵树，会发现先被执行的一定是加法，这并不符合我们的从一开始就要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;br&gt;
在部分情况下，由于结合律的错误，就会产出错误的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如我们本次求解的表达式，通过遍历此树得出的结果为 &lt;code&gt;-3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标根据语法规则生成ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标根据语法规则生成ast&#34;&gt;#&lt;/a&gt; 目标：根据语法规则生成 AST&lt;/h2&gt;
&lt;p&gt;我不说你大概也已经猜到了，其实我们上面所构造的树，在当前的应用场景下，就叫做 &lt;code&gt;抽象语法树&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;遍历抽象语法树并计算的过程，与我们人脑对表达式的计算的过程是十分相似的。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，我们只需要构造出这么一颗抽象语法树，就已经基本上完成了编译工作的一大半甚至全部。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;此时，若需要执行编译产生的结果，只需要遍历我们所生成 AST 即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在遍历的过程中，我们就能够正确的完成对加法表达式的加法运算，再完成对赋值表达式的赋值运算。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ast解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast解释器&#34;&gt;#&lt;/a&gt; AST 解释器&lt;/h1&gt;
&lt;p&gt;最后，我们也确实展示了有关 &amp;quot;解释器&amp;quot; 的东西，是的，即便你难以置信。&lt;br&gt;
遍历这棵树的过程，就可以叫做解释；&lt;br&gt;
如果我们写出代码实现遍历树的过程，即是 &lt;code&gt;AST解释器&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，解释器是一种比较广泛的概念，即便到后面我们基于 AST 生成了字节码，交给虚拟机执行，我们的程序也依然可以称之为解释器，只不过解释的对象从 AST 换成了字节码。&lt;/p&gt;
&lt;p&gt;我个人觉得，当初造这个词的人只是为了区分所谓的 &amp;quot;编译型语言&amp;quot; 和 &amp;quot;解释型语言&amp;quot;。&lt;br&gt;
以下是百度百科对解释器的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;解释器（&lt;a href=&#34;https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997?fromModule=lemma_inlink&#34;&gt;英语&lt;/a&gt;：Interpreter），又译为直译器，是一种电脑程序，能够把高级&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;此处关于 &lt;code&gt;每转译一行程序叙述就立刻运行&lt;/code&gt; 的说明也不尽然，至少现在很多被称为 &lt;code&gt;解释器&lt;/code&gt; 的程序，并非如此 (如 Python 解释器、Java 解释器等)。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/c4d3.html</guid>
            <title>【动手写ToyLang】0.前言</title>
            <link>http://yuyuaqwq.github.io/posts/c4d3.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Fri, 28 Oct 2022 21:18:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;关于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于&#34;&gt;#&lt;/a&gt; 关于&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本系列文章会手把手教你打造一门在别人看来是&lt;emp&gt;玩具&lt;/emp&gt;的通用编程语言，事实也确实如此。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但计算机本身就是一门需要动手的学科，在对基本原理有一定程度的理解之后，自己动手实践才是学习的最好的捷径，为此制造 &amp;quot;玩具&amp;quot;，并不丢人。&lt;/p&gt;
&lt;p&gt;笔者对《编译原理》这门学科的学习程度也十分有限，因此本系列文章的读者不仅仅是你们，也包括我，写下的这篇文章也是支撑我继续动手实践的动力。&lt;br&gt;
学完本系列文章之后，基本上可以对编译原理有一定程度的认知，再继续往下学习也就不会那么困难了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;我会尽可能的查阅资料，以保证输出内容的可靠性，如果还是难以避免的出现了错误，望批评指正，感激不尽。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;开发语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发语言&#34;&gt;#&lt;/a&gt; 开发语言&lt;/h2&gt;
&lt;p&gt;这里我选用我个人较为常用的 C++ 作为开发语言，风格尽量以《Google C++ Style Guide》为准，在我个人能力范围内尽量写得 &amp;quot;现代 C++&amp;quot; 一点。&lt;/p&gt;
&lt;p&gt;当然，我个人也还是 C++ 彩笔，代码写得不好，还请理解。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境&lt;/h2&gt;
&lt;p&gt;我基本上只在 Windows 上工作，因此选择自然是 &lt;code&gt;Visual Studio&lt;/code&gt; ，你们可以选择自己喜欢的开发环境。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
