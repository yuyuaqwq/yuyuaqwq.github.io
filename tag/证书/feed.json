{
    "version": "https://jsonfeed.org/version/1",
    "title": "鹿鹿鱼鱼 • All posts by \"证书\" tag",
    "description": "人为什么要起床？",
    "home_page_url": "http://yuyuaqwq.github.io",
    "items": [
        {
            "id": "http://yuyuaqwq.github.io/posts/5d13.html",
            "url": "http://yuyuaqwq.github.io/posts/5d13.html",
            "title": "【密码学】PKI体系：谁来保证我的通信安全？",
            "date_published": "2022-12-08T07:31:19.000Z",
            "content_html": "<h1 id=\"pki概述\"><a class=\"markdownIt-Anchor\" href=\"#pki概述\">#</a> PKI 概述</h1>\n<p><strong>Public Key Infrastructure，即公钥基础设施。</strong></p>\n<p>以下摘自百度百科：</p>\n<blockquote>\n<p>公钥基础设施是一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。<br>\nPKI 体系是计算机软硬件、权威机构及应用系统的结合。它为实施电子商务、电子政务、办公自动化等提供了基本的安全服务，从而使那些彼此不认识或距离很远的用户能通过信任链安全地交流。</p>\n</blockquote>\n<p>当然，要是光看定义能看懂的话，想必各位也不会见到这一篇文章了，贴出定义只是个人习惯，咱们往下看。</p>\n<h1 id=\"明文与密文\"><a class=\"markdownIt-Anchor\" href=\"#明文与密文\">#</a> 明文与密文</h1>\n<p>首先咱们要知道，咱们能够阅读理解的东西是 <code>明文</code> ，比如远在天边的网友给你发的一条 qq 消息，你看到的时候它就是明文，这样你才能看得懂你的网友想和你说些什么。</p>\n<p>当然，你看得懂，别人也看得懂，中文嘛，大家都学过。<br>\n你想着，我要是不想赤裸裸的让别人窥探我的聊天内容是吧，咱们多少还是希望能有些隐私的。</p>\n<p><strong>加密</strong>自然而然的出现了。</p>\n<p>我们通过某种方法对明文原本的信息进行可逆的改变，别人只要不知道我们是如何改变的，就无法还原，只有我们才能够还原为明文。<br>\n加密后无法直接理解的信息，我们就叫做 <code>密文</code> 。</p>\n<h1 id=\"前置知识\"><a class=\"markdownIt-Anchor\" href=\"#前置知识\">#</a> 前置知识</h1>\n<h2 id=\"密钥\"><a class=\"markdownIt-Anchor\" href=\"#密钥\">#</a> 密钥</h2>\n<p>通常也是一组数据，就像现实世界的钥匙，是<strong>加锁 / 解锁</strong>的关键。</p>\n<h2 id=\"对称加密\"><a class=\"markdownIt-Anchor\" href=\"#对称加密\">#</a> 对称加密</h2>\n<p>首先创建一把<strong>密钥</strong>。</p>\n<p>通过这把密钥可以加密明文；<br>\n对密文的解密也需要<strong>同样的一把密钥</strong>。<br>\n<em>如同常见的钥匙和锁一般，加锁和解锁都是同一把钥匙。</em></p>\n<blockquote>\n<p>缺陷：在公共的网络环境中，密钥难以安全传递。</p>\n</blockquote>\n<h2 id=\"非对称加密\"><a class=\"markdownIt-Anchor\" href=\"#非对称加密\">#</a> 非对称加密</h2>\n<p>创建两把密钥，一把公钥，一把私钥，<strong>这两把密钥是对应关系</strong>。<br>\n公钥是公开的，任何人都可以获得。<br>\n私钥是私有的，只有创建者持有。</p>\n<p><em><strong>公钥加密的东西，只有对应的私钥能够解密；</strong></em><br>\n<em><strong>私钥加密的东西，只有对应的公钥能够解密。</strong></em></p>\n<p><em>相对对称加密而言，不存在密钥无法安全传递的问题。</em></p>\n<blockquote>\n<p>缺陷：基本上基于数学难题，加密速度十分缓慢。</p>\n</blockquote>\n<h2 id=\"信息摘要\"><a class=\"markdownIt-Anchor\" href=\"#信息摘要\">#</a> 信息摘要</h2>\n<p><strong>数据的指纹，具有不可逆的性质。</strong></p>\n<p>一般输出的指纹数据长度都是固定的，便于传输。<br>\n通常可以用于验证数据是否被篡改。<br>\n<em><strong>数据被篡改一位，都会导致计算出来的信息摘要不同。</strong></em></p>\n<h1 id=\"安全通信\"><a class=\"markdownIt-Anchor\" href=\"#安全通信\">#</a> 安全通信</h1>\n<p>有了上述基础，你能否在公共网络中构建安全通信信道呢？<br>\n我们来尝试一下。</p>\n<h2 id=\"基本框架非对称加密\"><a class=\"markdownIt-Anchor\" href=\"#基本框架非对称加密\">#</a> 基本框架：非对称加密</h2>\n<p>当然，我们的数据不能在公网上裸奔，因此首先就需要对明文进行加密。</p>\n<p>但此时我们难以解决密钥安全传输的问题，故需要引入 <code>非对称加密</code> 。<br>\n<em>你可能会想到，如果我把密钥也加密呢？那如何解密加密后的密钥呢？是不是也需要一把新的密钥？这把密钥如何传输呢？</em><br>\n<em>往复下去也不会有变化，并没有改变无法安全传输密钥的根本问题。</em></p>\n<h3 id=\"通信过程\"><a class=\"markdownIt-Anchor\" href=\"#通信过程\">#</a> 通信过程</h3>\n<ol>\n<li>\n<p>假设 A、B 需要通信，各自创建私钥与公钥，并且交换公钥；</p>\n<ul>\n<li>公钥是可以公开的，任何人都可以持有。</li>\n</ul>\n</li>\n<li>\n<p>A 向 B 发送消息之前，使用 B 的公钥加密，再发送给 B；</p>\n<ul>\n<li>密文只有 B 能够解密，因为只有 B 持有对应的私钥。</li>\n</ul>\n</li>\n<li>\n<p>B 向 A 发送消息也是如此，使用 A 的公钥加密，再发送给 A。</p>\n</li>\n</ol>\n<h3 id=\"第一个问题计算效率\"><a class=\"markdownIt-Anchor\" href=\"#第一个问题计算效率\">#</a> 第一个问题：计算效率</h3>\n<p>在基础中提及到，非对称加密的计算缓慢，假设传输的数据较多，那么需要消耗大量的时间进行计算。</p>\n<h2 id=\"性能提高引入对称加密\"><a class=\"markdownIt-Anchor\" href=\"#性能提高引入对称加密\">#</a> 性能提高：引入对称加密</h2>\n<p>此时，对称加密计算效率高的特性能够完美弥补这个缺陷，故我们还是需要引入 <code>对称加密</code> ：<br>\n<em>加密方案基本上都会首先基于流行的 <code>加密算法</code> ，只有这种经过全世界密码学家考验的加密算法才是可靠的。</em></p>\n<h3 id=\"通信过程改进\"><a class=\"markdownIt-Anchor\" href=\"#通信过程改进\">#</a> 通信过程改进</h3>\n<ol>\n<li>A、B 交换公钥；</li>\n<li>A 生成本次通信的密钥，使用 B 的公钥加密，再将加密后的密钥发送给 B；</li>\n<li>B 生成本次通信的密钥，使用 A 的公钥加密，再将加密后的密钥发送给 A；\n<ul>\n<li>此步并不一定需要，可以共用一把对称加密密钥。</li>\n</ul>\n</li>\n<li>各自用私钥解密密钥，往后的通信都使用这把密钥加密 / 解密。</li>\n</ol>\n<h3 id=\"第二个问题中间人攻击\"><a class=\"markdownIt-Anchor\" href=\"#第二个问题中间人攻击\">#</a> 第二个问题：中间人攻击</h3>\n<ol>\n<li>A、B 交换公钥；\n<ul>\n<li>假设 A、B 交换公钥的通信信道被 C 窃听了，C 也生成了自己的公钥与私钥对，将 A、B 的公钥保存起来，并将信道上的 A、B 的公钥替换为 C 的公钥发给对方；</li>\n<li>A 收到的是 C 的公钥，B 收到的也是 C 的公钥。</li>\n</ul>\n</li>\n<li>A、B 交换密钥；\n<ul>\n<li>A 使用 C 的公钥加密密钥，发往 B；\n<ul>\n<li>依旧被 C 劫持，C 通过私钥解密，得到原始密钥，再将其通过 B 的公钥加密，替换后发往 B。</li>\n</ul>\n</li>\n<li>B 收到 B 的公钥加密的密钥，用 B 的私钥解密，得到密钥。</li>\n<li>B 发往 A 同理。</li>\n</ul>\n</li>\n</ol>\n<p>这个过程中，A 和 B 看似正常安全的通信，实际上自以为隐私的通信信道早已被 C 看得干干净净。</p>\n<ul>\n<li>对于 A 而言，<strong>C 伪造身份为 B 与 A 通信</strong>；</li>\n<li>对于 B 而言，<strong>C 伪造身份为 A 与 B 通信</strong>。</li>\n</ul>\n<h2 id=\"避免篡改数据指纹\"><a class=\"markdownIt-Anchor\" href=\"#避免篡改数据指纹\">#</a> 避免篡改：数据指纹</h2>\n<p>你可能会想到，既然信息摘要可以避免数据被篡改，那么能不能在发送公钥的时候顺带发送信息摘要来避免中间人伪造身份？</p>\n<p>实际上是不行的，因为<strong>中间人完全可以重新使用相同的信息摘要算法重新计算被替换的公钥，得到新的指纹，将信息摘要也替换。</strong><br>\n<em>而接收者无法辨别信息摘要是否已被替换。</em></p>\n<h2 id=\"验明身份数字证书\"><a class=\"markdownIt-Anchor\" href=\"#验明身份数字证书\">#</a> 验明身份：数字证书</h2>\n<p>首先想一下，现实世界咱们是如何证明你是你呢？<br>\n多数情况下都是亮出身份证，对吧，我们有国家颁发的身份证。<br>\n因为是国家颁发的，有 <code>权威性</code> 和 <code>公信力</code> ，大家伙都相信和认可。</p>\n<p>在公网上证明你是你的话，也得拿出证据说话，随便说说我是不认的，谁知道你是不是中间人那个坏蛋呢？</p>\n<p>因此，证书自然就出现了。</p>\n<hr>\n<h3 id=\"证书\"><a class=\"markdownIt-Anchor\" href=\"#证书\">#</a> 证书</h3>\n<p>证书类似 &quot;身份证&quot;，用于证明某个人 (公司) 的身份，如：</p>\n<p>所有者：ABC, <a href=\"http://www.abc.com\">www.abc.com</a><br>\n 公钥：xxxxxx<br>\n 颁发 CA 机构：XXX<br>\n…</p>\n<hr>\n<p>证书当中记录了一些必要的信息，当然，就简简单单的在证书里写我是 XXX，那肯定也不行，因为一点可信度都没有，中间人也可以给你发这么一串数据，说他也是 XXX，你是信还是不信呢？</p>\n<p>因此引入证书也不可避免的产生了一个问题：<strong>证书也能被替换</strong>。</p>\n<h2 id=\"拒绝伪造数字签名\"><a class=\"markdownIt-Anchor\" href=\"#拒绝伪造数字签名\">#</a> 拒绝伪造：数字签名</h2>\n<p>上面我们提到过，私钥加密的东西，只有公钥才能解密。<br>\n咋一看好像没什么鸡蛋饼用，我这私钥加密，所有人都能解密，这有个啥用啊？<br>\n实际上，这也是验证身份的核心关键： <code>不可抵赖性</code> 。</p>\n<p>如果我们将这个特性应用到证书上呢？</p>\n<p>A 的私钥只有 A 持有，那么 A 用私钥加密的 A 证书，只有用 A 的公钥才能正确解密。<br>\nB 想要判断 A 的身份，只需要用 A 的公钥解密 A 证书，如果能够正确解密的话，那么这个证书就一定是 A 的，别人无法伪造的东西，A 自然无法抵赖，也就验明了 A 的身份。</p>\n<p>我们就把经过公钥加密的证书叫做 <code>数字证书</code> 。</p>\n<p>而用私钥加密数据的过程就叫做 <code>数字签名</code> <br>\n<strong>数字签名具备不可抵赖性</strong>。</p>\n<p>咋一看好像已经完结撒花了，实际上还是无法真正避免中间人攻击。<br>\n因为 A 的公钥需要在公网上传播，就存在被 C 偷天换日，替换为 C 的公钥的可能。</p>\n<p>B 以为拿到的是 A 的公钥，实际上还是 C 的公钥，因此 C 用 C 的私钥伪造数字证书再发给 B，B 当然能够正确解密，这也给了 B 一个错觉：和我通信的 A 的身份没有问题。<br>\n所以 A 和 B 见面后：</p>\n<blockquote>\n<p>B：就是你，A！你为什么要骂我？我要和你绝交！<br>\nA：？？？？啥啊，我说啥了！<br>\nB：还想抵赖？我都能用你的公钥解开你的数字证书！</p>\n</blockquote>\n<h2 id=\"无奈之举本地预装\"><a class=\"markdownIt-Anchor\" href=\"#无奈之举本地预装\">#</a> 无奈之举：本地预装</h2>\n<p>哪里都有 C 这个小人，咱们实在是没法子了，干脆直接在本地计算机中预先存放公钥吧，这样 C 就没有替换公钥的机会了。</p>\n<p>但是这样又会出现其他的问题：</p>\n<ul>\n<li>如何提前预装需要与其通信的对象的公钥？这就跟如何安全交换对称加密密钥是一个难度了，属于物理层面的难题。</li>\n</ul>\n<h2 id=\"最终解法权威机构\"><a class=\"markdownIt-Anchor\" href=\"#最终解法权威机构\">#</a> 最终解法：权威机构</h2>\n<p>人们怎么能被 C 这个小人打败呢？于是，这么一套验证体系出现了：<br>\n<strong>在本地计算机中预装 <code>权威机构CA</code>  颁发的 <code>数字证书</code> ，通过 CA 的数字证书来验证经过了公网的数字证书是否可信，避免中间人攻击。</strong></p>\n<h3 id=\"ca证书授权中心\"><a class=\"markdownIt-Anchor\" href=\"#ca证书授权中心\">#</a> CA 证书授权中心</h3>\n<p><strong> <code>CA证书授权(CertificateAuthority)中心</code> 是数字证书发行的唯一机构。</strong></p>\n<p>CA 机构持有自己的公钥与私钥</p>\n<ul>\n<li>公钥是公开的，会包含在<strong>数字证书</strong>内，预置到操作系统 / 浏览器中。\n<ul>\n<li>即 CA 机构会生成一份自己的明文证书 (里面的公钥就是公开的公钥)，然后自己用私钥<strong>签名</strong> (又或者是交给其他 CA 机构去签名)，自签发的数字证书就应该是根证书，不管是自签发还是其他 CA 机构签发的，最后都会得到<strong>数字证书</strong>。</li>\n</ul>\n</li>\n<li>私钥由 CA 机构自行保存。\n<ul>\n<li>这样子就保证了数字签名的可靠，因为别人是无法得到 CA 机构的私钥的，也就无法伪造该 CA 机构所签发的数字证书。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"签发数字证书\"><a class=\"markdownIt-Anchor\" href=\"#签发数字证书\">#</a> 签发数字证书</h2>\n<p>B 假定是服务器，他如果想和客户端建立安全信道，得到客户端的信任，就需要先向 CA 机构申请数字证书。</p>\n<ul>\n<li>B 提交证书；</li>\n<li>CA 机构对证书进行签名，得到数字证书，交回给 B。</li>\n</ul>\n<p>签发后的数字证书包含了：<strong>证书内容</strong>、<strong>摘要算法</strong>、<strong>加密摘要信息</strong> 三部分。</p>\n<p>CA 机构使用摘要算法对证书内容进行计算，得到摘要信息，再对摘要信息使用私钥进行加密。<br>\n<em>为什么不直接加密证书内容？因为加密摘要信息可以减少计算量，同样也可以保证数字证书不被篡改。</em></p>\n<p>客户端收到 B 的数字证书时，就会先使用预装的 CA 数字证书 (包含了 CA 的公钥) 对加密摘要信息进行解密，同时用摘要算法对证书内容进行计算，得到摘要信息。<br>\n最后比较解密后的摘要信息与计算得出的摘要信息，相同则表示数据并未被篡改。</p>\n<p>看到这里想必有些读者就迷糊了：<br>\n<em><strong>CA 机构颁发的数字证书和服务器的数字证书到底是不是一回事呢？</strong></em><br>\n可以说是一回事，他们是逐层签发的关系。<br>\n我先信任我计算机中的数字证书，而服务器发过来的数字证书又是我所信任的数字证书对应的私钥 (CA 机构持有) 签发的 (通过我所信任的数字证书进行验证)，故我再信任服务器发过来的数字证书。</p>\n<p><em><strong>可为什么预装的是数字证书，而不是直接是公钥呢？</strong></em><br>\n有更多的信息需要存放，因此将其封装是更好的选择。</p>\n<p><em><strong>为什么是服务器申请数字证书，客户端不需要吗？</strong></em><br>\n首先数字证书通常需要向权威机构申请，并且是需要钱的；<br>\n其次也很难为全世界所有计算机都分配数字证书；<br>\n最后通常也无需验证客户端的身份，因为服务器所服务的对象绝大多数应用场景下并不特指某个客户端 (不管你是正常用户还是坏蛋，我都一视同仁)，只需要客户端认证服务器的身份就足够了。</p>\n<h1 id=\"验证过程\"><a class=\"markdownIt-Anchor\" href=\"#验证过程\">#</a> 验证过程</h1>\n<h2 id=\"签名\"><a class=\"markdownIt-Anchor\" href=\"#签名\">#</a> 签名：</h2>\n<ol>\n<li>A 生成证书 (填好个人信息)，发给 CA 机构。</li>\n<li>CA 机构通过散列函数对明文证书进行计算，得到明文证书的信息摘要。</li>\n<li>CA 机构通过持有的私钥加密信息摘要，其结果即<strong>数字签名</strong>。</li>\n<li>将明文证书以及数字签名打包，即得到<strong>数字证书</strong>，再发给申请者 A。</li>\n</ol>\n<h2 id=\"验签\"><a class=\"markdownIt-Anchor\" href=\"#验签\">#</a> 验签：</h2>\n<ol>\n<li>B 收到 A 发来的<strong>数字证书</strong>，包含了明文证书与 CA 机构签发的<strong>数字签名</strong>。</li>\n<li>B 通过本地预置的 CA 机构<strong>数字证书</strong>中的公钥，对<strong>数字签名</strong>进行解密，得到信息摘要</li>\n<li>B 通过散列函数对明文证书进行计算，得到明文证书的信息摘要。</li>\n<li>比较计算明文证书得到的信息摘要与解密<strong>数字签名</strong>得到的信息摘要，不同则表示明文证书被篡改了。</li>\n</ol>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\">#</a> 补充</h2>\n<ul>\n<li>\n<p>CA 是有能力进行中间人攻击的，因为 CA 持有大家伙本地计算机预置公钥的私钥。</p>\n<ul>\n<li>CA 叫做 CA 的意义就在这里，CA 机构必须是权威公信的，不能做出这种行为，否则将会失去大家伙的信任。</li>\n</ul>\n</li>\n<li>\n<p><strong>数字签名并非只能用于签名明文证书得到数字证书，可以用于签名任何数据防止篡改。</strong></p>\n</li>\n</ul>\n<h1 id=\"信任证书链\"><a class=\"markdownIt-Anchor\" href=\"#信任证书链\">#</a> 信任证书链</h1>\n<p>如公司 ABC 的数字证书，就是由 A 机构签发的，需要用 A 机构的数字证书来验签；<br>\n而 A 机构的数字证书又是 B 机构签发的，需要用 B 机构的数字证书来验签；<br>\n这样就形成了信任链。</p>\n<p><strong>信任过程就是逐层向上的验签，直到根证书 (Root，即自签名的证书) 为止；</strong><br>\n<em><strong>对根证书只能无条件信任。</strong></em></p>\n<h1 id=\"windowspe文件数字签名简述\"><a class=\"markdownIt-Anchor\" href=\"#windowspe文件数字签名简述\">#</a> WindowsPE 文件数字签名简述</h1>\n<p>Windows 的 PE 文件如果存在数字签名，那么在其安全目录中，即包含了数字证书，再将 PE 文件散列值进行数字签名 (由 PE 文件数字证书的所有者签名)，同样也包含在内。<br>\n首先通过本地预置数字证书证明 PE 文件中数字证书的可靠性，再通过 PE 文件中的数字证书的公钥解密 (验签) 数字签名，得到正确的散列值，再计算 PE 文件的散列值进行比较。</p>\n<h1 id=\"参考文献\"><a class=\"markdownIt-Anchor\" href=\"#参考文献\">#</a> 参考文献</h1>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/sky8336/article/details/113696551\">https://blog.csdn.net/sky8336/article/details/113696551</a><br>\n<a href=\"https://zhuanlan.zhihu.com/p/43789231\">https://zhuanlan.zhihu.com/p/43789231</a></p>\n</blockquote>\n",
            "tags": [
                "密码学",
                "PKI",
                "证书",
                "签名"
            ]
        }
    ]
}