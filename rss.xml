<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>鹿鹿鱼鱼</title>
        <link>http://yuyuaqwq.github.io</link>
        <description>人为什么要起床？</description>
        <language>zh-CN</language>
        <pubDate>Fri, 14 Oct 2022 17:49:00 +0800</pubDate>
        <lastBuildDate>Fri, 14 Oct 2022 17:49:00 +0800</lastBuildDate>
        <category>MFC</category>
        <category>没饭吃</category>
        <category>逆向分析</category>
        <category>工具</category>
        <category>C/C++</category>
        <category>反汇编</category>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/51b.html</guid>
            <title>【C/C++逆向】数据类型的表现形式</title>
            <link>http://yuyuaqwq.github.io/posts/51b.html</link>
            <category>逆向分析</category>
            <category>C/C++</category>
            <category>反汇编</category>
            <pubDate>Fri, 14 Oct 2022 17:49:00 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;咱也不知道发生了啥&#34; data-whm=&#34;咱也不知道发生了啥&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;dfea2844e4baf3c8dcd5a0ea14f21045fd66d72652f94d8b7b034e0193d5ff28&#34;&gt;db3f4eb17c2318c256622b6960219afda507dbc0f727563f20c8a378137edd144480af96f63ef9ac5ad29fe678f7a1b1&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;或许，需要什么魔法咒语？&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/3fe5.html</guid>
            <title>【C/C++逆向】前言</title>
            <link>http://yuyuaqwq.github.io/posts/3fe5.html</link>
            <category>逆向分析</category>
            <category>C/C++</category>
            <category>反汇编</category>
            <pubDate>Fri, 14 Oct 2022 17:48:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;当前分类所收录的博客主要是我个人学习 C/C++ 逆向时记录的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料&lt;br&gt;
《C++ 反汇编与逆向分析技术揭秘 (第 2 版)》. 钱林松、张延清&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/3f7e.html</guid>
            <title>【工具推荐】常用工具推荐与用法</title>
            <link>http://yuyuaqwq.github.io/posts/3f7e.html</link>
            <category>逆向分析</category>
            <category>工具</category>
            <pubDate>Fri, 14 Oct 2022 16:13:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;em&gt;&lt;strong&gt;工欲善其事，必先利其器。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里收录了一些我个人常用并推荐的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;动态分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态分析&#34;&gt;#&lt;/a&gt; 动态分析&lt;/h1&gt;
&lt;h2 id=&#34;软件调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#软件调试&#34;&gt;#&lt;/a&gt; 软件调试&lt;/h2&gt;
&lt;h3 id=&#34;x64dbg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#x64dbg&#34;&gt;#&lt;/a&gt; x64dbg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;面向未来的 Windows R3 调试器，开源，支持 x86/x64。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官方网站&lt;br&gt;
&lt;a href=&#34;https://x64dbg.com/&#34;&gt; https://x64dbg.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐插件&lt;br&gt;
 ret-sync&lt;br&gt;
SharpOD&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;windbg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windbg&#34;&gt;#&lt;/a&gt; WinDbg&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;微软家的东西，不仅能够调试应用，还能调试内核，学习内核必备的工具。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;推荐辅助工具&lt;br&gt;
 VirtualKD-Redux&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;内存搜索&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存搜索&#34;&gt;#&lt;/a&gt; 内存搜索&lt;/h2&gt;
&lt;h3 id=&#34;cheat-engine&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cheat-engine&#34;&gt;#&lt;/a&gt; Cheat Engine&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;大名鼎鼎的 CE，开源的内存修改工具，但不仅仅只能用于修改内存，其中依赖于调试机制的 &amp;quot;找出是什么访问 / 修改了这个地址&amp;quot; 等功能也非常好用。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;https://www.cheatengine.org/&#34;&gt; https://www.cheatengine.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;进程监控&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程监控&#34;&gt;#&lt;/a&gt; 进程监控&lt;/h2&gt;
&lt;h3 id=&#34;process-monitor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#process-monitor&#34;&gt;#&lt;/a&gt; Process Monitor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;用于 Windows 的高级监控工具，能够实时监控进程的行为，如文件、注册表、网络等动作，对分析工作有很大的帮助。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载地址&lt;br&gt;
&lt;a href=&#34;https://learn.microsoft.com/en-us/sysinternals/downloads/procmon&#34;&gt; https://learn.microsoft.com/en-us/sysinternals/downloads/procmon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;火绒剑&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#火绒剑&#34;&gt;#&lt;/a&gt; 火绒剑&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;火绒剑的系统监控也意外的好用，比起 Process Monitor，我觉得火绒剑的使用体验更加轻快。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;网络分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络分析&#34;&gt;#&lt;/a&gt; 网络分析&lt;/h2&gt;
&lt;h3 id=&#34;wireshark&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wireshark&#34;&gt;#&lt;/a&gt; WireShark&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;开源的网络分析工具，针对网卡抓包，能用于分析学习更底层的协议 (传输层，网络层、数据链路层)。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;https://www.wireshark.org/&#34;&gt; https://www.wireshark.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fiddler&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fiddler&#34;&gt;#&lt;/a&gt; Fiddler&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;免费的 http/https 抓包工具，基于系统代理工作，https 抓包原理是中间人攻击，为操作系统安装 Fiddler 生成的证书，就能截获信任操作系统中安装的证书的应用程序的 https 流量。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;https://www.telerik.com/fiddler&#34;&gt; https://www.telerik.com/fiddler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;强制代理工具，有些应用并不会使用系统代理设置指定的代理，因此 Fiddler 无法截获这类应用的 http/https 流量，这个时候 Proxifier 是很好的搭档。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;静态分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态分析&#34;&gt;#&lt;/a&gt; 静态分析&lt;/h1&gt;
&lt;h2 id=&#34;反汇编&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反汇编&#34;&gt;#&lt;/a&gt; 反汇编&lt;/h2&gt;
&lt;h3 id=&#34;ida&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ida&#34;&gt;#&lt;/a&gt; IDA&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;我觉得 &amp;quot;IDA&amp;quot; 这个名字，就是对 &amp;quot;静态分析&amp;quot; 最有力的诠释了，世界顶级的交互式反汇编工具，功能及其强大，所以使用也很复杂。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;推荐书籍&lt;br&gt;
《IDA Pro 权威指南 (第 2 版)》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐插件&lt;br&gt;
 ret-sync&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;pe分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pe分析&#34;&gt;#&lt;/a&gt; PE 分析&lt;/h2&gt;
&lt;h3 id=&#34;cff-explorer-viii&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cff-explorer-viii&#34;&gt;#&lt;/a&gt; CFF Explorer VIII&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;很优秀的 PE 分析工具，用过之后就基本上没有再尝试其他的 PE 工具了。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;十六进制编辑器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十六进制编辑器&#34;&gt;#&lt;/a&gt; 十六进制编辑器&lt;/h2&gt;
&lt;h3 id=&#34;hxd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hxd&#34;&gt;#&lt;/a&gt; HxD&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;个人体验很好的免费十六进制编辑器，轻便。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;https://mh-nexus.de/en/hxd/&#34;&gt; https://mh-nexus.de/en/hxd/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/c22c.html</guid>
            <title>【MFC】探索消息映射机制的实现原理</title>
            <link>http://yuyuaqwq.github.io/posts/c22c.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <pubDate>Tue, 11 Oct 2022 22:08:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;消息机制简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息机制简述&#34;&gt;#&lt;/a&gt; 消息机制简述&lt;/h1&gt;
&lt;p&gt;我们知道，Windows 的窗口是由&lt;strong&gt;消息&lt;/strong&gt;驱动的；&lt;br&gt;
Windows 通过捕获鼠标、键盘等输入设备产生的动作，再生成对应的消息，并传递给相应的窗口所属的线程。&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;直接基于 &lt;code&gt;Win32API&lt;/code&gt;  开发时，我们需要在注册窗口类时指定&lt;strong&gt;窗口过程函数&lt;/strong&gt;，以告知 Windows 回调 (传递消息) 的入口。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc的消息映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc的消息映射&#34;&gt;#&lt;/a&gt; MFC 的消息映射&lt;/h1&gt;
&lt;p&gt;而 MFC 为我们提供了一种更为方便的机制，&lt;emp&gt;直接为一个消息与一个函数建立映射关系&lt;/emp&gt;，在消息产生时，回调此函数，而不再需要我们去自行分发。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ON_MESSAGE&lt;/span&gt;(WM_CREATE, OnCreate)   &lt;span class=&#34;comment&#34;&gt;// 将WM_CREATE与CMyFrameWnd类的成员函数OnCreate建立映射&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;消息映射宏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射宏&#34;&gt;#&lt;/a&gt; 消息映射宏&lt;/h2&gt;
&lt;p&gt;MFC 的消息映射是通过几个&lt;strong&gt;宏函数&lt;/strong&gt;来实现的，我们以上述代码为例，将宏展开，一探究竟。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;声明宏&lt;br&gt;
 MFC 的声明宏，就是在窗口类中声明两个受保护的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ECLARE_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义宏&lt;br&gt;
定义则稍显复杂，由多个宏函数组成，实际上是在实现声明宏声明的成员函数。&lt;/p&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; BEGIN_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;BEGIN_MESSAGE_MAP(CMyFrameWnd, CFrameWnd)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; ON_MESSAGE() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;p&gt;&lt;code&gt;ON_MESSAGE(WM_CREATE, OnCreate)&lt;/code&gt;&lt;/p&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实际上是在为_messageEntries变量的初始化列表添加结构体元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
  &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; END_MESSAGE_MAP() &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	__pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体展开&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 消息映射示例-宏展开 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;protected&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;Window Create!&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PTM_WARNING_DISABLE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CMyFrameWnd ThisClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;typedef&lt;/span&gt; CFrameWnd TheBaseClass;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(push))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(disable: &lt;span class=&#34;number&#34;&gt;4640&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(OnCreate))&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __pragma(&lt;span class=&#34;built_in&#34;&gt;warning&lt;/span&gt;(pop))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &amp;amp;TheBaseClass::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;PTM_WARNING_RESTORE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;通过宏添加消息映射时，实际上是重写了 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;GetMessageMap&lt;/code&gt;  成员虚函数；&lt;br&gt;
而 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数初始化了一个名为 &lt;code&gt;_messageEntries&lt;/code&gt;  和 &lt;code&gt;messageMap&lt;/code&gt;  的&lt;strong&gt;静态局部变量&lt;/strong&gt;，并将该变量的地址返回。&lt;br&gt;
我们简单猜测，与上一节重写 &lt;code&gt;WindowProc&lt;/code&gt;  类似，微软在&lt;strong&gt;窗口过程函数&lt;/strong&gt; &lt;code&gt;AfxWndProc&lt;/code&gt;  的某处，得到窗口对象之后，以窗口对象的身份调用其成员虚函数 &lt;code&gt;GetMessageMap&lt;/code&gt; ；&lt;br&gt;
由于成员虚函数被重写的原因，得到我们所设定的&lt;strong&gt;映射关系表&lt;/strong&gt;，我们这里就把它叫做&lt;strong&gt;消息映射表&lt;/strong&gt;；&lt;br&gt;
基于此消息映射表，就可以在&lt;strong&gt;窗口过程函数&lt;/strong&gt;中，&lt;emp&gt;根据消息调用对应的成员函数&lt;/emp&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;探索实现原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#探索实现原理&#34;&gt;#&lt;/a&gt; 探索实现原理&lt;/h1&gt;
&lt;p&gt;我们基本上能够理解消息映射机制的工作原理，这小节我们就扒一下微软的源码，以便更清晰的了解消息映射机制。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxWndProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT CALLBACK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;title&#34;&gt;AfxWndProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HWND hWnd, UINT nMsg, WPARAM wParam, LPARAM lParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// special message which identifies the window as using AfxWndProc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (nMsg == WM_QUERYAFXWNDPROC)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// all other messages route through message map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWnd* pWnd = CWnd::&lt;span class=&#34;built_in&#34;&gt;FromHandlePermanent&lt;/span&gt;(hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd==&lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || pWnd-&amp;gt;m_hWnd == hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || pWnd-&amp;gt;m_hWnd != hWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ::&lt;span class=&#34;built_in&#34;&gt;DefWindowProc&lt;/span&gt;(hWnd, nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;AfxCallWndProc&lt;/span&gt;(pWnd, hWnd, nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;调试上面提供的代码，首先在 &lt;code&gt;AfxWndProc&lt;/code&gt;  函数设置断点；&lt;/p&gt;
&lt;p&gt;继续走到 &lt;code&gt;AfxCallWndProc&lt;/code&gt; ；&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxCallWndProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT AFXAPI &lt;span class=&#34;title&#34;&gt;AfxCallWndProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* pWnd, HWND hWnd, UINT nMsg,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	WPARAM wParam = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, LPARAM lParam = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// delegate to object&amp;#x27;s WindowProc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = pWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;WindowProc&lt;/span&gt;(nMsg, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;到此处停下，此时你可能会有些疑惑，诶，我们并没有重写 &lt;code&gt;Cwnd::WindowProc&lt;/code&gt; ，为什么要到此处停下？&lt;br&gt;
因为微软将消息映射机制放到了此函数内实现。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::WindowProc &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;LRESULT &lt;span class=&#34;title&#34;&gt;CWnd::WindowProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// OnWndMsg does most of the work, except for DefWindowProc call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LRESULT lResult = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;OnWndMsg&lt;/span&gt;(message, wParam, lParam, &amp;amp;lResult))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = &lt;span class=&#34;built_in&#34;&gt;DefWindowProc&lt;/span&gt;(message, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; lResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;继续到进入 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt; 。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* pMessageMap; pMessageMap = &lt;span class=&#34;built_in&#34;&gt;GetMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;上面的代码我们暂时不关心，只关心对 &lt;code&gt;GetMessageMap&lt;/code&gt;  函数的调用；&lt;br&gt;
还记得吗？我们将消息声明 / 定义宏展开后，就相当于我们为 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类定义了两个函数：&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此处是以 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类的对象的身份调用的 &lt;code&gt;GetMessageMap&lt;/code&gt; ，因此实际上是在调用我们类中由消息映射宏重写的成员虚函数。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyFrameWnd::GetMessageMap &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;GetThisMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这里只是简单的调用了静态成员函数 &lt;code&gt;GetThisMessageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyFrameWnd::GetThisMessageMap &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* PASCAL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::GetThisMessageMap&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY _messageEntries[] =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; WM_CREATE, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_lwl, (AFX_PMSG)(AFX_PMSGW)(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;built_in&#34;&gt;LRESULT&lt;/span&gt;(AFX_MSG_CALL CWnd::*)(WPARAM, LPARAM)&amp;gt;(&amp;amp;OnCreate)) &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, AfxSig_end, (AFX_PMSG)&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP messageMap =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123; &amp;amp;CFrameWnd::GetThisMessageMap, &amp;amp;_messageEntries[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &amp;amp;messageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我这里对原先的代码做了一些简化，更方便看一点，实际上呢就是为当前函数的静态局部变量 &lt;code&gt;_messageEntries&lt;/code&gt; 、 &lt;code&gt;messageMap&lt;/code&gt;  赋值，并返回 &lt;code&gt;messageMap&lt;/code&gt;  的地址。&lt;/p&gt;
&lt;p&gt;又回到 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP* pMessageMap; pMessageMap = &lt;span class=&#34;built_in&#34;&gt;GetMessageMap&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  UINT iHash; iHash = (&lt;span class=&#34;built_in&#34;&gt;LOWORD&lt;/span&gt;((DWORD_PTR)pMessageMap) ^ message) &amp;amp; (iHashMax&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	winMsgLock.&lt;span class=&#34;built_in&#34;&gt;Lock&lt;/span&gt;(CRIT_WINMSGCACHE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AFX_MSG_CACHE* pMsgCache; pMsgCache = &amp;amp;_afxMsgCache[iHash];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; AFX_MSGMAP_ENTRY* lpEntry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message == pMsgCache-&amp;gt;nMsg &amp;amp;&amp;amp; pMessageMap == pMsgCache-&amp;gt;pMessageMap)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// not in cache, look for it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pMsgCache-&amp;gt;nMsg = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pMsgCache-&amp;gt;pMessageMap = pMessageMap;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;使 &lt;code&gt;pMessageMap&lt;/code&gt;  指向静态局部变量 &lt;code&gt;messageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;记住上述代码的第 &lt;code&gt;19&lt;/code&gt; ~ &lt;code&gt;20&lt;/code&gt;  行要进入循环；&lt;/p&gt;
&lt;p&gt;剩下的我们暂时不关心，继续向下看。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// Note: catch not so common but fatal mistake!!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//      BEGIN_MESSAGE_MAP(CMyWnd, CMyWnd)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pMessageMap != (*pMessageMap-&amp;gt;pfnGetBaseMap)());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message &amp;lt; &lt;span class=&#34;number&#34;&gt;0xC000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;comment&#34;&gt;// constant window message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((lpEntry = &lt;span class=&#34;built_in&#34;&gt;AfxFindMessageEntry&lt;/span&gt;(pMessageMap-&amp;gt;lpEntries,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					message, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)) != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pMsgCache-&amp;gt;lpEntry = lpEntry;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					winMsgLock.&lt;span class=&#34;built_in&#34;&gt;Unlock&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; LDispatch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;第 &lt;code&gt;10&lt;/code&gt; ~ &lt;code&gt;11&lt;/code&gt;  行是关键函数， &lt;code&gt;pMessageMap-&amp;gt;lpEntries&lt;/code&gt;  即是访问静态局部变量 &lt;code&gt;messageMap&lt;/code&gt;  的第二个成员，也就是 &lt;code&gt;_messageEntries&lt;/code&gt;  的地址；&lt;br&gt;
而 &lt;code&gt;message&lt;/code&gt;  就是本次窗口过程处理的消息 ID 了；&lt;/p&gt;
&lt;emp&gt;即传入消息映射表地址和消息，查找对应的条目&lt;/emp&gt;。
&lt;p&gt;返回值即是 &lt;code&gt;_messageEntries&lt;/code&gt;  中对应条目的地址，如果返回 &lt;code&gt;NULL&lt;/code&gt;  表示消息映射表中不存在此消息。&lt;br&gt;
我们假定此消息已经被我们影射了，跟随 &lt;code&gt;goto LDispatch;&lt;/code&gt;  继续。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::OnWndMsg &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;LDispatch:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(message &amp;lt; &lt;span class=&#34;number&#34;&gt;0xC000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mmf.pfn = lpEntry-&amp;gt;pfn;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (lpEntry-&amp;gt;nSig)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; AfxSig_l_w_l:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		lResult = (&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;-&amp;gt;*mmf.pfn_l_w_l)(wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;最终会在此处以 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象的身份调用我们指定的 &lt;code&gt;OnCreate&lt;/code&gt;  成员函数。&lt;/p&gt;
&lt;h2 id=&#34;消息映射表链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消息映射表链表&#34;&gt;#&lt;/a&gt; 消息映射表链表&lt;/h2&gt;
&lt;p&gt;整个流程基本上到这里就完成了，实际上我们留了一个小坑，即上面代码中我们暂时跳过的 for 循环。&lt;/p&gt;
&lt;p&gt;实际上那是在遍历&lt;emp&gt;消息映射表链表&lt;/emp&gt;，但是我们并没有提过，存在多个消息映射表这件事。&lt;/p&gt;
&lt;p&gt;实际上， &lt;code&gt;CFrameWnd&lt;/code&gt;  类也使用了消息映射机制，而 &lt;code&gt;CMyFrameWnd::GetMessageMap&lt;/code&gt;  函数中的静态局部变量 &lt;code&gt;messageMap&lt;/code&gt; ，第一个成员指向的就是静态成员函数 &lt;code&gt;CFrameWnd::GetThisMessageMap&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;comment&#34;&gt;/* pMessageMap already init&amp;#x27;ed */&lt;/span&gt;; pMessageMap-&amp;gt;pfnGetBaseMap != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      pMessageMap = (*pMessageMap-&amp;gt;pfnGetBaseMap)())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而 &lt;code&gt;pMessageMap-&amp;gt;pfnGetBaseMap&lt;/code&gt; ，就是在访问 &lt;code&gt;messageMap&lt;/code&gt;  的第一个成员。&lt;/p&gt;
&lt;p&gt;这个 for 循环的工作如下：&lt;br&gt;
从链表头 ( &lt;code&gt;CMyFrameWnd&lt;/code&gt; ) 开始，&lt;emp&gt;即最子类向上遍历，依次查找是否存在与本次消息匹配的消息映射关系，存在则调用对应的成员函数并返回&lt;/emp&gt;。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/78f0.html</guid>
            <title>【MFC】探索窗口创建机制的实现原理</title>
            <link>http://yuyuaqwq.github.io/posts/78f0.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <pubDate>Thu, 06 Oct 2022 12:48:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;何时创建窗口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#何时创建窗口&#34;&gt;#&lt;/a&gt; 何时创建窗口？&lt;/h1&gt;
&lt;p&gt;我们在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发窗口程序的时候，一般都是在消息循环之前调用相关的函数创建窗口，那么 MFC 的窗口是在何时被创建的呢？&lt;/p&gt;
&lt;p&gt;实际上，我们重写了 &lt;code&gt;InitInstance&lt;/code&gt;  成员虚函数，并在函数中编写了创建了窗口的代码；&lt;br&gt;
根据我们之前分析的程序流程， &lt;code&gt;InitInstance&lt;/code&gt;  的调用时机在 &lt;code&gt;Run&lt;/code&gt;  之前，这自然也合情合理。&lt;/p&gt;
&lt;h1 id=&#34;窗口的基本创建流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#窗口的基本创建流程&#34;&gt;#&lt;/a&gt; 窗口的基本创建流程&lt;/h1&gt;
&lt;p&gt;还是之前的示例代码：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyFrameWnd* frame = new CMyFrameWnd;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们 new 了一个 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象，而 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类继承自 &lt;code&gt;CFrameWnd&lt;/code&gt;  类。&lt;br&gt;
 &lt;code&gt;CFrameWnd&lt;/code&gt;  是对框架窗口的封装。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;frame-&amp;gt;Create(nullptr, L&amp;quot;MFCBase&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;基于新建的 &lt;code&gt;frame&lt;/code&gt; ，调用了 &lt;code&gt;Create&lt;/code&gt;  成员函数，我们猜测内部应当是调用了 &lt;code&gt;CreateWindow&lt;/code&gt;  之类创建窗口的函数。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;m_pMainWnd = frame;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;m_pMainWnd&lt;/code&gt;  是 &lt;code&gt;CWinThread&lt;/code&gt;  类的成员，指向当前线程的主窗口。&lt;br&gt;
那么我们所做的其实就是，创建一个框架窗口，并使其成为 &lt;code&gt;g_theApp&lt;/code&gt;  的主窗口。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;读者可能会有些疑惑，线程和窗口又有什么关系？&lt;br&gt;
实际上，Windows 产生的消息都是发送给线程的，每一个窗口都必须关联到一个线程中，一个线程可以被多个窗口关联。&lt;br&gt;
消息循环就是线程的工作， &lt;code&gt;GetMessage&lt;/code&gt;  从当前线程的消息队列中获取消息；&lt;br&gt;
 &lt;code&gt;DispatchMessage&lt;/code&gt;  负责将消息再次派发给当前线程的所属窗口中对应的窗口 ( &lt;code&gt;回调窗口过程函数&lt;/code&gt; )。&lt;br&gt;
我们所定义的 &lt;code&gt;g_theApp&lt;/code&gt; ，表示的是应用程序的主线程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这两行就更加明显了，猜测内部应当是调用了 &lt;code&gt;ShowWindow&lt;/code&gt; 、 &lt;code&gt;UpdateWindow&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;框架窗口的create分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#框架窗口的create分析&#34;&gt;#&lt;/a&gt; 框架窗口的 Create 分析&lt;/h1&gt;
&lt;p&gt;我们在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发桌面应用时，创建窗口前会先注册窗口类、指定各种各样的字段和参数，创建窗口，十分繁琐。&lt;br&gt;
而 MFC 为我们简化到只需要传递两个参数就能创建一个窗口，接下来我们进入这个函数内部一探究竟。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CFrameWnd::Create 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CFrameWnd::Create&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCTSTR lpszClassName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszWindowName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD dwStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; RECT&amp;amp; rect,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	CWnd* pParentWnd,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszMenuName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	DWORD dwExStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	CCreateContext* pContext)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	HMENU hMenu = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lpszMenuName != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// load in a menu that will get destroyed when window gets destroyed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		HINSTANCE hInst = &lt;span class=&#34;built_in&#34;&gt;AfxFindResourceHandle&lt;/span&gt;(lpszMenuName, ATL_RT_MENU);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; ((hMenu = ::&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(hInst, lpszMenuName)) == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: failed to load menu for CFrameWnd.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;PostNcDestroy&lt;/span&gt;();            &lt;span class=&#34;comment&#34;&gt;// perhaps delete the C++ object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;进到函数中，发现参数其实还是不少的。&lt;br&gt;
为什么我们只传递了两个呢？想必是 MFC 在成员函数的声明处，为后面的参数设置了缺省值。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (lpszMenuName != NULL)&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们并没有指定这个参数，因此此参数使用缺省值 &lt;code&gt;NULL&lt;/code&gt; ，跳过此部分。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CFrameWnd::Create 第二部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;m_strTitle = lpszWindowName;    &lt;span class=&#34;comment&#34;&gt;// save title for later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(dwExStyle, lpszClassName, lpszWindowName, dwStyle,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pParentWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSafeHwnd&lt;/span&gt;(), hMenu, (LPVOID)pContext))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: failed to create CFrameWnd.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (hMenu != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;DestroyMenu&lt;/span&gt;(hMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;关键调用明显就只有 &lt;code&gt;CreateEx&lt;/code&gt;  这个成员函数了，继续深入。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWnd::CreateEx 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::CreateEx&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(DWORD dwExStyle, LPCTSTR lpszClassName,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	LPCTSTR lpszWindowName, DWORD dwStyle,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; x, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; y, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nWidth, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nHeight,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	HWND hWndParent, HMENU nIDorHMenu, LPVOID lpParam)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(lpszClassName == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;AfxIsValidString&lt;/span&gt;(lpszClassName) ||&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxIsValidAtom&lt;/span&gt;(lpszClassName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ENSURE_ARG&lt;/span&gt;(lpszWindowName == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; || &lt;span class=&#34;built_in&#34;&gt;AfxIsValidString&lt;/span&gt;(lpszWindowName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// allow modification of several common create parameters&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CREATESTRUCT cs;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.dwExStyle = dwExStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpszClass = lpszClassName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpszName = lpszWindowName;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.style = dwStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.x = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.y = y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.cx = nWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.cy = nHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hwndParent = hWndParent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hMenu = nIDorHMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.hInstance = &lt;span class=&#34;built_in&#34;&gt;AfxGetInstanceHandle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cs.lpCreateParams = lpParam;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;PreCreateWindow&lt;/span&gt;(cs))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;PostNcDestroy&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxHookWindowCreate&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	HWND hWnd = &lt;span class=&#34;built_in&#34;&gt;CreateWindowEx&lt;/span&gt;(cs.dwExStyle, cs.lpszClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们可以直接看到对全局函数 &lt;code&gt;CreateWindowEx&lt;/code&gt;  的调用，说明在这之前应该存在注册窗口类的代码。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (!PreCreateWindow(cs))&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;实际上窗口类的注册位于 &lt;code&gt;PreCreateWindow&lt;/code&gt;  成员函数中，如果 &lt;code&gt;cs.lpszClass&lt;/code&gt;  为 &lt;code&gt;NULL&lt;/code&gt; ，则会指定一个不会重复的窗口类名并基于此窗口类名注册窗口类。&lt;br&gt;
而 &lt;code&gt;cs.lpszClass&lt;/code&gt;  的值正是 &lt;code&gt;lpszClassName&lt;/code&gt;  参数，是我们在调用 &lt;code&gt;CFrameWnd::Create&lt;/code&gt;  时传递的 NULL。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxEndDeferRegisterClass 部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL AFXAPI &lt;span class=&#34;title&#34;&gt;AfxEndDeferRegisterClass&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LONG fToRegister)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// mask off all classes that are already registered&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	AFX_MODULE_STATE* pModuleState = &lt;span class=&#34;built_in&#34;&gt;AfxGetModuleState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	fToRegister &amp;amp;= ~pModuleState-&amp;gt;m_fRegisteredClasses;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (fToRegister == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LONG fRegisteredClasses = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// common initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	WNDCLASS wndcls;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;memset&lt;/span&gt;(&amp;amp;wndcls, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;sizeof&lt;/span&gt;(WNDCLASS));   &lt;span class=&#34;comment&#34;&gt;// start with NULL defaults&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.lpfnWndProc = DefWindowProc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.hInstance = &lt;span class=&#34;built_in&#34;&gt;AfxGetInstanceHandle&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	wndcls.hCursor = afxData.hcurArrow;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这个函数是 &lt;code&gt;PreCreateWindow&lt;/code&gt;  内部调用的函数， &lt;code&gt;WNDCLASS&lt;/code&gt;  是我们比较熟悉的结构，即注册窗口类需要使用的结构体。&lt;br&gt;
需要关注的是，我们创建的窗口，窗口过程函数在哪里？&lt;br&gt;
在这里出现了答案， &lt;code&gt;DefWindowProc&lt;/code&gt;  函数就是我们创建的窗口过程函数。&lt;br&gt;
但是是不是有点不对劲？ &lt;code&gt;DefWindowProc&lt;/code&gt;  好像是 Windows 提供的默认窗口过程函数吧？&lt;br&gt;
既然是 Windows 提供的函数实现，我们根本无法干涉，有消息也会回调这个函数。&lt;/p&gt;
&lt;p&gt;显然，这是不正确的，那么我们暂时从 &lt;code&gt;AfxEndDeferRegisterClass&lt;/code&gt;  函数退回到 &lt;code&gt;CWnd::CreateEx&lt;/code&gt;  函数，继续我们的代码分析。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AfxHookWindowCreate(this);&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里调用了一个比较关键的函数，&lt;emp&gt;这也是MFC能再次拿到消息处理权的关键所在&lt;/emp&gt;。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxHookWindowCreate &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; AFXAPI &lt;span class=&#34;title&#34;&gt;AfxHookWindowCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* pWnd)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_AFX_THREAD_STATE* pThreadState = _afxThreadState.&lt;span class=&#34;built_in&#34;&gt;GetData&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_pWndInit == pWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_hHookOldCbtFilter == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		pThreadState-&amp;gt;m_hHookOldCbtFilter = ::&lt;span class=&#34;built_in&#34;&gt;SetWindowsHookEx&lt;/span&gt;(WH_CBT,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			_AfxCbtFilterHook, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThreadId&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThreadState-&amp;gt;m_hHookOldCbtFilter == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;AfxThrowMemoryException&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pThreadState-&amp;gt;m_hHookOldCbtFilter != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pWnd-&amp;gt;m_hWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// only do once&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(pThreadState-&amp;gt;m_pWndInit == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;// hook not already in progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	pThreadState-&amp;gt;m_pWndInit = pWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;_AFX_THREAD_STATE* pThreadState = _afxThreadState.GetData();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;这里获取了一个新的全局变量的地址，我们就叫它 &lt;code&gt;线程状态&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pThreadState-&amp;gt;m_hHookOldCbtFilter = ::SetWindowsHookEx(WH_CBT,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			_AfxCbtFilterHook, NULL, ::GetCurrentThreadId());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这里通过调用 &lt;code&gt;SetWindowsHookEx&lt;/code&gt; ，告知 Windows，当前线程一旦收到某些消息时，提前回调 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  函数，而 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息就在此列。&lt;br&gt;
 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  又是 MFC 提供的全局函数，那么自当前函数调用完成后，消息处理权再次被 MFC 抓到了手里。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pThreadState-&amp;gt;m_pWndInit = pWnd;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;使全局变量 &lt;code&gt;线程状态&lt;/code&gt; 的成员 &lt;code&gt;m_pWndInit&lt;/code&gt;  我们 new 出来的指向 &lt;code&gt;frame&lt;/code&gt;  对象。&lt;br&gt;
即设置&lt;strong&gt;待初始化窗口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;再次回到 &lt;code&gt;CWnd::CreateEx&lt;/code&gt;  函数。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;HWND hWnd = CreateWindowEx(cs.dwExStyle, cs.lpszClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.lpszName, cs.style, cs.x, cs.y, cs.cx, cs.cy,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			cs.hwndParent, cs.hMenu, cs.hInstance, cs.lpCreateParams);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;
&lt;p&gt;这一行就没有什么好说的了，创建窗口，同时会产生 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息，就会回调到 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以我们要继续分析 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt; ，以得知 MFC 如何处理消息。&lt;/p&gt;
&lt;h2 id=&#34;mfc指定的消息钩子回调_afxcbtfilterhook&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc指定的消息钩子回调_afxcbtfilterhook&#34;&gt;#&lt;/a&gt; MFC 指定的消息钩子回调： &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;经过分析， &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  的基本工作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为 &lt;code&gt;frame&lt;/code&gt;  和窗口句柄建立映射关系
&lt;ul&gt;
&lt;li&gt;通过全局变量 &lt;code&gt;线程状态&lt;/code&gt; 的成员 &lt;code&gt;m_pWndInit&lt;/code&gt; ，得到 &lt;code&gt;frame&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;通过窗口句柄查找对应的 &lt;code&gt;CWnd&lt;/code&gt;  对象，由 &lt;code&gt;CHandleMap&lt;/code&gt;  类实现
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模块线程状态&lt;/strong&gt;的成员 &lt;code&gt;m_pmapHWND&lt;/code&gt;  指向了一个映射类对象，负责管理 &lt;code&gt;HWND&lt;/code&gt;  到 &lt;code&gt;CWnd*&lt;/code&gt;  的映射。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;SetWindowLongPtr&lt;/code&gt; ，为新创建的窗口设置新的窗口过程函数： &lt;code&gt;AfxWndProc&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;即完成了对&lt;strong&gt;待初始化窗口&lt;/strong&gt;的初始化工作。&lt;/p&gt;
&lt;p&gt;具体代码就留给读者自行阅读了。&lt;/p&gt;
&lt;h1 id=&#34;框架窗口类的消息接收&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#框架窗口类的消息接收&#34;&gt;#&lt;/a&gt; 框架窗口类的消息接收&lt;/h1&gt;
&lt;p&gt;我们已经知晓窗口的窗口过程函数实际上是 &lt;code&gt;AfxWndProc&lt;/code&gt; ，但这是 MFC 提供的全局函数，我们如何处理消息呢？&lt;/p&gt;
&lt;p&gt;实际上，MFC 在 &lt;code&gt;AfxWndProc&lt;/code&gt;  函数中，调用了 &lt;code&gt;CWnd&lt;/code&gt;  类的 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数，因此，我们只需要重写该虚函数，就能拿到消息的处理权。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; LRESULT &lt;span class=&#34;title&#34;&gt;WindowProc&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT msgID, WPARAM wParam, LPARAM lParam)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (msgID) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; WM_CREATE: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;WM_CREATE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;WindowProc&lt;/span&gt;(msgID, wParam, lParam);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码即重写了 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数，并在收到 &lt;code&gt;WM_CREATE&lt;/code&gt;  消息时弹出信息框。&lt;/p&gt;
&lt;p&gt;调试程序，会弹出信息框，内容是 &lt;code&gt;WM_CREATE&lt;/code&gt; ，按下确定后，窗口才会出现。&lt;/p&gt;
&lt;h2 id=&#34;mfc是如何找到我们的框架窗口类对象的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc是如何找到我们的框架窗口类对象的&#34;&gt;#&lt;/a&gt; MFC 是如何找到我们的框架窗口类对象的？&lt;/h2&gt;
&lt;p&gt;我们的框架窗口类是一个全局对象，&lt;emp&gt;在窗口过程函数中，MFC是如何找到我们创建的对象，并调用其成员函数的呢？&lt;/emp&gt;&lt;/p&gt;
&lt;p&gt;还记得窗口过程的函数原型吗？第一个参数是类型为 &lt;code&gt;HWND&lt;/code&gt;  的窗口句柄；&lt;br&gt;
而我们在之前讲过，&lt;strong&gt;模块线程状态&lt;/strong&gt;的成员 &lt;code&gt;m_pmapHWND&lt;/code&gt;  指向了一个映射类对象，而 &lt;code&gt;_AfxCbtFilterHook&lt;/code&gt;  函数中，会基于此映射类对象，维护从 &lt;code&gt;HWND&lt;/code&gt;  到 &lt;code&gt;CWnd*&lt;/code&gt;  的映射表。&lt;br&gt;
MFC 在需要通过 &lt;code&gt;HWND&lt;/code&gt;  查找到对应窗口类对象的地址时，也只需要访问这个映射类对象即可。&lt;/p&gt;
&lt;p&gt;得到 &lt;code&gt;frame&lt;/code&gt;  的地址后，就可以以此调用 &lt;code&gt;WindowProc&lt;/code&gt;  成员虚函数。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/a6e.html</guid>
            <title>【MFC】探索程序启动机制的实现原理</title>
            <link>http://yuyuaqwq.github.io/posts/a6e.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <pubDate>Wed, 05 Oct 2022 10:45:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;全局对象的构造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局对象的构造&#34;&gt;#&lt;/a&gt; 全局对象的构造&lt;/h1&gt;
&lt;p&gt;C++ 的对象在创建时，会调用构造函数。&lt;br&gt;
而全局对象的构造时机，&lt;emp&gt;自然应当在入口函数`main/WinMain`被调用之前&lt;/emp&gt;，否则我们也就无法在入口函数中使用全局对象了。&lt;/p&gt;
&lt;p&gt;这里以上节编写的示例代码为例，我们在代码中实例化了一个全局对象 &lt;code&gt;g_theApp&lt;/code&gt; ，基于 VS 强大的源码调试能力，我们来对 MFC 程序的启动机制一探究竟。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;g_theapp构造调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让光标停留在 &lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;  行，按下 &lt;code&gt;F9&lt;/code&gt; ，设置断点
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F5&lt;/code&gt;  运行，让程序中断到当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F11&lt;/code&gt;  单步步入，进入到 &lt;code&gt;CMyWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;li&gt;继续单步步入，进入到基类 &lt;code&gt;CWinApp&lt;/code&gt;  的构造函数中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;到这里，我们就开始调试到 MFC 的源码了。&lt;/p&gt;
&lt;h2 id=&#34;g_theapp构造分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#g_theapp构造分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;g_theApp&lt;/code&gt;  构造分析&lt;/h2&gt;
&lt;p&gt;接下来我们选择部分代码进行讲解&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::CWinApp 部分代码一 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CWinApp::&lt;span class=&#34;built_in&#34;&gt;CWinApp&lt;/span&gt;(LPCTSTR lpszAppName)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (lpszAppName != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = _tcsdup(lpszAppName);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pszAppName = &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// initialize CWinThread state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pModuleState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ENSURE&lt;/span&gt;(pThreadState);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pThreadState-&amp;gt;m_pCurrentWinThread = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_hThread = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_nThreadID = ::&lt;span class=&#34;built_in&#34;&gt;GetCurrentThreadId&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;MFC 类库中有一个描述&lt;strong&gt;主模块状态&lt;/strong&gt;的全局对象， &lt;code&gt;_AFX_CMDTARGET_GETSTATE&lt;/code&gt;  宏函数就是用于获取该全局对象的地址&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;AFX_MODULE_THREAD_STATE* pThreadState = pModuleState-&amp;gt;m_thread;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以及描述&lt;strong&gt;主模块线程状态&lt;/strong&gt;的全局对象，其地址保存在&lt;strong&gt;主模块状态&lt;/strong&gt;中的成员中。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;MFC 在设计时想必已经安排好了构造顺序已确保程序运行的正确性，此处我们的全局对象 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分 &lt;code&gt;CWinApp&lt;/code&gt;  在构造时才能够正确使用这些全局对象，这里不再做深究。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pThreadState-&amp;gt;m_pCurrentWinThread = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::CWinApp 部分代码二 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// initialize CWinApp state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(afxCurrentWinApp == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;); &lt;span class=&#34;comment&#34;&gt;// only one CWinApp object please&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pModuleState-&amp;gt;m_pCurrentWinApp = &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;() == &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;pModuleState-&amp;gt;m_pCurrentWinApp = this;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;将我们创建的 &lt;code&gt;g_theApp&lt;/code&gt;  的地址保存到&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员中。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;winmain的启动流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#winmain的启动流程&#34;&gt;#&lt;/a&gt; WinMain 的启动流程&lt;/h1&gt;
&lt;p&gt;回忆我们的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类，在类中我们重写了虚函数 &lt;code&gt;InitInstance&lt;/code&gt; 。&lt;br&gt;
见名知意，我们猜测，这是一个初始化函数，但是我们不清楚函数是何时、如何被调用，因此我们需要继续分析 MFC 的源码。&lt;/p&gt;
&lt;h2 id=&#34;initinstance回调调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#initinstance回调调试&#34;&gt;#&lt;/a&gt;  &lt;code&gt;InitInstance&lt;/code&gt;  回调调试&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;CMyFrameWnd* frame = new CMyFrameWnd;&lt;/code&gt;  行设置断点&lt;/li&gt;
&lt;li&gt;运行程序，中断在此行&lt;/li&gt;
&lt;li&gt;查看 &lt;code&gt;调用堆栈&lt;/code&gt; ，我们可以看到 &lt;code&gt;InitInstance&lt;/code&gt;  的调用函数，以及调用函数的调用函数… 等层级关系。
&lt;ul&gt;
&lt;li&gt;在这里我们也看到了我们熟悉的 &lt;code&gt;WinMain&lt;/code&gt;  函数，说明 &lt;code&gt;InitInstance&lt;/code&gt;  是在 &lt;code&gt;WinMain&lt;/code&gt;  执行过程中被调用的。&lt;/li&gt;
&lt;li&gt;而我们并没有实现 &lt;code&gt;WinMain&lt;/code&gt; ，那么 &lt;code&gt;WinMain&lt;/code&gt;  自然也是由 MFC 实现的，至此，我们先前的一个疑惑也解决了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;调用堆栈&lt;/code&gt; 中定位到 &lt;code&gt;WinMain&lt;/code&gt;  函数，在此处设置断点，重新运行程序。
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/a6e/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WinMain&lt;/code&gt;  函数中仅有一行代码，即调用 &lt;code&gt;AfxWinMain&lt;/code&gt;  并返回，单步进入&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;afxwinmain源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#afxwinmain源码分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;AfxWinMain&lt;/code&gt;  源码分析&lt;/h2&gt;
&lt;p&gt;我们依旧选择我们感兴趣的源码进行讲解&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AfxWinMain&lt;/code&gt;  是 MFC 实现的全局函数。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;以 &lt;code&gt;Afx&lt;/code&gt;  开头的函数，基本上都是 MFC 实现的全局函数。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; AfxWinMain 部分代码 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFXAPI &lt;span class=&#34;title&#34;&gt;AfxWinMain&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(HINSTANCE hInstance, HINSTANCE hPrevInstance,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;function&#34;&gt;	_In_ LPTSTR lpCmdLine, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nCmdShow)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT&lt;/span&gt;(hPrevInstance == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; nReturnCode = &lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinThread* pThread = &lt;span class=&#34;built_in&#34;&gt;AfxGetThread&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CWinApp* pApp = &lt;span class=&#34;built_in&#34;&gt;AfxGetApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// AFX internal initialization&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;AfxWinInit&lt;/span&gt;(hInstance, hPrevInstance, lpCmdLine, nCmdShow))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// App global initializations (rare)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pApp != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; !pApp-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitApplication&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// Perform specific initializations&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;InitInstance&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (pThread-&amp;gt;m_pMainWnd != &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: Destroying non-NULL m_pMainWnd\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pThread-&amp;gt;m_pMainWnd-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;DestroyWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; InitFailure;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	nReturnCode = pThread-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinThread* pThread = AfxGetThread();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块线程状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinThread&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
因此，此函数实际上是获取 &lt;code&gt;g_theApp&lt;/code&gt;  的地址，也就是说，在 MFC 的启动流程中，可能要使用我们创建的全局对象 &lt;code&gt;g_theApp&lt;/code&gt; 。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp* pApp = AfxGetApp();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;此函数获取&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员。&lt;br&gt;
先前我们在构造 &lt;code&gt;g_theApp&lt;/code&gt;  的过程中已经看到，&lt;strong&gt;主模块状态&lt;/strong&gt;的 &lt;code&gt;m_pCurrentWinApp&lt;/code&gt;  成员保存的是 &lt;code&gt;g_theApp&lt;/code&gt;  的地址；&lt;br&gt;
与 AfxGetThread 作用类似。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;&lt;code&gt;CWinApp*&lt;/code&gt;  指向 &lt;code&gt;CMyWinApp&lt;/code&gt;  类型的对象，我们是能够理解的；&lt;br&gt;
但是为什么 &lt;code&gt;CWinThread*&lt;/code&gt;  的赋值也能被允许呢？因为 &lt;code&gt;CWinApp&lt;/code&gt;  类就继承自 &lt;code&gt;CWinThread&lt;/code&gt;  类。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (pApp != NULL &amp;amp;&amp;amp; !pApp-&amp;gt;InitApplication())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;当前行实际上调用了 &lt;code&gt;g_theApp&lt;/code&gt;  的 &lt;code&gt;InitApplication&lt;/code&gt;  函数，我们并没有提供此函数，因此只可能是 &lt;code&gt;g_theApp&lt;/code&gt;  的父类部分提供的。&lt;br&gt;
这个函数实际上也是虚函数，我们能够重写它，一般在我们希望做一些应用程序初始化的工作时重写。&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (!pThread-&amp;gt;InitInstance())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;终于又到了我们熟悉的部分了， &lt;code&gt;InitInstance&lt;/code&gt;  就是我们重写的函数，此时 &lt;code&gt;pThread&lt;/code&gt;  指向 &lt;code&gt;g_theApp&lt;/code&gt; ，这就是 &lt;code&gt;多态&lt;/code&gt; 了。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们暂时略过具体代码，最终是通过 &lt;code&gt;return TRUE&lt;/code&gt;  返回的；&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根据 &lt;code&gt;AfxWinMain&lt;/code&gt;  中的代码的逻辑，我们会走到 &lt;code&gt;Run&lt;/code&gt;  这个函数。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;不可或缺的消息循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不可或缺的消息循环&#34;&gt;#&lt;/a&gt; 不可或缺的消息循环&lt;/h1&gt;
&lt;p&gt;在直接使用 &lt;code&gt;Win32API&lt;/code&gt;  开发界面程序时，我们都会编写消息循环以阻塞主线程，避免 &lt;code&gt;WinMain&lt;/code&gt;  返回后终止进程。&lt;br&gt;
MFC 程序自然也不例外，而 MFC 的消息循环究竟编写在哪里呢？&lt;br&gt;
其实读者只要在调试时步过 &lt;code&gt;nReturnCode = pThread-&amp;gt;Run();&lt;/code&gt; ，就会使得程序直接运行起来，不再处于中断状态，因而得知， &lt;code&gt;Run&lt;/code&gt;  成员函数封装了消息循环。&lt;/p&gt;
&lt;h2 id=&#34;cwinapprun的源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cwinapprun的源码分析&#34;&gt;#&lt;/a&gt;  &lt;code&gt;CWinApp::Run&lt;/code&gt;  的源码分析&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinApp::Run &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinApp::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMainWnd == &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&#34;built_in&#34;&gt;AfxOleGetUserCtrl&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// Not launched /Embedding or /Automation, but has no main window!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;TRACE&lt;/span&gt;(traceAppMsg, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;Warning: m_pMainWnd is NULL in CWinApp::Run - quitting application.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;AfxPostQuitMessage&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CWinThread::&lt;span class=&#34;built_in&#34;&gt;Run&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;if (m_pMainWnd == NULL &amp;amp;&amp;amp; AfxOleGetUserCtrl())&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;我们忽略对 &lt;code&gt;AfxOleGetUserCtrl&lt;/code&gt;  函数的调用， &lt;code&gt;m_pMainWnd&lt;/code&gt;  是不是有些眼熟？&lt;br&gt;
我们在重写 &lt;code&gt;InitInstance&lt;/code&gt;  时，使 &lt;code&gt;m_pMainWnd&lt;/code&gt;  指向了 &lt;code&gt;new&lt;/code&gt;  出来的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象。&lt;br&gt;
而我们在调用 &lt;code&gt;Run&lt;/code&gt;  成员函数时，就是以 &lt;code&gt;g_theApp&lt;/code&gt;  的身份进行调用的。&lt;br&gt;
因此，在 &lt;code&gt;Run&lt;/code&gt;  成员函数中访问 &lt;code&gt;m_pMainWnd&lt;/code&gt; ，自然得到我们当时 &lt;code&gt;new&lt;/code&gt;  出来的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  对象。&lt;/p&gt;
&lt;emp&gt;这也就是 g_theApp 全局对象的主窗口。&lt;/emp&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;return CWinThread::Run();&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;接下来我们调用 &lt;code&gt;CWinApp&lt;/code&gt;  的父类 &lt;code&gt;CWinThread&lt;/code&gt;  的 &lt;code&gt;Run&lt;/code&gt;  成员函数&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinThread::Run 第一部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CWinThread::Run&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;ASSERT_VALID&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	_AFX_THREAD_STATE* pState = &lt;span class=&#34;built_in&#34;&gt;AfxGetThreadState&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// for tracking the idle time state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	BOOL bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LONG lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// acquire and dispatch messages until a WM_QUIT message is received.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (;;)        &lt;span class=&#34;comment&#34;&gt;// 开始消息循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 如果没有消息(PeekMessage返回0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// phase1: check to see if we can do idle work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (bIdle &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			!::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// call OnIdle while in bIdle state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;OnIdle&lt;/span&gt;(lIdleCount++))      &lt;span class=&#34;comment&#34;&gt;// 调用成员虚函数OnIdle，进入空闲处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = FALSE; &lt;span class=&#34;comment&#34;&gt;// assume &amp;quot;no idle&amp;quot; state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，这里直接在代码中注释，可以自行阅读。&lt;/p&gt;
&lt;div class=&#34;tip &#34;&gt;&lt;p&gt;在 MFC 中程序中调用 &lt;code&gt;Win32API&lt;/code&gt;  时，通常都会指明调用的是全局作用域下的函数 :: 。&lt;/p&gt;
&lt;/div&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CWinThread::Run 第二部分 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;        ......&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// phase2: pump messages while available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// pump message, but quit on WM_QUIT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;built_in&#34;&gt;PumpMessage&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ExitInstance&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;// reset &amp;quot;no idle&amp;quot; state after pumping &amp;quot;normal&amp;quot; message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;comment&#34;&gt;//if (IsIdleMessage(&amp;amp;m_msgCur))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;IsIdleMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				bIdle = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				lIdleCount = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (::&lt;span class=&#34;built_in&#34;&gt;PeekMessage&lt;/span&gt;(&amp;amp;(pState-&amp;gt;m_msgCur), &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;, PM_NOREMOVE));        &lt;span class=&#34;comment&#34;&gt;// 如果连续有消息就继续处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;&lt;code&gt;if (!PumpMessage())&lt;/code&gt; &lt;br&gt;
 MFC 在此函数中封装了对 &lt;code&gt;GetMessage&lt;/code&gt; 、 &lt;code&gt;TranslateMessage&lt;/code&gt; 、 &lt;code&gt;DispatchMessage&lt;/code&gt;  函数的调用，读者感兴趣可以自行跟进，这里就不再分析了。&lt;/p&gt;
&lt;p&gt;一旦 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt; ，就会调用虚成员函数 &lt;code&gt;ExitInstance&lt;/code&gt;  并退出消息循环。&lt;br&gt;
而 &lt;code&gt;PumpMessage&lt;/code&gt;  返回 &lt;code&gt;FALSE&lt;/code&gt;  的条件即是 &lt;code&gt;GetMessage&lt;/code&gt;  获得 &lt;code&gt;WM_QUIT&lt;/code&gt;  消息，程序结束。&lt;/p&gt;
&lt;p&gt;我们也可以重写 &lt;code&gt;ExitInstance&lt;/code&gt; ，在程序结束前做必要的资源释放。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;Run&lt;/code&gt;  成员函数返回后，也会一路返回到 &lt;code&gt;WinMain&lt;/code&gt; ，程序也就退出了。&lt;/p&gt;
&lt;h1 id=&#34;基本流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本流程&#34;&gt;#&lt;/a&gt; 基本流程&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首先，我们在编写 MFC 应用时，需要实例化一个类型为 &lt;code&gt;CWinApp&lt;/code&gt;  的全局对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果需要重写初始化等成员虚函数，则需要创建继承自 &lt;code&gt;CWinApp&lt;/code&gt;  的子类的对象 (此处命名为 &lt;code&gt;g_theApp&lt;/code&gt; )。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;g_theApp&lt;/code&gt;  被构造时，会使 MFC 定义的全局变量&lt;strong&gt;主模块状态&lt;/strong&gt;和&lt;strong&gt;主模块线程状态&lt;/strong&gt;的成员指向 &lt;code&gt;g_theApp&lt;/code&gt;  地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序进入 &lt;code&gt;WinMain&lt;/code&gt;  函数，会通过全局变量&lt;strong&gt;主模块状态&lt;/strong&gt;和&lt;strong&gt;主模块线程状态&lt;/strong&gt;得到 &lt;code&gt;g_theApp&lt;/code&gt;  地址，再以 &lt;code&gt;g_theApp&lt;/code&gt;  的身份调用必要的成员虚函数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;消息循环&lt;/li&gt;
&lt;li&gt;退出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们基本上对 MFC 程序的启动流程有了一个大致的认知。&lt;/p&gt;
&lt;p&gt;而窗口的创建、消息的接收处理等部分，我们留到下一篇再叙。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/7c79.html</guid>
            <title>【MFC】初识MFC</title>
            <link>http://yuyuaqwq.github.io/posts/7c79.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <pubDate>Tue, 04 Oct 2022 19:33:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;mfc简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc简述&#34;&gt;#&lt;/a&gt; MFC 简述&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;MFC (Microsoft Foundation Classes)，微软基础类库；&lt;/strong&gt;&lt;br&gt;
是微软使用 &lt;code&gt;C++&lt;/code&gt;  的特性，在 &lt;code&gt;Win32API&lt;/code&gt;  基础上再次进行的封装。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mfc基本使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mfc基本使用&#34;&gt;#&lt;/a&gt; MFC 基本使用&lt;/h1&gt;
&lt;p&gt;MFC 只是一个 C++ 类库，我们只需要对 C++ 有一定了解，就能够理解 MFC 的工作机制。&lt;br&gt;
而微软的宇宙第一 IDE &lt;code&gt;Visual Studio&lt;/code&gt;  本身也替我们做好了许多工作，这里以 vs2022 为例，对 MFC 的安装与使用进行简单的说明。&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio Installer&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;单个组件&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;搜索 &lt;code&gt;MFC&lt;/code&gt; ，勾选需要的组件
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;修改&lt;/code&gt; ，等待完成即可
&lt;ul&gt;
&lt;li&gt;我这里已经装过了，就不重新做演示了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;新建项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新建项目&#34;&gt;#&lt;/a&gt; 新建项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;运行 &lt;code&gt;Visual Studio 2022&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;code&gt;创建新项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;空项目&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;项目名称随意，我这里写 &lt;code&gt;MFCTestProject&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置项目&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置项目&#34;&gt;#&lt;/a&gt; 配置项目&lt;/h2&gt;
&lt;p&gt;由于是空项目，什么都没有，我们需要自行做一些必要的设置。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;MFCTestProject&lt;/code&gt;  项目，选择 &lt;code&gt;属性&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中选择 &lt;code&gt;高级&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MFC的使用&lt;/code&gt; 选项，修改为 &lt;code&gt;在静态库中使用MFC&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;在共享DLL中使用MFC&lt;/code&gt;  调试时无法找到 MFC 的源码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;属性页&lt;/code&gt; 中展开 &lt;code&gt;链接器&lt;/code&gt; ，选择 &lt;code&gt;系统&lt;/code&gt; 选项卡&lt;/li&gt;
&lt;li&gt;&lt;code&gt;子系统&lt;/code&gt; 选择 &lt;code&gt;窗口(/SUBSYSTEM:WINDOWS)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写源代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写源代码&#34;&gt;#&lt;/a&gt; 编写源代码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;新建 &lt;code&gt;.cpp&lt;/code&gt;  文件，文件名随意&lt;/li&gt;
&lt;li&gt;编写如下示例代码 &lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;/li&gt;
&lt;li&gt;F5 运行，编译运行正常会出现这样的窗口
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/7c79/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此，我们就已经建立了一个非常简单的 MFC 程序，并且它还能够运行。&lt;/p&gt;
&lt;p&gt;接下来我们简单对代码进行一些注释：&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;#include &amp;lt;afxwin.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;类似 &lt;code&gt;Win32API&lt;/code&gt;  开发时使用的 &lt;code&gt;#include &amp;lt;windows.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyFrameWnd :public CFrameWnd {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CFrameWnd&lt;/code&gt;  类的 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CFrameWnd&lt;/code&gt;  是对窗口框架的封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;class CMyWinApp :public CWinApp {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;创建继承于 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;CMyWinApp&lt;/code&gt;  类&lt;br&gt;
 &lt;code&gt;CWinApp&lt;/code&gt;  是对应用程序执行流程的抽象封装&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;virtual BOOL InitInstance() {...&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在 &lt;code&gt;CMyWinApp&lt;/code&gt;  类中重写 &lt;code&gt;CWinApp&lt;/code&gt;  类的 &lt;code&gt;InitInstance&lt;/code&gt;  成员虚函数&lt;/p&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyWinApp g_theApp;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;基于 &lt;code&gt;CMyWinApp&lt;/code&gt;  类实例化全局对象 &lt;code&gt;g_theApp&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;note purple icon-padding simple&#34;&gt;&lt;i class=&#34;note-icon fas fa-fan&#34;&gt;&lt;/i&gt;&lt;p&gt;当然，这些代码也许会使你感到困惑，毕竟代码中甚至找不到你最熟悉的 main、WinMain，为什么它能够跑起来？&lt;/p&gt;
&lt;p&gt;我们将在下篇文章探索 MFC 的程序启动机制。&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
 ]]></description>
        </item>
    </channel>
</rss>
