<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>鹿鹿鱼鱼</title>
        <link>http://yuyuaqwq.github.io</link>
        <description>人为什么要起床？</description>
        <language>zh-CN</language>
        <pubDate>Tue, 31 Jan 2023 09:05:39 +0800</pubDate>
        <lastBuildDate>Tue, 31 Jan 2023 09:05:39 +0800</lastBuildDate>
        <category>MFC</category>
        <category>没饭吃</category>
        <category>逆向分析</category>
        <category>工具</category>
        <category>C/C++</category>
        <category>反汇编</category>
        <category>网络分析</category>
        <category>Proxifier</category>
        <category>编译原理</category>
        <category>动手写ToyLang</category>
        <category>C++</category>
        <category>界面开发</category>
        <category>Qt</category>
        <category>保护模式</category>
        <category>Windows内核</category>
        <category>密码学</category>
        <category>PKI</category>
        <category>证书</category>
        <category>签名</category>
        <category>Git</category>
        <category>版本管理</category>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/91e5.html</guid>
            <title>【Git】远程仓库登录</title>
            <link>http://yuyuaqwq.github.io/posts/91e5.html</link>
            <category>Git</category>
            <category>版本管理</category>
            <pubDate>Tue, 31 Jan 2023 09:05:39 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;github身份验证&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#github身份验证&#34;&gt;#&lt;/a&gt; Github 身份验证&lt;/h2&gt;
&lt;p&gt;Github 通过 SSH 登录，通过提前在 Github 上设置公钥，以及本地存储的私钥，使得 Github 能够验证身份的合法性。&lt;/p&gt;
&lt;h2 id=&#34;配置用户名和邮箱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置用户名和邮箱&#34;&gt;#&lt;/a&gt; 配置用户名和邮箱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;&amp;lt;用户名&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email &amp;quot;&amp;lt;邮箱地址&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看配置&#34;&gt;#&lt;/a&gt; 查看配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;密钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密钥&#34;&gt;#&lt;/a&gt; 密钥&lt;/h2&gt;
&lt;p&gt;生成密钥对：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;&amp;lt;邮箱地址|用户名|...&amp;gt;&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;放置在～/.ssh 目录中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config 文件指定有效的密钥文件&lt;/li&gt;
&lt;li&gt;Windows 下可以在 Git Bash 中查看路径&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认公钥文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id_rsa.pub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认私钥文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id_rsa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开公钥文件，将其复制。&lt;/p&gt;
&lt;h2 id=&#34;设置公钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置公钥&#34;&gt;#&lt;/a&gt; 设置公钥&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;打开 Github&lt;/li&gt;
&lt;li&gt;在个人设置 -&amp;gt; SSH and GPG keys -&amp;gt; SSH keys 中，添加刚刚复制的公钥。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;验证登录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证登录&#34;&gt;#&lt;/a&gt; 验证登录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh -T git@github.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出现 “Hi xxxx! …” 表示配置完成&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/75b5.html</guid>
            <title>【C/C++逆向】AMD64架构下MSVC编译器的调用约定与栈帧分析</title>
            <link>http://yuyuaqwq.github.io/posts/75b5.html</link>
            <pubDate>Mon, 19 Dec 2022 11:36:37 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/5d13.html</guid>
            <title>【密码学】PKI体系：谁来保证我的通信安全？</title>
            <link>http://yuyuaqwq.github.io/posts/5d13.html</link>
            <category>密码学</category>
            <category>PKI</category>
            <category>证书</category>
            <category>签名</category>
            <pubDate>Thu, 08 Dec 2022 15:31:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;pki概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pki概述&#34;&gt;#&lt;/a&gt; PKI 概述&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Public Key Infrastructure，即公钥基础设施。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公钥基础设施是一个包括硬件、软件、人员、策略和规程的集合，用来实现基于公钥密码体制的密钥和证书的产生、管理、存储、分发和撤销等功能。&lt;br&gt;
PKI 体系是计算机软硬件、权威机构及应用系统的结合。它为实施电子商务、电子政务、办公自动化等提供了基本的安全服务，从而使那些彼此不认识或距离很远的用户能通过信任链安全地交流。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，要是光看定义能看懂的话，想必各位也不会见到这一篇文章了，贴出定义只是个人习惯，咱们往下看。&lt;/p&gt;
&lt;h1 id=&#34;明文与密文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#明文与密文&#34;&gt;#&lt;/a&gt; 明文与密文&lt;/h1&gt;
&lt;p&gt;首先咱们要知道，咱们能够阅读理解的东西是 &lt;code&gt;明文&lt;/code&gt; ，比如远在天边的网友给你发的一条 qq 消息，你看到的时候它就是明文，这样你才能看得懂你的网友想和你说些什么。&lt;/p&gt;
&lt;p&gt;当然，你看得懂，别人也看得懂，中文嘛，大家都学过。&lt;br&gt;
你想着，我要是不想赤裸裸的让别人窥探我的聊天内容是吧，咱们多少还是希望能有些隐私的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;自然而然的出现了。&lt;/p&gt;
&lt;p&gt;我们通过某种方法对明文原本的信息进行可逆的改变，别人只要不知道我们是如何改变的，就无法还原，只有我们才能够还原为明文。&lt;br&gt;
加密后无法直接理解的信息，我们就叫做 &lt;code&gt;密文&lt;/code&gt; 。&lt;/p&gt;
&lt;h1 id=&#34;前置知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前置知识&#34;&gt;#&lt;/a&gt; 前置知识&lt;/h1&gt;
&lt;h2 id=&#34;密钥&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密钥&#34;&gt;#&lt;/a&gt; 密钥&lt;/h2&gt;
&lt;p&gt;通常也是一组数据，就像现实世界的钥匙，是&lt;strong&gt;加锁 / 解锁&lt;/strong&gt;的关键。&lt;/p&gt;
&lt;h2 id=&#34;对称加密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对称加密&#34;&gt;#&lt;/a&gt; 对称加密&lt;/h2&gt;
&lt;p&gt;首先创建一把&lt;strong&gt;密钥&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通过这把密钥可以加密明文；&lt;br&gt;
对密文的解密也需要&lt;strong&gt;同样的一把密钥&lt;/strong&gt;。&lt;br&gt;
&lt;em&gt;如同常见的钥匙和锁一般，加锁和解锁都是同一把钥匙。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷：在公共的网络环境中，密钥难以安全传递。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;非对称加密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非对称加密&#34;&gt;#&lt;/a&gt; 非对称加密&lt;/h2&gt;
&lt;p&gt;创建两把密钥，一把公钥，一把私钥，&lt;strong&gt;这两把密钥是对应关系&lt;/strong&gt;。&lt;br&gt;
公钥是公开的，任何人都可以获得。&lt;br&gt;
私钥是私有的，只有创建者持有。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;公钥加密的东西，只有对应的私钥能够解密；&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;私钥加密的东西，只有对应的公钥能够解密。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;相对对称加密而言，不存在密钥无法安全传递的问题。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺陷：基本上基于数学难题，加密速度十分缓慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;信息摘要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信息摘要&#34;&gt;#&lt;/a&gt; 信息摘要&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数据的指纹，具有不可逆的性质。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般输出的指纹数据长度都是固定的，便于传输。&lt;br&gt;
通常可以用于验证数据是否被篡改。&lt;br&gt;
&lt;em&gt;&lt;strong&gt;数据被篡改一位，都会导致计算出来的信息摘要不同。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;安全通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安全通信&#34;&gt;#&lt;/a&gt; 安全通信&lt;/h1&gt;
&lt;p&gt;有了上述基础，你能否在公共网络中构建安全通信信道呢？&lt;br&gt;
我们来尝试一下。&lt;/p&gt;
&lt;h2 id=&#34;基本框架非对称加密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本框架非对称加密&#34;&gt;#&lt;/a&gt; 基本框架：非对称加密&lt;/h2&gt;
&lt;p&gt;当然，我们的数据不能在公网上裸奔，因此首先就需要对明文进行加密。&lt;/p&gt;
&lt;p&gt;但此时我们难以解决密钥安全传输的问题，故需要引入 &lt;code&gt;非对称加密&lt;/code&gt; 。&lt;br&gt;
&lt;em&gt;你可能会想到，如果我把密钥也加密呢？那如何解密加密后的密钥呢？是不是也需要一把新的密钥？这把密钥如何传输呢？&lt;/em&gt;&lt;br&gt;
&lt;em&gt;往复下去也不会有变化，并没有改变无法安全传输密钥的根本问题。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;通信过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通信过程&#34;&gt;#&lt;/a&gt; 通信过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;假设 A、B 需要通信，各自创建私钥与公钥，并且交换公钥；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥是可以公开的，任何人都可以持有。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A 向 B 发送消息之前，使用 B 的公钥加密，再发送给 B；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密文只有 B 能够解密，因为只有 B 持有对应的私钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B 向 A 发送消息也是如此，使用 A 的公钥加密，再发送给 A。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第一个问题计算效率&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一个问题计算效率&#34;&gt;#&lt;/a&gt; 第一个问题：计算效率&lt;/h3&gt;
&lt;p&gt;在基础中提及到，非对称加密的计算缓慢，假设传输的数据较多，那么需要消耗大量的时间进行计算。&lt;/p&gt;
&lt;h2 id=&#34;性能提高引入对称加密&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#性能提高引入对称加密&#34;&gt;#&lt;/a&gt; 性能提高：引入对称加密&lt;/h2&gt;
&lt;p&gt;此时，对称加密计算效率高的特性能够完美弥补这个缺陷，故我们还是需要引入 &lt;code&gt;对称加密&lt;/code&gt; ：&lt;br&gt;
&lt;em&gt;加密方案基本上都会首先基于流行的 &lt;code&gt;加密算法&lt;/code&gt; ，只有这种经过全世界密码学家考验的加密算法才是可靠的。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;通信过程改进&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通信过程改进&#34;&gt;#&lt;/a&gt; 通信过程改进&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A、B 交换公钥；&lt;/li&gt;
&lt;li&gt;A 生成本次通信的密钥，使用 B 的公钥加密，再将加密后的密钥发送给 B；&lt;/li&gt;
&lt;li&gt;B 生成本次通信的密钥，使用 A 的公钥加密，再将加密后的密钥发送给 A；
&lt;ul&gt;
&lt;li&gt;此步并不一定需要，可以共用一把对称加密密钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;各自用私钥解密密钥，往后的通信都使用这把密钥加密 / 解密。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二个问题中间人攻击&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二个问题中间人攻击&#34;&gt;#&lt;/a&gt; 第二个问题：中间人攻击&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A、B 交换公钥；
&lt;ul&gt;
&lt;li&gt;假设 A、B 交换公钥的通信信道被 C 窃听了，C 也生成了自己的公钥与私钥对，将 A、B 的公钥保存起来，并将信道上的 A、B 的公钥替换为 C 的公钥发给对方；&lt;/li&gt;
&lt;li&gt;A 收到的是 C 的公钥，B 收到的也是 C 的公钥。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A、B 交换密钥；
&lt;ul&gt;
&lt;li&gt;A 使用 C 的公钥加密密钥，发往 B；
&lt;ul&gt;
&lt;li&gt;依旧被 C 劫持，C 通过私钥解密，得到原始密钥，再将其通过 B 的公钥加密，替换后发往 B。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;B 收到 B 的公钥加密的密钥，用 B 的私钥解密，得到密钥。&lt;/li&gt;
&lt;li&gt;B 发往 A 同理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个过程中，A 和 B 看似正常安全的通信，实际上自以为隐私的通信信道早已被 C 看得干干净净。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 A 而言，&lt;strong&gt;C 伪造身份为 B 与 A 通信&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;对于 B 而言，&lt;strong&gt;C 伪造身份为 A 与 B 通信&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;避免篡改数据指纹&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#避免篡改数据指纹&#34;&gt;#&lt;/a&gt; 避免篡改：数据指纹&lt;/h2&gt;
&lt;p&gt;你可能会想到，既然信息摘要可以避免数据被篡改，那么能不能在发送公钥的时候顺带发送信息摘要来避免中间人伪造身份？&lt;/p&gt;
&lt;p&gt;实际上是不行的，因为&lt;strong&gt;中间人完全可以重新使用相同的信息摘要算法重新计算被替换的公钥，得到新的指纹，将信息摘要也替换。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;而接收者无法辨别信息摘要是否已被替换。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;验明身份数字证书&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验明身份数字证书&#34;&gt;#&lt;/a&gt; 验明身份：数字证书&lt;/h2&gt;
&lt;p&gt;首先想一下，现实世界咱们是如何证明你是你呢？&lt;br&gt;
多数情况下都是亮出身份证，对吧，我们有国家颁发的身份证。&lt;br&gt;
因为是国家颁发的，有 &lt;code&gt;权威性&lt;/code&gt; 和 &lt;code&gt;公信力&lt;/code&gt; ，大家伙都相信和认可。&lt;/p&gt;
&lt;p&gt;在公网上证明你是你的话，也得拿出证据说话，随便说说我是不认的，谁知道你是不是中间人那个坏蛋呢？&lt;/p&gt;
&lt;p&gt;因此，证书自然就出现了。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;证书&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#证书&#34;&gt;#&lt;/a&gt; 证书&lt;/h3&gt;
&lt;p&gt;证书类似 &amp;quot;身份证&amp;quot;，用于证明某个人 (公司) 的身份，如：&lt;/p&gt;
&lt;p&gt;所有者：ABC, &lt;a href=&#34;http://www.abc.com&#34;&gt;www.abc.com&lt;/a&gt;&lt;br&gt;
 公钥：xxxxxx&lt;br&gt;
 颁发 CA 机构：XXX&lt;br&gt;
…&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;证书当中记录了一些必要的信息，当然，就简简单单的在证书里写我是 XXX，那肯定也不行，因为一点可信度都没有，中间人也可以给你发这么一串数据，说他也是 XXX，你是信还是不信呢？&lt;/p&gt;
&lt;p&gt;因此引入证书也不可避免的产生了一个问题：&lt;strong&gt;证书也能被替换&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;拒绝伪造数字签名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拒绝伪造数字签名&#34;&gt;#&lt;/a&gt; 拒绝伪造：数字签名&lt;/h2&gt;
&lt;p&gt;上面我们提到过，私钥加密的东西，只有公钥才能解密。&lt;br&gt;
咋一看好像没什么鸡蛋饼用，我这私钥加密，所有人都能解密，这有个啥用啊？&lt;br&gt;
实际上，这也是验证身份的核心关键： &lt;code&gt;不可抵赖性&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果我们将这个特性应用到证书上呢？&lt;/p&gt;
&lt;p&gt;A 的私钥只有 A 持有，那么 A 用私钥加密的 A 证书，只有用 A 的公钥才能正确解密。&lt;br&gt;
B 想要判断 A 的身份，只需要用 A 的公钥解密 A 证书，如果能够正确解密的话，那么这个证书就一定是 A 的，别人无法伪造的东西，A 自然无法抵赖，也就验明了 A 的身份。&lt;/p&gt;
&lt;p&gt;我们就把经过公钥加密的证书叫做 &lt;code&gt;数字证书&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;而用私钥加密数据的过程就叫做 &lt;code&gt;数字签名&lt;/code&gt; &lt;br&gt;
&lt;strong&gt;数字签名具备不可抵赖性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;咋一看好像已经完结撒花了，实际上还是无法真正避免中间人攻击。&lt;br&gt;
因为 A 的公钥需要在公网上传播，就存在被 C 偷天换日，替换为 C 的公钥的可能。&lt;/p&gt;
&lt;p&gt;B 以为拿到的是 A 的公钥，实际上还是 C 的公钥，因此 C 用 C 的私钥伪造数字证书再发给 B，B 当然能够正确解密，这也给了 B 一个错觉：和我通信的 A 的身份没有问题。&lt;br&gt;
所以 A 和 B 见面后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B：就是你，A！你为什么要骂我？我要和你绝交！&lt;br&gt;
A：？？？？啥啊，我说啥了！&lt;br&gt;
B：还想抵赖？我都能用你的公钥解开你的数字证书！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;无奈之举本地预装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无奈之举本地预装&#34;&gt;#&lt;/a&gt; 无奈之举：本地预装&lt;/h2&gt;
&lt;p&gt;哪里都有 C 这个小人，咱们实在是没法子了，干脆直接在本地计算机中预先存放公钥吧，这样 C 就没有替换公钥的机会了。&lt;/p&gt;
&lt;p&gt;但是这样又会出现其他的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何提前预装需要与其通信的对象的公钥？这就跟如何安全交换对称加密密钥是一个难度了，属于物理层面的难题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最终解法权威机构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最终解法权威机构&#34;&gt;#&lt;/a&gt; 最终解法：权威机构&lt;/h2&gt;
&lt;p&gt;人们怎么能被 C 这个小人打败呢？于是，这么一套验证体系出现了：&lt;br&gt;
&lt;strong&gt;在本地计算机中预装 &lt;code&gt;权威机构CA&lt;/code&gt;  颁发的 &lt;code&gt;数字证书&lt;/code&gt; ，通过 CA 的数字证书来验证经过了公网的数字证书是否可信，避免中间人攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;ca证书授权中心&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ca证书授权中心&#34;&gt;#&lt;/a&gt; CA 证书授权中心&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;CA证书授权(CertificateAuthority)中心&lt;/code&gt; 是数字证书发行的唯一机构。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CA 机构持有自己的公钥与私钥&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公钥是公开的，会包含在&lt;strong&gt;数字证书&lt;/strong&gt;内，预置到操作系统 / 浏览器中。
&lt;ul&gt;
&lt;li&gt;即 CA 机构会生成一份自己的明文证书 (里面的公钥就是公开的公钥)，然后自己用私钥&lt;strong&gt;签名&lt;/strong&gt; (又或者是交给其他 CA 机构去签名)，自签发的数字证书就应该是根证书，不管是自签发还是其他 CA 机构签发的，最后都会得到&lt;strong&gt;数字证书&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;私钥由 CA 机构自行保存。
&lt;ul&gt;
&lt;li&gt;这样子就保证了数字签名的可靠，因为别人是无法得到 CA 机构的私钥的，也就无法伪造该 CA 机构所签发的数字证书。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;签发数字证书&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签发数字证书&#34;&gt;#&lt;/a&gt; 签发数字证书&lt;/h2&gt;
&lt;p&gt;B 假定是服务器，他如果想和客户端建立安全信道，得到客户端的信任，就需要先向 CA 机构申请数字证书。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B 提交证书；&lt;/li&gt;
&lt;li&gt;CA 机构对证书进行签名，得到数字证书，交回给 B。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;签发后的数字证书包含了：&lt;strong&gt;证书内容&lt;/strong&gt;、&lt;strong&gt;摘要算法&lt;/strong&gt;、&lt;strong&gt;加密摘要信息&lt;/strong&gt; 三部分。&lt;/p&gt;
&lt;p&gt;CA 机构使用摘要算法对证书内容进行计算，得到摘要信息，再对摘要信息使用私钥进行加密。&lt;br&gt;
&lt;em&gt;为什么不直接加密证书内容？因为加密摘要信息可以减少计算量，同样也可以保证数字证书不被篡改。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;客户端收到 B 的数字证书时，就会先使用预装的 CA 数字证书 (包含了 CA 的公钥) 对加密摘要信息进行解密，同时用摘要算法对证书内容进行计算，得到摘要信息。&lt;br&gt;
最后比较解密后的摘要信息与计算得出的摘要信息，相同则表示数据并未被篡改。&lt;/p&gt;
&lt;p&gt;看到这里想必有些读者就迷糊了：&lt;br&gt;
&lt;em&gt;&lt;strong&gt;CA 机构颁发的数字证书和服务器的数字证书到底是不是一回事呢？&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
可以说是一回事，他们是逐层签发的关系。&lt;br&gt;
我先信任我计算机中的数字证书，而服务器发过来的数字证书又是我所信任的数字证书对应的私钥 (CA 机构持有) 签发的 (通过我所信任的数字证书进行验证)，故我再信任服务器发过来的数字证书。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;可为什么预装的是数字证书，而不是直接是公钥呢？&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
有更多的信息需要存放，因此将其封装是更好的选择。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;为什么是服务器申请数字证书，客户端不需要吗？&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
首先数字证书通常需要向权威机构申请，并且是需要钱的；&lt;br&gt;
其次也很难为全世界所有计算机都分配数字证书；&lt;br&gt;
最后通常也无需验证客户端的身份，因为服务器所服务的对象绝大多数应用场景下并不特指某个客户端 (不管你是正常用户还是坏蛋，我都一视同仁)，只需要客户端认证服务器的身份就足够了。&lt;/p&gt;
&lt;h1 id=&#34;验证过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验证过程&#34;&gt;#&lt;/a&gt; 验证过程&lt;/h1&gt;
&lt;h2 id=&#34;签名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签名&#34;&gt;#&lt;/a&gt; 签名：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A 生成证书 (填好个人信息)，发给 CA 机构。&lt;/li&gt;
&lt;li&gt;CA 机构通过散列函数对明文证书进行计算，得到明文证书的信息摘要。&lt;/li&gt;
&lt;li&gt;CA 机构通过持有的私钥加密信息摘要，其结果即&lt;strong&gt;数字签名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;将明文证书以及数字签名打包，即得到&lt;strong&gt;数字证书&lt;/strong&gt;，再发给申请者 A。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;验签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#验签&#34;&gt;#&lt;/a&gt; 验签：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;B 收到 A 发来的&lt;strong&gt;数字证书&lt;/strong&gt;，包含了明文证书与 CA 机构签发的&lt;strong&gt;数字签名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;B 通过本地预置的 CA 机构&lt;strong&gt;数字证书&lt;/strong&gt;中的公钥，对&lt;strong&gt;数字签名&lt;/strong&gt;进行解密，得到信息摘要&lt;/li&gt;
&lt;li&gt;B 通过散列函数对明文证书进行计算，得到明文证书的信息摘要。&lt;/li&gt;
&lt;li&gt;比较计算明文证书得到的信息摘要与解密&lt;strong&gt;数字签名&lt;/strong&gt;得到的信息摘要，不同则表示明文证书被篡改了。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补充&#34;&gt;#&lt;/a&gt; 补充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CA 是有能力进行中间人攻击的，因为 CA 持有大家伙本地计算机预置公钥的私钥。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CA 叫做 CA 的意义就在这里，CA 机构必须是权威公信的，不能做出这种行为，否则将会失去大家伙的信任。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数字签名并非只能用于签名明文证书得到数字证书，可以用于签名任何数据防止篡改。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;信任证书链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#信任证书链&#34;&gt;#&lt;/a&gt; 信任证书链&lt;/h1&gt;
&lt;p&gt;如公司 ABC 的数字证书，就是由 A 机构签发的，需要用 A 机构的数字证书来验签；&lt;br&gt;
而 A 机构的数字证书又是 B 机构签发的，需要用 B 机构的数字证书来验签；&lt;br&gt;
这样就形成了信任链。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;信任过程就是逐层向上的验签，直到根证书 (Root，即自签名的证书) 为止；&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;对根证书只能无条件信任。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;windowspe文件数字签名简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#windowspe文件数字签名简述&#34;&gt;#&lt;/a&gt; WindowsPE 文件数字签名简述&lt;/h1&gt;
&lt;p&gt;Windows 的 PE 文件如果存在数字签名，那么在其安全目录中，即包含了数字证书，再将 PE 文件散列值进行数字签名 (由 PE 文件数字证书的所有者签名)，同样也包含在内。&lt;br&gt;
首先通过本地预置数字证书证明 PE 文件中数字证书的可靠性，再通过 PE 文件中的数字证书的公钥解密 (验签) 数字签名，得到正确的散列值，再计算 PE 文件的散列值进行比较。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/sky8336/article/details/113696551&#34;&gt;https://blog.csdn.net/sky8336/article/details/113696551&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://zhuanlan.zhihu.com/p/43789231&#34;&gt;https://zhuanlan.zhihu.com/p/43789231&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/819.html</guid>
            <title>【动手写ToyLang】6-虚拟机设计</title>
            <link>http://yuyuaqwq.github.io/posts/819.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Thu, 08 Dec 2022 00:24:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;所谓解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#所谓解释器&#34;&gt;#&lt;/a&gt; 所谓 &amp;quot;解释器&amp;quot;&lt;/h1&gt;
&lt;p&gt;我们除了能对遵循 ToyLang 语法的源文件编译之外，还要能够执行编译的结果。&lt;br&gt;
若编译结果需要由其他程序负责执行，该程序便可称之为解释器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如先前提及的 AST 解释器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;百度百科上对解释器的定义也较为模糊：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解释器（英语：Interpreter），又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;按照百度百科的定义，一行一行动态执行高级编程语言的程序，才能算解释器。&lt;br&gt;
但是以现在常见的编程语言，如 Python、Java 等也在某些情况下会被定义为解释型语言来看，已经与 &amp;quot;解释器&amp;quot; 的定义相违背了。&lt;br&gt;
因为 Python 和 Java 并不是逐行解释源代码的，实际上得以 &amp;quot;解释&amp;quot; 的是字节码，而执行字节码的程序又被称为 &amp;quot;虚拟机&amp;quot;。&lt;/p&gt;
&lt;p&gt;我的个人理解是，“解释器”、&amp;quot;解释型语言&amp;quot; 等名词的诞生，或许是为了与在当时已成体系的本地编译型语言进行区分，不过历史是否如此我也不好追溯了。&lt;/p&gt;
&lt;p&gt;因此，不必过度纠结 &amp;quot;解释器&amp;quot; 和 &amp;quot;虚拟机&amp;quot;，可以简单理解成解释器是一种笼统的统称，虚拟机是一种具体的实现，AST 解释器则是另一种实现，最终目标都是为了使得源代码得以以某种方式运行起来。&lt;/p&gt;
&lt;h1 id=&#34;虚拟机简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟机简述&#34;&gt;#&lt;/a&gt; 虚拟机简述&lt;/h1&gt;
&lt;p&gt;想必各位读者读者也经常见过&lt;strong&gt;虚拟机&lt;/strong&gt;这个词。&lt;/p&gt;
&lt;p&gt;咱们的 ToyLang 不选择直接解释 AST，而是设计虚拟机以执行编译结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟机在不同场景下，所代指的东西存在差异，此处仅解释在编译原理中虚拟机的定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;实际上，虚拟机的开发应该是在更靠后一些的章节中讲述，在编写指令生成时顺带完成虚拟机。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;不过虚拟机的编写并不复杂，并且相对独立，因此就提前将其设计好，代码生成时以我们所设计的虚拟机为准去生成代码，有需要再对虚拟机进行修改与补充。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们并不选择生成本地代码 (与机器相关的机器指令)，而是生成一种被称为 &lt;code&gt;字节码&lt;/code&gt; 的编译产物。&lt;/p&gt;
&lt;p&gt;如果读者曾经学习过 &lt;code&gt;Java&lt;/code&gt; ，应该或多或少听过这种说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java 并不直接生成 &lt;code&gt;机器指令&lt;/code&gt; ，而是生成 &lt;code&gt;字节码&lt;/code&gt; ，交给 &lt;code&gt;JVM&lt;/code&gt;  去执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以我个人的理解看来， &lt;code&gt;机器指令&lt;/code&gt; 和 &lt;code&gt;字节码&lt;/code&gt; 并没有特别多的区别，只不过负责执行的对象不一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是直接由硬件执行&lt;/li&gt;
&lt;li&gt;一个是模拟了硬件执行指令的流程的程序，自己设计了一套指令集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是的，我们所做的也与 &lt;code&gt;Java&lt;/code&gt;  类似，我们也会设计 ToyLang 所生成的字节码，以及执行字节码的虚拟机。&lt;br&gt;
当然这个虚拟机你要叫什么都可以，我在这里就把它叫成 &lt;code&gt;TVM(Toy Virtual Machine)&lt;/code&gt; ，&lt;/p&gt;
&lt;h1 id=&#34;tvm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tvm&#34;&gt;#&lt;/a&gt; TVM&lt;/h1&gt;
&lt;p&gt;我们的 &lt;code&gt;TVM&lt;/code&gt;  设计十分简单，只有十几条指令，但也足够我们使用了。&lt;/p&gt;
&lt;p&gt;为了实现更加简单， &lt;code&gt;TVM&lt;/code&gt;  被设计为基于栈的虚拟机。&lt;/p&gt;
&lt;h2 id=&#34;指令集设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令集设计&#34;&gt;#&lt;/a&gt; 指令集设计&lt;/h2&gt;
&lt;h3 id=&#34;指令结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指令结构&#34;&gt;#&lt;/a&gt; 指令结构&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;字段&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;长度&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Reserved&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1bit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;保留位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opcode&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7bit&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Immediate&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4byte&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;立即数，可选&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;opcode&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#opcode&#34;&gt;#&lt;/a&gt; Opcode&lt;/h3&gt;
&lt;p&gt;Opcode，即操作码，是指令的一部分，在虚拟机的指令解码器在会根据指令的 Opcode 来进行不同的操作。&lt;br&gt;
以下是 TVM 指令集的 Opcode 表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;助记符&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;编码&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;stop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x00&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;停止虚拟机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x01&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;空指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pushk&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x02&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将常量推入栈顶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pushv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x03&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将变量推入栈顶&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x04&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;弹出栈顶值并抛弃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;popv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x05&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;弹出栈顶值并保存到变量中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x06&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 + stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x07&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 - stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;mul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 * stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;div&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x09&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;依次弹出栈顶的值，stack2 /stack1，压入结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;call&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数调用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ret&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;函数调用返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ne&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;不等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;eq&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0d&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0e&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;le&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;小于等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;gt&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ge&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;大于等于比较&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;jcf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;条件为否则跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;jmp&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;无条件跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;toylang-源码-最终转换为-虚拟机指令的简单示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#toylang-源码-最终转换为-虚拟机指令的简单示例&#34;&gt;#&lt;/a&gt; ToyLang 源码 最终转换为 虚拟机指令的简单示例&lt;/h3&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if a == 1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;a==1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    print(&amp;quot;a!=1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pushv a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pushk 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;eq&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jcf .else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;jmp .end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.end:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/41fe.html</guid>
            <title>【Windows内核】x64下定位随机页表基址的思路</title>
            <link>http://yuyuaqwq.github.io/posts/41fe.html</link>
            <category>保护模式</category>
            <category>Windows内核</category>
            <pubDate>Fri, 02 Dec 2022 16:21:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;昨天在看周哥讲 x64 内核的时候，得知了 windows10 的某个版本开始，页表基址不再固定了。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;今天晚上突然有了个思路，就动手把他敲出来了，这种思路是不是已经烂大街了我也不确定，就当发出来学习交流吧。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;随机页表基址原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#随机页表基址原理&#34;&gt;#&lt;/a&gt; 随机页表基址原理&lt;/h1&gt;
&lt;p&gt;这里用 x86 的 10-10-12 分页举例吧，比较好理解，理解了 x64 的也差不多的&lt;/p&gt;
&lt;p&gt;启用了保护模式和分页机制后，咱就不能直接访问物理地址了，都会被 MMU 当作虚拟地址进行转换。&lt;/p&gt;
&lt;p&gt;但是 cr3 存的又是物理地址，不能直接操作页表了，那咋办呢？&lt;/p&gt;
&lt;p&gt;聪明的前辈们，选择在页目录表中选择一项 (共 1024 项，每一项 4 字节)，使其存储的物理地址与页目录表的基址 (cr3) 相同，这样子就可以构造一个访问页表的虚拟地址了，大概就是&lt;strong&gt;让 cpu 在地址转换的过程中绕圈圈&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画个图吧&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/41fe/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定位思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定位思路&#34;&gt;#&lt;/a&gt; 定位思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x64 也必然是随机选择 PXT 的其中一项 PXE 来存储 PXT 的物理地址，实现的随机页表基址&lt;/li&gt;
&lt;li&gt;那么就可以通过&lt;strong&gt;构造所有可能指向 PXT 的虚拟地址 (共 512 项)&lt;/strong&gt;，转换为物理地址，再与 cr3 比较，最终得到正确的 PXT 基址。&lt;/li&gt;
&lt;li&gt;只要知道了存储 PXT 的物理地址的 PXE 的 PXI，构造 PPT/PDT/PTT 基址都很简单了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现&#34;&gt;#&lt;/a&gt; 实现&lt;/h1&gt;
&lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;PVOID &lt;span class=&#34;title&#34;&gt;GetPXTBase&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	UINT64 cr3 = __readcr3();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;KdPrint&lt;/span&gt;((&lt;span class=&#34;string&#34;&gt;&amp;quot;yuyu:cr3:%p\n&amp;quot;&lt;/span&gt;, cr3));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (UINT64 i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;512&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;// 通过PXI构造虚拟地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		PVOID pxtBase = (PVOID)(&lt;span class=&#34;number&#34;&gt;0xffff000000000000&lt;/span&gt; | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;) | (i &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;39&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		PHYSICAL_ADDRESS physical = &lt;span class=&#34;built_in&#34;&gt;MmGetPhysicalAddress&lt;/span&gt;(pxtBase);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;built_in&#34;&gt;KdPrint&lt;/span&gt;((&lt;span class=&#34;string&#34;&gt;&amp;quot;yuyu:i:%d 物理:%p 虚拟:%p\n&amp;quot;&lt;/span&gt;, i, physical.QuadPart, pxtBase));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (cr3 == physical.QuadPart) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; pxtBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/41fe/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;结尾&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h1&gt;
&lt;p&gt;理解有限，如有错误，还请指正&lt;/p&gt;
&lt;h1 id=&#34;2022514补充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2022514补充&#34;&gt;#&lt;/a&gt; 2022/5/14 补充&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;其实除开这个之外，我先想到的是另一个思路，即&lt;strong&gt;构造所有可能存储 PXT 的物理地址的 PXE 的虚拟地址&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;依旧是 512 项，探测地址是否可访问，读取 8 字节；&lt;/li&gt;
&lt;li&gt;将其当作 PXE，取出物理页面基址，再与 cr3 进行比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是这种方法有概率出现问题，即存放的数据可能正好与 cr3 相同，但所在页面并不是 PXT。
&lt;ul&gt;
&lt;li&gt;因此我就没有写出来，不过我想了一下，还是贴出来了，也算是一种思路嘛。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/329c.html</guid>
            <title>【动手写ToyLang】5.四则表达式解析与运算</title>
            <link>http://yuyuaqwq.github.io/posts/329c.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Wed, 23 Nov 2022 00:10:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;准备冻手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备冻手&#34;&gt;#&lt;/a&gt; 准备冻手&lt;/h1&gt;
&lt;p&gt;理论讲那么多，想必大家也犯困了，马上就到冻手环节了，本节我们会实现一个支持括号的四则表达式编译器 &amp;amp; AST 解释器，用以验证我们所学习的知识。&lt;/p&gt;
&lt;h1 id=&#34;ebnf文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf文法&#34;&gt;#&lt;/a&gt; EBNF 文法&lt;/h1&gt;
&lt;p&gt;这里把本节代码所参考的 EBNF 文法贴上。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = parenexp &amp;#123;oper1 parenexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;parenexp = &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt; addexp &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt; | numexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;numexp = number&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在上节文法的基础上稍作修改，支持了括号。&lt;/p&gt;
&lt;h1 id=&#34;ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast&#34;&gt;#&lt;/a&gt; AST&lt;/h1&gt;
&lt;p&gt;在编写语法分析器之前，我们需要先定义好每个 AST 节点 (符号) 的结构。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\ast\exp.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ExpType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kAdd,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kMul,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kNum,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    kParen,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 表达式抽象基类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Exp&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;= &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 加法表达式节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MulExp&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;AddExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AddExp&lt;/span&gt;(std::unique_ptr&amp;lt;MulExp&amp;gt; t_leftMulExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;std::unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_mulExpList);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;MulExp&amp;gt; leftMulExp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;std::unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt; mulExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 乘法表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParenExp&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MulExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;MulExp&lt;/span&gt;(std::unique_ptr&amp;lt;ParenExp&amp;gt; t_leftParenExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;std::unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_parenExpList);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;ParenExp&amp;gt; leftParenExp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;std::unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt; parenExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 括号表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParenExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ParenExp&lt;/span&gt;(std::unique_ptr&amp;lt;Exp&amp;gt; texp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::unique_ptr&amp;lt;Exp&amp;gt; exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 数值表达式类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;NumExp&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; Exp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; ExpType &lt;span class=&#34;title&#34;&gt;GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;NumExp&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t_num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace ast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// AST_EXP_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们创建了四个类用于描述 AST 节点：&lt;br&gt;
 &lt;code&gt;Exp&lt;/code&gt;  是抽象基类，只是为了让我们的实现更加优雅，实际描述节点的是下列四个类；&lt;br&gt;
 &lt;code&gt;AddExp&lt;/code&gt; 、 &lt;code&gt;MulExp&lt;/code&gt; 、 &lt;code&gt;ParenExp&lt;/code&gt; 、 &lt;code&gt;NumExp&lt;/code&gt;  皆继承自 &lt;code&gt;Exp&lt;/code&gt; ，各自表示三个终结符节点和一个非终结符节点。&lt;/p&gt;
&lt;p&gt;其中，派生类的成员变量存储了节点的连接关系与值。&lt;br&gt;
暂时看不懂也没关系，你可以先拷贝代码，理解的关键在于语法分析器。&lt;/p&gt;
&lt;p&gt;接下来是 AST 节点的实现，就是类的构造与析构，并没有什么特别的代码，大致浏览下即可。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\ast\exp.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; std::unique_ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;AddExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AddExp::&lt;span class=&#34;built_in&#34;&gt;AddExp&lt;/span&gt;(unique_ptr&amp;lt;MulExp&amp;gt; t_leftMulExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_mulExpList) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;leftMulExp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_leftMulExp)), &lt;span class=&#34;built_in&#34;&gt;operList&lt;/span&gt;(t_operList), &lt;span class=&#34;built_in&#34;&gt;mulExpList&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_mulExpList)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;MulExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;MulExp::&lt;span class=&#34;built_in&#34;&gt;MulExp&lt;/span&gt;(unique_ptr&amp;lt;ParenExp&amp;gt; t_leftParenExp, &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; std::vector&amp;lt;TokenType&amp;gt;&amp;amp; t_operList, std::vector&amp;lt;unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt;&amp;amp;&amp;amp; t_parenExoList) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;leftParenExp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_leftParenExp)), &lt;span class=&#34;built_in&#34;&gt;operList&lt;/span&gt;(t_operList), &lt;span class=&#34;built_in&#34;&gt;parenExpList&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_parenExoList)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;ParenExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ParenExp::&lt;span class=&#34;built_in&#34;&gt;ParenExp&lt;/span&gt;(unique_ptr&amp;lt;Exp&amp;gt; t_exp) : &lt;span class=&#34;built_in&#34;&gt;exp&lt;/span&gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(t_exp)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;ExpType &lt;span class=&#34;title&#34;&gt;NumExp::GetType&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; ExpType::kNum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;NumExp::&lt;span class=&#34;built_in&#34;&gt;NumExp&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; t_num) : &lt;span class=&#34;built_in&#34;&gt;num&lt;/span&gt;(t_num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace ast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h1 id=&#34;parser&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#parser&#34;&gt;#&lt;/a&gt; Parser&lt;/h1&gt;
&lt;p&gt;我们在第 2 节已经实现了一个词法分析器，接下来我们继续完成语法分析器。&lt;/p&gt;
&lt;p&gt;以下是头文件，接下来我们把重心放到实现上。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ast/exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 语法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;ParserException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ParserException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Parser&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;Parser&lt;/span&gt;(Lexer* t_lexer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;Exp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;AddExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;MulExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;ParenExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;std::unique_ptr&amp;lt;NumExp&amp;gt; &lt;span class=&#34;title&#34;&gt;ParseNumExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer* m_lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace parser&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// PARSER_PARSER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h2 id=&#34;解析exp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析exp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;exp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;首先我们知道，我们所编写的是四则表达式运算器，那么接收到的用户输入就是一个表达式，即非终结符 &lt;code&gt;exp&lt;/code&gt; ，因此，解析就是从 &lt;code&gt;exp&lt;/code&gt;  开始层层下降的。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;Exp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = &lt;span class=&#34;built_in&#34;&gt;ParseAddExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;().&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;ParserException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;Incomplete parsing&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; exp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码非常简单，根据 EBNF 描述的文法来看， &lt;code&gt;exp&lt;/code&gt;  由一个 &lt;code&gt;addexp&lt;/code&gt;  组成；&lt;br&gt;
因此我们调用 &lt;code&gt;ParseAddExp&lt;/code&gt;  去解析 &lt;code&gt;addexp&lt;/code&gt; ，返回一个 &lt;code&gt;AddExp&lt;/code&gt;  类对象，返回就表示解析完成了。&lt;/p&gt;
&lt;p&gt;接下来我们前瞻一个 token，看看是不是已经将所有 token 都吃完了，还有可用 token 就表示输入串有错误，抛出一个异常即可。&lt;/p&gt;
&lt;p&gt;最后直接返回 &lt;code&gt;AddExp&lt;/code&gt;  对象，到这里你可能有些疑惑，我们解析的不是 &lt;code&gt;exp&lt;/code&gt;  吗？为什么不是返回一个 &lt;code&gt;Exp&lt;/code&gt;  对象，而是返回一个 &lt;code&gt;AddExp&lt;/code&gt;  对象？&lt;br&gt;
因为实际上 EBNF 文法描述上， &lt;code&gt;exp&lt;/code&gt;  就只由 &lt;code&gt;addexp&lt;/code&gt;  组成，它们基本上可以看作是等价的，为了省事，我就直接让 &lt;code&gt;AddExp&lt;/code&gt;  对象成为 AST 的根节点。&lt;/p&gt;
&lt;p&gt;而我们实际上没有实现描述非终结符 &lt;code&gt;exp&lt;/code&gt;  的类， &lt;code&gt;Exp&lt;/code&gt;  并不是描述 &lt;code&gt;exp&lt;/code&gt;  的类，只是看起来很像。&lt;br&gt;
 &lt;code&gt;Exp&lt;/code&gt;  是我们另外定义的基类，基类指针自然可以指向派生类对象。&lt;/p&gt;
&lt;h2 id=&#34;解析addexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析addexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;addexp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来我们需要解析 &lt;code&gt;addexp&lt;/code&gt; ，对应的类自然就是 &lt;code&gt;AddExp&lt;/code&gt; ，返回它的实例化对象。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;AddExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; leftMulExp = &lt;span class=&#34;built_in&#34;&gt;ParseMulExp&lt;/span&gt;();    &lt;span class=&#34;comment&#34;&gt;// 解析左边的mulexp，保存解析的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;unique_ptr&amp;lt;MulExp&amp;gt;&amp;gt; mulExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 循环解析右边的mulexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 前瞻一下，如果后面已经不是加法符号或者减法符号了，就可以返回了。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpAdd) &amp;amp;&amp;amp; !token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpSub)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 吃掉刚刚前瞻的运算符号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        operList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(token.type);   &lt;span class=&#34;comment&#34;&gt;// 保存符号，因为连接两个mulexp的符号可能是加法，也可能是减法，保存起来供解释时使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mulExpList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;ParseMulExp&lt;/span&gt;());    &lt;span class=&#34;comment&#34;&gt;// 解析并保存右侧mulexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;comment&#34;&gt;// 构造AddExp对象并返回&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;AddExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(leftMulExp), operList, std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(mulExpList));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;依旧是按照 EBNF 文法来解析。&lt;/p&gt;
&lt;p&gt;我们先解析最左边的一个 &lt;code&gt;mulexp&lt;/code&gt;  非终结符，接下来就可能是多对 &lt;code&gt;oper2&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  了，因此用一个循环来解析，分别保存到 &lt;code&gt;vector&lt;/code&gt;  容器中。&lt;/p&gt;
&lt;h2 id=&#34;解析mulexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析mulexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;mulexp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来解析 &lt;code&gt;mulexp&lt;/code&gt; ，对应的类是 &lt;code&gt;MulExp&lt;/code&gt; ，返回它的实例化对象。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; leftParenExp = &lt;span class=&#34;built_in&#34;&gt;ParseParenExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;TokenType&amp;gt; operList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;unique_ptr&amp;lt;ParenExp&amp;gt;&amp;gt; parenExpList;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpMul) &amp;amp;&amp;amp; !token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kOpDiv)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    operList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(token.type);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    parenExpList.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;ParseParenExp&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;MulExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(leftParenExp), operList, std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(parenExpList));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;由于 &lt;code&gt;addexp&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  的结构基本相同，他们的解析过程也一般无二。&lt;/p&gt;
&lt;h2 id=&#34;解析parenexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析parenexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;parenexp&lt;/code&gt;&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;ParenExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LookAHead&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kSepLParen)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;ParenExp&amp;gt;(&lt;span class=&#34;built_in&#34;&gt;ParseNumExp&lt;/span&gt;());   &lt;span class=&#34;comment&#34;&gt;// 不是以`(`开头的子表达式，直接当成numexp解析。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = &lt;span class=&#34;built_in&#34;&gt;ParseAddExp&lt;/span&gt;();   &lt;span class=&#34;comment&#34;&gt;// 解析一个addexp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;MatchToken&lt;/span&gt;(TokenType::kSepRParen);        &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;ParenExp&amp;gt;(std::&lt;span class=&#34;built_in&#34;&gt;move&lt;/span&gt;(exp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;解析 &lt;code&gt;parenexp&lt;/code&gt;  的代码也比较简单，根据 EBNF 所描述的文法，要么就是以 &lt;code&gt;(&lt;/code&gt; 开始的子表达式，要么就是数值表达式。&lt;/p&gt;
&lt;h2 id=&#34;解析numexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析numexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;numexp&lt;/code&gt;&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\parser\parser.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;unique_ptr&amp;lt;NumExp&amp;gt; &lt;span class=&#34;title&#34;&gt;Parser::ParseNumExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = m_lexer-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;MatchToken&lt;/span&gt;(TokenType::kNumber);   &lt;span class=&#34;comment&#34;&gt;// 直接匹配一个NumberToken&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;built_in&#34;&gt;atoi&lt;/span&gt;(token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;());    &lt;span class=&#34;comment&#34;&gt;// 字符串转整数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; std::&lt;span class=&#34;built_in&#34;&gt;make_unique&lt;/span&gt;&amp;lt;NumExp&amp;gt;(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;&lt;code&gt;numexp&lt;/code&gt;  的解析是最简单的，直接从词法分析器那边匹配一个 &lt;code&gt;Number&lt;/code&gt;  类型的 token，就能拿到其字符串。&lt;/p&gt;
&lt;p&gt;至此，语法分析告一段落。&lt;/p&gt;
&lt;h1 id=&#34;interpreter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#interpreter&#34;&gt;#&lt;/a&gt; Interpreter&lt;/h1&gt;
&lt;p&gt;经过语法分析阶段，如果一切顺利，我们就将输入串转换成了 AST，接下来我们编写一个解释器，解释这颗树，得到结果。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\interpreter\interpreter.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; INTERPRETER_INTERPRETER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; INTERPRETER_INTERPRETER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;ast/exp.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Interpreter&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Exp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AddExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MulExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ParenExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;InterpretNumberExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(NumExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace interpreter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// INTERPRETER_INTERPRETER_H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;头文件也很简单，就是定义了一个解释器类，其成员函数负责解释不同类型的 AST 节点。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\interpreter\interpreter.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;interpreter.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(Exp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretAddExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;AddExp*&amp;gt;(exp));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretAddExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(AddExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;leftMulExp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; exp-&amp;gt;operList.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;operList[i] == TokenType::kOpAdd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res += &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;mulExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res -= &lt;span class=&#34;built_in&#34;&gt;InterpretMulExp&lt;/span&gt;(exp-&amp;gt;mulExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretMulExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(MulExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;leftParenExp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; exp-&amp;gt;operList.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;operList[i] == TokenType::kOpMul) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res *= &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;parenExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            res /= &lt;span class=&#34;built_in&#34;&gt;InterpretParenExp&lt;/span&gt;(exp-&amp;gt;parenExpList[i].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretParenExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(ParenExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (exp-&amp;gt;exp-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetType&lt;/span&gt;() == ExpType::kNum) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretNumberExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;NumExp*&amp;gt;(exp-&amp;gt;exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;InterpretAddExp&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;static_cast&lt;/span&gt;&amp;lt;AddExp*&amp;gt;(exp-&amp;gt;exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Interpreter::InterpretNumberExp&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(NumExp* exp)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; exp-&amp;gt;num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace interpreter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;实现代码能看到些许上述语法分析的代码的影子，实际上就是树的深度优先遍历并向上返回运算结果。&lt;br&gt;
只要理解了语法分析，解释的过程也很好理解。&lt;br&gt;
&lt;em&gt;如果你需要考虑四则运算的性能，甚至可以在语法分析阶段就返回数值结果，而不是构造 AST 树。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;完整测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整测试&#34;&gt;#&lt;/a&gt; 完整测试&lt;/h1&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;parser/parser.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;interpreter/interpreter.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; parser;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; interpreter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) + 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Parser &lt;span class=&#34;title&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&amp;amp;lexer)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; exp = parser.&lt;span class=&#34;built_in&#34;&gt;ParseExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Interpreter inter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; res = inter.&lt;span class=&#34;built_in&#34;&gt;InterpretExp&lt;/span&gt;(exp.&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;h1 id=&#34;完整代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#完整代码&#34;&gt;#&lt;/a&gt; 完整代码&lt;/h1&gt;
&lt;p&gt;我将本节完整代码放到了 github 上，你可以将其克隆下来亲自调试运行，鉴于 vs 强大的调试能力，你可以一步一步观察 AST 树的构造过程，加深理解。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuyuaqwq/ToyLang/tree/5.arithmetic&#34;&gt;https://github.com/yuyuaqwq/ToyLang/tree/5.arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/2fd3.html</guid>
            <title>【Qt】前言</title>
            <link>http://yuyuaqwq.github.io/posts/2fd3.html</link>
            <category>C++</category>
            <category>界面开发</category>
            <category>Qt</category>
            <pubDate>Sat, 12 Nov 2022 16:39:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;当前分类所收录的文章主要是我个人学习 QT 时记录的读书笔记。&lt;/p&gt;
&lt;p&gt;记得初学 C++ 不久学习过 QT，一直用不上，基本遗忘了。&lt;br&gt;
最近有些需求，重新捡一捡。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考资料&lt;br&gt;
&lt;a href=&#34;https://www.bilibili.com/video/BV1Qp4y167dD?p=5&amp;amp;spm_id_from=pageDriver&amp;amp;vd_source=2f16cbe6e2d0a9708b5b399c0b862fe3&#34;&gt;【风骚程序员】QT&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/f573.html</guid>
            <title>【动手写ToyLang】4.递归下降</title>
            <link>http://yuyuaqwq.github.io/posts/f573.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Sun, 30 Oct 2022 16:34:27 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;递归下降&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归下降&#34;&gt;#&lt;/a&gt; 递归下降&lt;/h1&gt;
&lt;p&gt;先前用于描述的加减运算表达式的文法，实际上并不能直接通过递归下降分析法来解析。&lt;/p&gt;
&lt;p&gt;说了这么多，递归下降到底是个什么玩意呢？&lt;br&gt;
接下来我们通过以下能够应用递归下降进行解析的文法来解析输入串，了解其解析过程，读者大概就明白了。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;block&lt;/span&gt; = &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&amp;#x27;&lt;/span&gt; &amp;#123;stat&amp;#125; &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stat = assignExp &lt;span class=&#34;string&#34;&gt;&amp;#x27;;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assignExp = ident &lt;span class=&#34;string&#34;&gt;&amp;#x27;=&amp;#x27;&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;value = number | string&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;stat&amp;#125;&lt;/code&gt;  表示重复 &lt;code&gt;stat&lt;/code&gt; ，此处表示可以有 0~n 个 &lt;code&gt;stat&lt;/code&gt; 。&lt;br&gt;
其中， &lt;code&gt;ident&lt;/code&gt;  是标识符， &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt;  是字面量，我们都会放到词法分析中去解析，故不在此列出其文法。&lt;/p&gt;
&lt;p&gt;首先，假设 &lt;code&gt;block&lt;/code&gt;  输入串为：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = &amp;quot;qwq&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是解析的伪代码：&lt;/p&gt;
&lt;h2 id=&#34;解析block&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析block&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;block&lt;/code&gt;&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseBlock(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#123;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while in.is(&amp;#x27;&amp;#125;&amp;#x27;) == false &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ParseStat(in);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;&amp;#125;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先从输入串中匹配 &lt;code&gt;&amp;#123;&lt;/code&gt; 字符；&lt;br&gt;
由于语句是可选的，因此需要检查紧接着的符号是否为 &lt;code&gt;&amp;#125;&lt;/code&gt;  字符，不是的话就可以匹配 &lt;code&gt;stat&lt;/code&gt;  了；&lt;br&gt;
 &lt;code&gt;stat&lt;/code&gt;  是一个非终结符，需要继续展开，此处交给 &lt;code&gt;ParseStat&lt;/code&gt;  进一步解析；&lt;br&gt;
 &lt;code&gt;ParseStat&lt;/code&gt;  返回后，表示一条语句的解析完成了，但语句可能存在多条，因此循环进行；&lt;br&gt;
最后匹配一个 &lt;code&gt;&amp;#125;&lt;/code&gt;  字符；&lt;br&gt;
 &lt;code&gt;block&lt;/code&gt;  解析完成。&lt;/p&gt;
&lt;p&gt;抽象语法树如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;为什么这里没有添加 &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  节点呢？&lt;/em&gt;&lt;br&gt;
&lt;em&gt;因为树构建完成后，我们自然可以知道这个节点是 block，在词法阶段的两个符号于语法树而言并无关紧要。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析stat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析stat&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;stat&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;关于 &lt;code&gt;stat&lt;/code&gt;  的解析，在 &lt;code&gt;ParseStat&lt;/code&gt;  函数中完成：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseStat(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseAssignExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;;&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解析assignexp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析assignexp&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;assignExp&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;接下来是 &lt;code&gt;assignExp&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseAssignExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kIdent);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(&amp;#x27;=&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseValue(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;这里同样没有将符号 &lt;code&gt;=&lt;/code&gt;  作为节点添加。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;解析value&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解析value&#34;&gt;#&lt;/a&gt; 解析 &lt;code&gt;Value&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;最后完成关于 &lt;code&gt;Value&lt;/code&gt;  的解析：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseValue(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr in.is(kNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        in.match(kNumber);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    inStr.match(kString);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;关键描述文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关键描述文法&#34;&gt;#&lt;/a&gt; 关键：描述文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;这种自顶逐层向下解析，以构造语法树的分析法，就叫做递归下降。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;虽然笔者并没有在伪代码中添加构造树的节点相关的代码，但不妨碍读者理解递归下降。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;你会发现，只要我们描述好了文法，用递归下降来解析输入串是一件非常简单的事情。&lt;/p&gt;
&lt;h2 id=&#34;无限递进&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#无限递进&#34;&gt;#&lt;/a&gt; 无限递进&lt;/h2&gt;
&lt;p&gt;还记得我在上一篇文章中所描述的文法吗？&lt;/p&gt;
&lt;p&gt;如果直接编写解析代码，就会形成无限递进：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;func ParseExp(inStr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseExp(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if inStr.is(&amp;#x27;+&amp;#x27;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;+&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        inStr.match(&amp;#x27;-&amp;#x27;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ParseNumber(inStr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;左递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#左递归&#34;&gt;#&lt;/a&gt; 左递归&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;如果非终结符 &lt;code&gt;r&lt;/code&gt;  被直接或间接推导后，其结果最左边又出现非终结符 &lt;code&gt;r&lt;/code&gt;  的情况，便称之为左递归。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;理想解析情况：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp = exp + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; exp = number + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码解析情况：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp = exp + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&amp;gt; exp = exp + number + number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;消除左递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#消除左递归&#34;&gt;#&lt;/a&gt; 消除左递归&lt;/h2&gt;
&lt;p&gt;为此，我们需要改写文法，以避免出现左递归。&lt;/p&gt;
&lt;h2 id=&#34;四则表达式文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四则表达式文法&#34;&gt;#&lt;/a&gt; 四则表达式文法&lt;/h2&gt;
&lt;p&gt;首先，我们用 EBNF 描述更加完整的四则表达式文法：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = addexp oper2 mulexp | mulexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = mulexp oper1 number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;关于 &lt;code&gt;number&lt;/code&gt;  的产生式就不再列出，实际上我们会在词法分析阶段将 &lt;code&gt;number&lt;/code&gt;  解析为 &lt;code&gt;token&lt;/code&gt; 。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我们现在很容易就能看出，在该文法中，左式为 &lt;code&gt;addexp&lt;/code&gt;  和 &lt;code&gt;mulexp&lt;/code&gt;  的产生式都存在左递归的问题。&lt;/p&gt;
&lt;p&gt;如何消除呢？&lt;br&gt;
首先观察产生式 &lt;code&gt;addexp = addexp oper2 mulexp | mulexp&lt;/code&gt; &lt;br&gt;
 我们会发现这么一条规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addexp&lt;/code&gt;  的推导产生的句型，必然是 &lt;code&gt;mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是我们可以重写文法为：&lt;/p&gt;
&lt;figure class=&#34;highlight bnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;addexp ::= mulexp addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;addexp&amp;#x27;&lt;/span&gt; ::= oper2 addexp&lt;span class=&#34;string&#34;&gt;&amp;#x27; | ε&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;教学时消除左递归时经常用于举例的 BNF 文法；&lt;br&gt;
其中 &lt;code&gt;ε&lt;/code&gt;  表示空。&lt;br&gt;
&lt;em&gt;事实上关于 BNF 的格式规范，网上许多文章的写法似乎都不尽相同，在这里笔者也不做深究了。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;addexp&lt;/span&gt; = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 EBNF 描述的文法，通过 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  做了简化。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;事实上，我们如果直接按照第一种文法编写解析代码，最终构成的语法树会存在结合律的问题。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;如果使用第二种文法，以多叉树的形式存储其节点，则会更加简单，因此本系列文章采用第二种文法。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;构造语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造语法树&#34;&gt;#&lt;/a&gt; 构造语法树&lt;/h1&gt;
&lt;p&gt;接下来我们尝试基于此文法与表达式 &lt;code&gt;1 + 5 * 6&lt;/code&gt; ，构造其抽象语法树。&lt;/p&gt;
&lt;p&gt;以下是完整文法：&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = addexp&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addexp = mulexp &amp;#123;oper2 mulexp&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mulexp = number &amp;#123;oper1 number&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;oper1 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是解析过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/8.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/f573/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读者不妨尝试自己编写一些表达式，然后画一画解析图，找找感觉。&lt;br&gt;
也可以尝试自己在脑中遍历这颗语法树，看看能否能够正确计算出结果。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 消除左递归.&lt;a href=&#34;https://blog.csdn.net/qq2071114140/article/details/102787831&#34;&gt;https://blog.csdn.net/qq2071114140/article/details/102787831&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/1571.html</guid>
            <title>【动手写ToyLang】3.语法分析</title>
            <link>http://yuyuaqwq.github.io/posts/1571.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Sun, 30 Oct 2022 11:52:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;语法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析&#34;&gt;#&lt;/a&gt; 语法分析&lt;/h1&gt;
&lt;p&gt;按照传统的编译原理教材讲述的编译器结构， &lt;code&gt;词法分析阶段&lt;/code&gt; 之后，便是 &lt;code&gt;语法分析阶段&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以下摘自百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如 “程序”，“语句”，“表达式” 等等。语法分析程序判断源程序在结构上是否正确。源程序的结构由上下文无关文法描述。语法分析程序可以用 YACC 等工具自动生成。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;简而言之，语法分析即要求完成对输入串是否能符合语言文法规定的检查。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;关于文法的定义，参照下文。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;语法分析器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法分析器&#34;&gt;#&lt;/a&gt; 语法分析器&lt;/h2&gt;
&lt;p&gt;我们需要实现的是语法分析器。&lt;br&gt;
&lt;strong&gt;语法分析器的主要工作就是接收词法分析器输出的 Token，产出抽象语法树。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本意我是不想讲太多学科中严谨定义的内容，一个是不好懂，容易劝退；一个是我个人的理解也有限。&lt;/em&gt;&lt;br&gt;
&lt;em&gt;所以本系列文章就只简单提及我认为的 ToyLang 开发过程中必要的东西。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文法&#34;&gt;#&lt;/a&gt; 文法&lt;/h1&gt;
&lt;p&gt;这里还是请出百度百科：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;文法是一个汉语词汇，读音为 wén fǎ ，即文章的书写法规，一般用来指以文字、词语、短句、句子的编排而组成的完整语句和文章的合理性组织。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;学习编译原理的过程中，确实会有许多概念难以理解。&lt;/p&gt;
&lt;p&gt;我们先简单理解成，&lt;strong&gt;文法就是描述如何将 token 组织成语法树的规则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的语言自然也需要存在文法，比如 if 语句必须按照下列文法来解析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;   &lt;code&gt;exp&lt;/code&gt;   &lt;code&gt;block&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，现在我们还是将重心放到四则表达式的解析上。&lt;/p&gt;
&lt;h2 id=&#34;上下文无关文法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#上下文无关文法&#34;&gt;#&lt;/a&gt; 上下文无关文法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;在推导产生式时，正在进行的非终结符展开与前后已经展开的终结符不存在关联的文法。&lt;/strong&gt;&lt;br&gt;
可以先继续向下看。&lt;/p&gt;
&lt;h1 id=&#34;ebnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ebnf&#34;&gt;#&lt;/a&gt; EBNF&lt;/h1&gt;
&lt;p&gt;我们选择通过 &lt;code&gt;EBNF&lt;/code&gt;  来描述 &lt;code&gt;ToyLang&lt;/code&gt;  的文法。&lt;/p&gt;
&lt;p&gt;EBNF 是什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;扩展巴科斯 - 瑙尔范式 (Extended Backus–Naur Form,EBNF) 是一种用于描述计算机编程语言等正式语言的与上下文无关语法的元语法 (metasyntax) 符号表示法。简而言之，它是一种描述语言的语言。它是基本巴科斯范式 (BNF) 元语法符号表示法的一种扩展。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;只看描述通常很难理解新事物，咱们尝试一下用 EBNF 描述四则运算表达式的文法。&lt;/p&gt;
&lt;figure class=&#34;highlight ebnf&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attribute&#34;&gt;exp&lt;/span&gt; = exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt; number | exp &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; number | number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;number = digit &amp;#123;digit&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;digit = &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;5&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;6&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;7&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;8&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了便于理解，这里只描述了加法与减法。&lt;/p&gt;
&lt;h2 id=&#34;基本规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本规则&#34;&gt;#&lt;/a&gt; 基本规则&lt;/h2&gt;
&lt;p&gt;读者或许没看明白，没关系，笔者简单讲解一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  左边的，我们称为 &lt;code&gt;左式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;=&lt;/code&gt;  右边的，我们称为 &lt;code&gt;右式&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;这样一行式子，我们称为 &lt;code&gt;产生式&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;非终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#非终结符&#34;&gt;#&lt;/a&gt; 非终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;是某条产生式的左式，可以用其右式代换。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;exp&lt;/code&gt; ， &lt;code&gt;number&lt;/code&gt; ， &lt;code&gt;digit&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;终结符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#终结符&#34;&gt;#&lt;/a&gt; 终结符&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;无法被再被代换的符号。&lt;/strong&gt;&lt;br&gt;
如 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; …。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;关于更多 EBNF 的语法规则，请参阅相关资料。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;自顶向下&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自顶向下&#34;&gt;#&lt;/a&gt; 自顶向下&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;已知 &lt;code&gt;输入串&lt;/code&gt; 为某条产生式的左式，扫描输入串以不断展开其非终结符，直至只剩下终结符。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;这个展开的过程我们叫做推导，这属于自顶向下解析的思想。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试解析&#34;&gt;#&lt;/a&gt; 尝试解析&lt;/h2&gt;
&lt;p&gt;我们先来看第一行产生式：&lt;br&gt;
 &lt;code&gt;exp = exp &#39;+&#39; number | exp &#39;-&#39; number | number&lt;/code&gt; &lt;br&gt;
 它描述了 &lt;code&gt;表达式&lt;/code&gt; 可以由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;表达式+数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以由 &lt;code&gt;表达式-数字&lt;/code&gt; 组成；&lt;/li&gt;
&lt;li&gt;也可以只由 &lt;code&gt;数字&lt;/code&gt; 组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;其中， &lt;code&gt;|&lt;/code&gt;  表示或的意思，如果读者学习过正则表达式，应当很容易理解。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;假设我们需要解析的 &lt;code&gt;exp&lt;/code&gt;  非终结符输入串为 &lt;code&gt;1 + 2&lt;/code&gt; ，解析过程如下：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;+&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; number &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是在重复将右式中的非终结符展开的过程。&lt;br&gt;
&lt;em&gt;这里为了节约篇幅，笔者没有将从 number 推导成 digit，再推导成数字的推导过程记录下来，读者明白这一点即可。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;再尝试一下解析 &lt;code&gt;exp&lt;/code&gt;  非终结符输入串 &lt;code&gt;1&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt;   &lt;code&gt;3&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;exp -&amp;gt; exp &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        -&amp;gt; exp &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            -&amp;gt; number &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; number &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        -&amp;gt; &amp;#x27;1&amp;#x27; &amp;#x27;+&amp;#x27; &amp;#x27;2&amp;#x27; &amp;#x27;-&amp;#x27; &amp;#x27;3&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，这个推导过程我们忽略了很多细节，并不能直接编写代码实现。&lt;/p&gt;
&lt;h1 id=&#34;尾声&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尾声&#34;&gt;#&lt;/a&gt; 尾声&lt;/h1&gt;
&lt;p&gt;在下一篇文章，我们会通过 EBNF 来描述完整的四则表达式的文法，并讲解 &lt;code&gt;递归下降&lt;/code&gt; 分析法。&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考文献&#34;&gt;#&lt;/a&gt; 参考文献&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;[1] 扩展巴科斯范式 (EBNF) 简介.&lt;a href=&#34;https://blog.csdn.net/lin_strong/article/details/78583543&#34;&gt;https://blog.csdn.net/lin_strong/article/details/78583543&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; [2] 应该如何理解「上下文无关文法」？.&lt;a href=&#34;https://www.zhihu.com/question/21833944&#34;&gt;https://www.zhihu.com/question/21833944&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt; 其他网络上较为零散的资料，无法一一列举，十分抱歉。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/aca7.html</guid>
            <title>【动手写ToyLang】2.词法分析</title>
            <link>http://yuyuaqwq.github.io/posts/aca7.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Sat, 29 Oct 2022 12:29:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;词法分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#词法分析&#34;&gt;#&lt;/a&gt; 词法分析&lt;/h1&gt;
&lt;p&gt;词法分析是整个编译器结构中最简单的一个阶段，所以放轻松，咱们往下看。&lt;/p&gt;
&lt;p&gt;那么，词法分析是什么呢？&lt;br&gt;
我们知道，程序开发者编写的源代码，也就是编译器最初能够接收到的输入，即连续的字符序列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析存在的意义，就是提前将源代码切分成能被后续编译程序直接使用的单词序列。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如源代码中的变量标识，关键字，字符串字面量，数值字面量等…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们上一节课所展示的算术表达式， &lt;code&gt;3 + 2&lt;/code&gt; ，也是先将其分成 &lt;code&gt;3&lt;/code&gt;   &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;2&lt;/code&gt;  三个节点，才能用于构成抽象语法树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;词法分析器产出的单词序列，我们将其称为 &lt;code&gt;Token&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;输入四则运算表达式产出token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#输入四则运算表达式产出token&#34;&gt;#&lt;/a&gt; 输入四则运算表达式，产出 &lt;code&gt;Token&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;我们既然需要将四则运算表达式转成 &lt;code&gt;Token&lt;/code&gt; ，也就需要知道其单词序列的规则，当然，关于这一点，我们早已烂熟于心了。&lt;br&gt;
以下是我通过正则表达式描述的 &lt;code&gt;Token&lt;/code&gt;  匹配规则 (以我们将要开发的词法分析器为准)。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TokenType&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Regex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Eof&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Number&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\d+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpAdd&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpSub&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpMul&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;OpDiv&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepLParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SepRParen&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;此处笔者忽略了运算符在正则表达式中需要转义的情况，做一个参考即可。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;lexer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer&#34;&gt;#&lt;/a&gt; Lexer&lt;/h1&gt;
&lt;p&gt;Lexer，即词法分析器。&lt;br&gt;
接下来我们编写代码实现 Lexer。&lt;/p&gt;
&lt;h2 id=&#34;token&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#token&#34;&gt;#&lt;/a&gt; Token&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\token.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// token类型常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;enum class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;TokenType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNil = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kEof,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kNumber,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpAdd,    &lt;span class=&#34;comment&#34;&gt;// +&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpSub,    &lt;span class=&#34;comment&#34;&gt;// -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpMul,    &lt;span class=&#34;comment&#34;&gt;// *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kOpDiv,    &lt;span class=&#34;comment&#34;&gt;// /&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepLPar,  &lt;span class=&#34;comment&#34;&gt;// (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	kSepRPar,  &lt;span class=&#34;comment&#34;&gt;// )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 描述token的结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Token&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; line;		&lt;span class=&#34;comment&#34;&gt;// 行号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	TokenType type;		&lt;span class=&#34;comment&#34;&gt;// token类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string str;	&lt;span class=&#34;comment&#34;&gt;// 保存必要的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_TOKEN_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\token.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;token.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Token::Is&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType t_type)&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; t_type == type;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;token 这部分十分简单，不赘述了。&lt;/p&gt;
&lt;h2 id=&#34;lexer-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lexer-2&#34;&gt;#&lt;/a&gt; Lexer&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\lexer.h &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;ifndef&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;define&lt;/span&gt; LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;exception&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;lexer/token.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; lexer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析时发生的异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;LexerException&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; std::exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 词法分析器类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;Lexer&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;LookAHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;MatchToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType type)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	std::string m_src;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;size_t&lt;/span&gt; m_idx;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	Token m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;comment&#34;&gt;// LEXER_LEXER_H_&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \ToyLang\lexer\lexer.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;LexerException::&lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_msg) : std::&lt;span class=&#34;built_in&#34;&gt;exception&lt;/span&gt;(t_msg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;(&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt;* t_src) : m_src&amp;#123; t_src &amp;#125;, m_line&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_idx&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#125;, m_save&amp;#123; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, TokenType::kNil &amp;#125; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Lexer::~&lt;span class=&#34;built_in&#34;&gt;Lexer&lt;/span&gt;() &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::NextChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_idx &amp;lt; m_src.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_src[m_idx++];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 跳过指定字符数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Lexer::SkipChar&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; count)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;noexcept&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_idx += count;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 前瞻下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::LookAHead&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_save.type == TokenType::kNil) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果没有前瞻过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_save = &lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();       &lt;span class=&#34;comment&#34;&gt;// 获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::NextToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Token token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!m_save.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kNil)) &amp;#123;        &lt;span class=&#34;comment&#34;&gt;// 如果有前瞻保存的token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 返回前瞻的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token = m_save;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_save.type = TokenType::kNil;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;char&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 跳过空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; ((c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;amp;&amp;amp; c == &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    token.line = m_line;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c == &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kEof;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 根据字符返回对应类型的Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;+&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpAdd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpSub;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;*&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpMul;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kOpDiv;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;(&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepLParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;#x27;)&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kSepRParen;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.type = TokenType::kNumber;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (c = &lt;span class=&#34;built_in&#34;&gt;NextChar&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&#34;string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                token.str.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;built_in&#34;&gt;SkipChar&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot parse token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 匹配下一Token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Token &lt;span class=&#34;title&#34;&gt;Lexer::MatchToken&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(TokenType type)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = &lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(type)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; token;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;LexerException&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;cannot match token&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;span class=&#34;comment&#34;&gt;// namespace lexer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们封装了一个词法分析器类；&lt;br&gt;
 &lt;code&gt;Lexer::LookAHead&lt;/code&gt;  前瞻一个 Token。&lt;br&gt;
 &lt;code&gt;Lexer::NextToken&lt;/code&gt;  是关键成员函数，用于扫描字符序列，匹配一个完整的 Token 并返回，如果前瞻过则返回前瞻的结果。&lt;br&gt;
 &lt;code&gt;Lexer::MatchToken&lt;/code&gt;  要求下一 token 为指定类型，否则会抛出异常。&lt;/p&gt;
&lt;h1 id=&#34;测试成果&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试成果&#34;&gt;#&lt;/a&gt; 测试成果&lt;/h1&gt;
&lt;p&gt;接下来，我们编写测试代码，用于测试新鲜出炉的词法分析器。&lt;br&gt;
用于测试的表达式是： &lt;code&gt;1 + 33 - 0 * (33 / 999) - 123&lt;/code&gt;&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; \entry.cpp &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;lexer/lexer.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;namespace&lt;/span&gt; toylang;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Lexer lexer&amp;#123; &lt;span class=&#34;string&#34;&gt;&amp;quot;1 + 33 - 0 * (33 / 999) - 123&amp;quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;auto&lt;/span&gt; token = lexer.&lt;span class=&#34;built_in&#34;&gt;NextToken&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (token.&lt;span class=&#34;built_in&#34;&gt;Is&lt;/span&gt;(TokenType::kEof)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (token.type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kNumber:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;, token.str.&lt;span class=&#34;built_in&#34;&gt;c_str&lt;/span&gt;()); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpAdd: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;+\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpDiv: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;/\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpMul: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;*\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kOpSub: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;-\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepLParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;(\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; TokenType::kSepRParen: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;); &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt; (&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 打印结果 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;999&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/56ac.html</guid>
            <title>【动手写ToyLang】1.从四则运算表达式开始</title>
            <link>http://yuyuaqwq.github.io/posts/56ac.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Fri, 28 Oct 2022 23:01:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;由此开始&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#由此开始&#34;&gt;#&lt;/a&gt; 由此开始&lt;/h1&gt;
&lt;p&gt;如果你曾经接触过《编译原理》的话，不知道是否与我有着同样的困惑呢？&lt;/p&gt;
&lt;p&gt;各种不近人情的名词，公式乱飞，这让我学习起来格外痛苦。&lt;/p&gt;
&lt;p&gt;我在阅读过不少文章、书籍，并且尝试敲下一些代码之后，才逐渐理解了一些较为关键的东西。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;实际上，当我真正完成了对四则运算表达式的解析的那一刻，我才真切感受到了编译原理的优雅与美妙之处，这大概就是由无数人智慧造就的伟大吧 (偏得有点远了)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，我才会选择先从四则运算表达式开始，将其逐步扩展成为一门 &lt;code&gt;通用编程语言&lt;/code&gt; ，也能让读者每一节都能感受到学习有所反馈的喜悦。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;初尝构思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初尝构思&#34;&gt;#&lt;/a&gt; 初尝构思&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;现在，我来尝试给你出一道题吧，请你用你所熟悉的语言，编写一个模块：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入符合四则运算表达式规范的字符串 (可以假定只有整数，不存在括号)；&lt;/li&gt;
&lt;li&gt;输出整型结果；&lt;/li&gt;
&lt;li&gt;要求关键逻辑由自己实现，不可借由库、语言本身提供的功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你能实现吗？&lt;/p&gt;
&lt;p&gt;是否觉得脑子有些空白，难以组织成较为优雅的实现思路呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果你现在就能想到很棒的解法，那至少你要比我厉害多了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我曾经因为某些需求做过尝试，虽然最后写出来了，但是具体实现也非常丑陋，这里就不献丑了。&lt;/p&gt;
&lt;p&gt;但是我可以给你大致描述一下我当初的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，查找字符串中优先级较高的运算符  &lt;code&gt;*&lt;/code&gt;   &lt;code&gt;/&lt;/code&gt; ，再前 / 后瞻运算符前后的数字，这个子串也能形成一个表达式；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算出结果后，在原表达式中，用结果替换掉子串 (刚刚被计算的表达式)，再继续查找。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成后再从头开始查找优先级更低一级的运算符 &lt;code&gt;+&lt;/code&gt;   &lt;code&gt;-&lt;/code&gt; ，直到运算完成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;当然，我们不会用这么低效的方法，也不会要求现在就给出实现。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现在提出这个问题，并不是为了为难你，只是为了让你记住眼下的感觉，当你学完本系列文章后，再回来看看，这一道题，是否真的有那么难呢？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;抽象语法树&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抽象语法树&#34;&gt;#&lt;/a&gt; 抽象语法树&lt;/h1&gt;
&lt;p&gt;咱们先来看百度百科对 &lt;code&gt;抽象语法树&lt;/code&gt; 的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95%E6%A0%91/7031301?fromModule=lemma_inlink&#34;&gt;语法树&lt;/a&gt;（Syntax tree），是&lt;a href=&#34;https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81?fromModule=lemma_inlink&#34;&gt;源代码&lt;/a&gt;&lt;a href=&#34;https://baike.baidu.com/item/%E8%AF%AD%E6%B3%95?fromModule=lemma_inlink&#34;&gt;语法&lt;/a&gt;结构的一种抽象表示。它以树状的形式表现&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;的语法结构，树上的每个节点都表示源代码中的一种结构。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯… 不愧是名字就带着抽象的东西，连说明都这么抽象。&lt;/p&gt;
&lt;p&gt;咱们先不整那么多虚头巴脑的，干就完了。&lt;/p&gt;
&lt;h2 id=&#34;构造四则运算表达式的ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造四则运算表达式的ast&#34;&gt;#&lt;/a&gt; 构造四则运算表达式的 AST&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;3 + 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这个是大家熟悉的算术表达式，实际上，我们的大脑是如何计算这个表达式的呢？当然需要遵循某些规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先乘除&lt;/li&gt;
&lt;li&gt;再加减&lt;/li&gt;
&lt;li&gt;从左往右结合&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那我们自然是需要先&lt;strong&gt;左往右找&lt;/strong&gt;在表达式中找到 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt;  两种符号，好消息是，没有，嘿嘿。&lt;/p&gt;
&lt;p&gt;接下来继续&lt;strong&gt;左往右找&lt;/strong&gt; &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; ，找到之后将其取出，这也是我们需要计算的子表达式。&lt;/p&gt;
&lt;p&gt;我们将其分成三部分，分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左边的数字  &lt;code&gt;3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加法运算符  &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;右边的数字  &lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人脑的表达式计算模型，可以归纳成这么一颗树型结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历树与我们的计算过程极度相似：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 + 2&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多运算符与结合律&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多运算符与结合律&#34;&gt;#&lt;/a&gt; 多运算符与结合律&lt;/h3&gt;
&lt;p&gt;那么，当一个表达式中，存在多个运算符时，应该如何构造语法树呢？&lt;br&gt;
接下来我们构造表达式  &lt;code&gt;3 - 2 + 4&lt;/code&gt;  的树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先我们应该注意的一点是，需要先被执行运算 (优先级更高) 的子表达式，其节点的相对深度更深：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还是先来遍历这颗树：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根节点，是加法，表明需要将左子节点与右子节点相加；
&lt;ol&gt;
&lt;li&gt;左子节点是减法，表明需要用左子节点减去右子节点，需要继续向下展开；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 - 2&lt;/code&gt; ，返回结果  &lt;code&gt;1&lt;/code&gt; ；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 + 4&lt;/code&gt; ，返回结果  &lt;code&gt;5&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;遍历结束；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此，遍历的过程也符合我们所要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由左边的运算符开始，向右结合。&lt;/li&gt;
&lt;li&gt;同优先级下，我们需要优先计算左边的运算符组成的子表达式，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我再给你画一下另一种情况，你也就明白了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以尝试一下遍历这棵树，会发现先被执行的一定是加法，这并不符合我们的从一开始就要求的 &lt;code&gt;左结合律&lt;/code&gt; 。&lt;br&gt;
在部分情况下，由于结合律的错误，就会产出错误的结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如我们本次求解的表达式，通过遍历此树得出的结果为 &lt;code&gt;-3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目标根据语法规则生成ast&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#目标根据语法规则生成ast&#34;&gt;#&lt;/a&gt; 目标：根据语法规则生成 AST&lt;/h2&gt;
&lt;p&gt;我不说你大概也已经猜到了，其实我们上面所构造的树，在当前的应用场景下，就叫做 &lt;code&gt;抽象语法树&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;遍历抽象语法树并计算的过程，与我们人脑对表达式的计算的过程是十分相似的。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;也就是说，我们只需要构造出这么一颗抽象语法树，就已经基本上完成了编译工作的一大半。&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;此时，若需要执行编译产生的结果，只需要遍历我们所生成 AST 即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/56ac/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在遍历的过程中，我们就能够正确的完成对加法表达式的加法运算，再完成对赋值表达式的赋值运算。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ast解释器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ast解释器&#34;&gt;#&lt;/a&gt; AST 解释器&lt;/h1&gt;
&lt;p&gt;最后，笔者向读者展示了有关 &amp;quot;解释器&amp;quot; 的东西，是的，即便你难以置信。&lt;br&gt;
遍历这棵树的过程，就可以叫做解释；&lt;br&gt;
如果我们写出代码实现遍历树的过程，即是 &lt;code&gt;AST解释器&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;当然，解释器是一种比较广泛的概念，即便到后面我们基于 AST 生成了字节码，交给虚拟机执行，我们的程序也依然可以称之为解释器，只不过解释的对象从 AST 换成了字节码。&lt;/p&gt;
&lt;p&gt;我个人觉得，当初造这个词的人只是为了区分所谓的 &amp;quot;编译型语言&amp;quot; 和 &amp;quot;解释型语言&amp;quot;。&lt;br&gt;
以下是百度百科对解释器的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;解释器（&lt;a href=&#34;https://baike.baidu.com/item/%E8%8B%B1%E8%AF%AD/109997?fromModule=lemma_inlink&#34;&gt;英语&lt;/a&gt;：Interpreter），又译为直译器，是一种电脑程序，能够把高级&lt;a href=&#34;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80?fromModule=lemma_inlink&#34;&gt;编程语言&lt;/a&gt;一行一行直接转译运行。解释器不会一次把整个程序转译出来，只像一位 “中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每转译一行程序叙述就立刻运行，然后再转译下一行，再运行，如此不停地进行下去。&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;此处关于 &lt;code&gt;每转译一行程序叙述就立刻运行&lt;/code&gt; 的说明也不尽然，至少现在很多被称为 &lt;code&gt;解释器&lt;/code&gt; 的程序，并非如此 (如 Python 解释器、Java 解释器等)。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/c4d3.html</guid>
            <title>【动手写ToyLang】0.前言</title>
            <link>http://yuyuaqwq.github.io/posts/c4d3.html</link>
            <category>编译原理</category>
            <category>动手写ToyLang</category>
            <pubDate>Fri, 28 Oct 2022 21:18:53 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;关于&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于&#34;&gt;#&lt;/a&gt; 关于&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本系列文章会手把手教你打造一门&lt;emp&gt;玩具&lt;/emp&gt;通用编程语言。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算机本身就是一门需要动手的学科，在对基本原理有一定程度的理解之后，自己动手实践才是学习的最好捷径，为此制造 &amp;quot;玩具&amp;quot;，并不丢人。&lt;/p&gt;
&lt;p&gt;笔者对《编译原理》这门学科的学习程度也十分有限，因此本系列文章的读者不仅仅是你们，也包括我，写下的这篇文章也是支撑我继续动手实践的动力。&lt;br&gt;
学完本系列文章之后，基本上可以对编译原理有所认知，再继续往下学习也就不会那么困难了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;笔者会尽可能保证文章内容的准确，若还是难以避免的出现了错误，望批评指正，感激不尽。&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;开发语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发语言&#34;&gt;#&lt;/a&gt; 开发语言&lt;/h2&gt;
&lt;p&gt;这里笔者选用个人较为常用的 C++ 作为开发语言，风格尽量以《Google C++ Style Guide》为准，在我个人能力范围内尽量写得 &amp;quot;现代 C++&amp;quot; 一点。&lt;/p&gt;
&lt;p&gt;另外，笔者对 C++ 的理解也较为浅薄，代码写得不好，还请理解。&lt;/p&gt;
&lt;h2 id=&#34;开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开发环境&#34;&gt;#&lt;/a&gt; 开发环境&lt;/h2&gt;
&lt;p&gt;笔者基本上只在 &lt;code&gt;Windows&lt;/code&gt;  下进行开发工作，因此选择自然是 &lt;code&gt;Visual Studio&lt;/code&gt; ，读者可以自由选择自己喜欢的开发环境。&lt;/p&gt;
&lt;h1 id=&#34;项目地址&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#项目地址&#34;&gt;#&lt;/a&gt; 项目地址&lt;/h1&gt;
&lt;p&gt;最后，笔者已经将完整的项目代码放到了 &lt;code&gt;github&lt;/code&gt;  上，另外每一学习阶段的代码会以分支的形式推送，供读者参考学习。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuyuaqwq/ToyLang&#34;&gt;https://github.com/yuyuaqwq/ToyLang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/5e1f.html</guid>
            <title>【Proxifier】基本配置与使用</title>
            <link>http://yuyuaqwq.github.io/posts/5e1f.html</link>
            <pubDate>Thu, 27 Oct 2022 00:37:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;br&gt;
 Block:&lt;/li&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;br&gt;
 Proxy HTTPS 127.0.0.1:&lt;/li&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/5e1f.html</guid>
            <title>【Proxifier】基本配置与使用</title>
            <link>http://yuyuaqwq.github.io/posts/5e1f.html</link>
            <category>网络分析</category>
            <category>Proxifier</category>
            <pubDate>Thu, 27 Oct 2022 00:37:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Proxifier 是为其他不支持指定代理服务器的应用进行强制代理的工具。&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;其原理 (大致) 是在内核层面通过驱动过滤的形式实现的网络控制。&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;官方网站&lt;br&gt;
&lt;a href=&#34;http://www.proxifier.com/&#34;&gt; http://www.proxifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用本身是收费的，有能力请支持正版软件。&lt;/p&gt;
&lt;h1 id=&#34;配置与使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置与使用&#34;&gt;#&lt;/a&gt; 配置与使用&lt;/h1&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;这里使用 &lt;code&gt;Fiddler&lt;/code&gt;  这个软件来担任代理服务器的工作。&lt;/p&gt;
&lt;p&gt;启动 Fiddler 后，请先关闭 Windows 系统代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们需要使用浏览器来测试强制代理，但是 Fiddler 会自动开启系统代理。&lt;/li&gt;
&lt;li&gt;并且浏览器默认会使用系统代理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;启动界面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动界面&#34;&gt;#&lt;/a&gt; 启动界面&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理服务器&#34;&gt;#&lt;/a&gt; 配置代理服务器&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxy Servers…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/2.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/3.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/4.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/5.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/6.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依然选择否&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/7.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置代理规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置代理规则&#34;&gt;#&lt;/a&gt; 配置代理规则&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Proxification Rules…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加代理规则，保持与我一致即可。&lt;br&gt;
添加了一条代理规则 chrome 并启用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/9.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/10.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里说明一下选项：&lt;br&gt;
Direct：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 放行此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Block:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proxifier 拦截此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proxy HTTPS 127.0.0.1:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这里的选项是我们先前设置的代理服务器&lt;/li&gt;
&lt;li&gt;Proxifier 代理此规则的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 OK，继续。&lt;/p&gt;
&lt;h2 id=&#34;配置域名解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置域名解析&#34;&gt;#&lt;/a&gt; 配置域名解析&lt;/h2&gt;
&lt;p&gt;工具栏 -&amp;gt; Profile -&amp;gt; Name Rusolution…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/11.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指定通过代理解析域名。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/12.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上大功告成。&lt;/p&gt;
&lt;h2 id=&#34;访问测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问测试&#34;&gt;#&lt;/a&gt; 访问测试&lt;/h2&gt;
&lt;p&gt;接下来通过浏览器访问网页，Fiddler 中就会看到来自 Proxifier 进程的流量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/13.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;fiddler抓取应用配置示例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fiddler抓取应用配置示例&#34;&gt;#&lt;/a&gt; Fiddler 抓取应用配置示例&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;我们需要将目标端口为 &lt;code&gt;80&lt;/code&gt;  和 &lt;code&gt;443&lt;/code&gt;  的请求转发到 &lt;code&gt;Fiddler&lt;/code&gt;  创建的代理服务器中。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;Fiddler.exe&lt;/code&gt;  设为过滤项，(因为 &lt;code&gt;Fiddler&lt;/code&gt;  再次转发请求时，又会被 &lt;code&gt;Proxifier&lt;/code&gt;  捕获，因此要将其过滤)，通过右边的 &lt;code&gt;↑&lt;/code&gt;   &lt;code&gt;↓&lt;/code&gt; 按钮调整其优先级为最高。&lt;/li&gt;
&lt;li&gt;这里另外示范了过滤 &lt;code&gt;Chrome.exe&lt;/code&gt;  浏览器的情况，使浏览器的请求也不会被转发。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/5e1f/14.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;仍有缺陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#仍有缺陷&#34;&gt;#&lt;/a&gt; 仍有缺陷&lt;/h1&gt;
&lt;p&gt;我们通过 &lt;code&gt;Proxifier&lt;/code&gt;  配合 &lt;code&gt;Fiddler&lt;/code&gt; ，能实现对应用 http/https 流量的强制抓包 / 解密。&lt;br&gt;
但是需要注意的是， &lt;code&gt;Fiddler&lt;/code&gt;  的原理是在操作系统中安装证书，以实现中间人攻击；&lt;br&gt;
某些情况下，通过此方法抓包，应用如果无法正常上网，说明应用可能并不信任操作系统的证书，而是自己有一套证书用于校验。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/842e.html</guid>
            <title>【MFC】视图与文档</title>
            <link>http://yuyuaqwq.github.io/posts/842e.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <category>C++</category>
            <category>界面开发</category>
            <pubDate>Tue, 25 Oct 2022 22:01:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图&#34;&gt;#&lt;/a&gt; 视图&lt;/h1&gt;
&lt;h2 id=&#34;视图窗口简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#视图窗口简述&#34;&gt;#&lt;/a&gt; 视图窗口简述&lt;/h2&gt;
&lt;p&gt;在 MFC 的设计中，图形的显示的这部分工作，交由 &lt;code&gt;视图窗口&lt;/code&gt; 负责。&lt;br&gt;
框架窗口则担容器之任，成为菜单、标题栏、视图窗口等窗口的容身之所，通常不直接在其客户区中绘制。&lt;/p&gt;
&lt;emp&gt;视图窗口就被设计为一个没有标题栏，只有客户区的窗口，通常覆盖在框架窗口的客户区上。&lt;/emp&gt;
&lt;h2 id=&#34;cview&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cview&#34;&gt;#&lt;/a&gt; CView&lt;/h2&gt;
&lt;p&gt;在 MFC 中，视图窗口对应的类即 &lt;code&gt;CView&lt;/code&gt; ，继承自 &lt;code&gt;CWnd&lt;/code&gt; ；&lt;/p&gt;
&lt;h3 id=&#34;cviewondraw&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cviewondraw&#34;&gt;#&lt;/a&gt; CView::OnDraw&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;CView&lt;/code&gt;  中声明了一个纯虚函数 &lt;code&gt;CView::OnDraw&lt;/code&gt; ，因此继承必须重写这个函数，用于处理绘制消息；&lt;br&gt;
这个函数是由 &lt;code&gt;CView::OnPanit&lt;/code&gt;  调用的。&lt;/p&gt;
&lt;h2 id=&#34;使用视图窗口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用视图窗口&#34;&gt;#&lt;/a&gt; 使用视图窗口&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyView* pView = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pView-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCView&amp;quot;&lt;/span&gt;, WS_CHILD | WS_VISIBLE | WS_BORDER,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CRect&amp;#123;&amp;#125;, &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, AFX_IDW_PANE_FIRST);     &lt;span class=&#34;comment&#34;&gt;// AFX_IDW_PANE_FIRST及以上的id创建出来的视图窗口，边框将与客户区重叠，不使用我们传递的CRect对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pViewActive = pView;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;老朋友了，相信读者阅读起来不会有什么困难，我们为框架窗口的客户区覆盖上了一个视图窗口。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档&#34;&gt;#&lt;/a&gt; 文档&lt;/h1&gt;
&lt;h2 id=&#34;文档简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文档简述&#34;&gt;#&lt;/a&gt; 文档简述&lt;/h2&gt;
&lt;p&gt;在 MFC 中，将数据的管理交给 &lt;code&gt;文档&lt;/code&gt; 负责，再与负责显示数据的 &lt;code&gt;视图&lt;/code&gt; 进行数据交互。&lt;/p&gt;
&lt;h2 id=&#34;cdocument&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cdocument&#34;&gt;#&lt;/a&gt; CDocument&lt;/h2&gt;
&lt;p&gt;MFC 提供的文档类。&lt;/p&gt;
&lt;p&gt;一个文档可以同时与多个视图窗口交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部维护了一个链表，连接所有与当前文档对象交互的视图对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个视图窗口只能与一个文档交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部由一个成员变量指向交互的文档对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用文档&#34;&gt;#&lt;/a&gt; 使用文档&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口，并挂接到框架窗口的主活动视图中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;这回，我们有了不少改动。&lt;/p&gt;
&lt;p&gt;首先，我们先从应用的实例初始化开始看起：&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; CMyWinApp::InitInstance &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;我们修改了 &lt;code&gt;CMyWinApp::InitInstance&lt;/code&gt;  (及 &lt;code&gt;CMyView&lt;/code&gt;  类)，通过 MFC 的 &lt;code&gt;动态创建机制&lt;/code&gt; ，让 MFC 为我们创建视图窗口，并与主框架窗口建立关联。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;说实话，我觉得 MFC 整这么多种选择就很烦 = =，这个也要学哪个也要学，既然要封装不妨封装彻底一点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里我们还建立了消息映射 &lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt; 、 &lt;code&gt;CMyView::OnCreate&lt;/code&gt; ，但是并没有做别的事，只是调用了父类实现的消息映射；&lt;br&gt;
实际上并不需要我们去建立消息映射然后调用父类的成员函数，这里是为了方便读者看得更明显。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多视图&#34;&gt;#&lt;/a&gt; 多视图&lt;/h1&gt;
&lt;p&gt;在一个 &lt;code&gt;不规则框架窗口&lt;/code&gt; 中，可以同时存在多个视图窗口。&lt;/p&gt;
&lt;p&gt;我们需要在主框架窗口的客户区中，放置不规则框架窗口；&lt;br&gt;
再在不规则框架窗口中放置多个视图窗口。&lt;/p&gt;
&lt;h2 id=&#34;csplitterwnd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csplitterwnd&#34;&gt;#&lt;/a&gt; CSplitterWnd&lt;/h2&gt;
&lt;p&gt;拆分窗口类，即不规则框架窗口，&lt;emp&gt;其客户区可以放置多个视图窗口。&lt;/emp&gt;&lt;/p&gt;
&lt;h2 id=&#34;尝试多视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试多视图&#34;&gt;#&lt;/a&gt; 尝试多视图&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyDoc&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CDocument &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyView&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_DYNCREATE&lt;/span&gt;(CMyView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;IMPLEMENT_DYNCREATE&lt;/span&gt;(CMyView, CView);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyView, CView)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyView::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CView::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，建立文档与当前视图的关联&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyView::OnDraw&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CDC* pDC)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pDC-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TextOut&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;CMyView::OnDraw&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; : &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CSplitterWnd m_pSplitWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; AFX_MSG_CALL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCS);        &lt;span class=&#34;comment&#34;&gt;// 在此函数内部，通过动态创建机制创建视图窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 重写框架窗口创建客户区时调用的成员函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreateClient&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs, CCreateContext* pContext)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateStatic&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);       &lt;span class=&#34;comment&#34;&gt;// 创建布局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView), &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pSplitWnd.&lt;span class=&#34;built_in&#34;&gt;CreateView&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, pContext-&amp;gt;m_pNewViewClass, &lt;span class=&#34;built_in&#34;&gt;CSize&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;500&lt;/span&gt;), pContext);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp::&lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CMyWinApp::InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMyDoc* pDoc = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyDoc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CCreateContext createContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pCurrentDoc = pDoc;     &lt;span class=&#34;comment&#34;&gt;// 绑定文档类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    createContext.m_pNewViewClass = &lt;span class=&#34;built_in&#34;&gt;RUNTIME_CLASS&lt;/span&gt;(CMyView);     &lt;span class=&#34;comment&#34;&gt;// 绑定视图类的静态成员变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadFrame&lt;/span&gt;(IDR_MENU_TOP, WS_OVERLAPPEDWINDOW, &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &amp;amp;createContext);       &lt;span class=&#34;comment&#34;&gt;// 创建框架窗口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/603c.html</guid>
            <title>【MFC】探索运行时类信息机制的实现原理</title>
            <link>http://yuyuaqwq.github.io/posts/603c.html</link>
            <pubDate>Sun, 16 Oct 2022 22:44:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;空的哦&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/6ee.html</guid>
            <title>【MFC】工具栏</title>
            <link>http://yuyuaqwq.github.io/posts/6ee.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <category>C++</category>
            <category>界面开发</category>
            <pubDate>Sun, 16 Oct 2022 16:41:10 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;工具栏简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工具栏简述&#34;&gt;#&lt;/a&gt; 工具栏简述&lt;/h1&gt;
&lt;p&gt;Windows 下的工具栏通常是指放置工具的容器。&lt;br&gt;
通常我们能在一些软件的菜单栏下见到，各类样式的图形按钮，被框在一栏中，这便是工具栏。&lt;/p&gt;
&lt;h1 id=&#34;添加工具栏资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加工具栏资源&#34;&gt;#&lt;/a&gt; 添加工具栏资源&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;项目&lt;/code&gt; ， &lt;code&gt;添加&lt;/code&gt;  -&amp;gt;  &lt;code&gt;资源&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;Toolbar&lt;/code&gt; ，点击 &lt;code&gt;新建&lt;/code&gt; ，进入资源编辑界面。&lt;/li&gt;
&lt;li&gt;自行折腾编辑界面，随便画几个图案，这就是你工具栏里面的工具按钮&lt;/li&gt;
&lt;li&gt;设置资源 ID，这里我将工具栏 ID 设置为 &lt;code&gt;IDR_TOOLBAR_1&lt;/code&gt; ，工具按钮的 ID 依次为 &lt;code&gt;ID_TOOLBAR_BUTTOR_1&lt;/code&gt; 、 &lt;code&gt;ID_TOOLBAR_BUTTOR_2&lt;/code&gt; 、 &lt;code&gt;ID_TOOLBAR_BUTTOR_3&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;资源编辑界面示范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/6ee/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用工具栏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用工具栏&#34;&gt;#&lt;/a&gt; 使用工具栏&lt;/h1&gt;
&lt;p&gt;工具栏的使用与菜单类似，只需要映射 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息即可。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CToolBar* m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_1, OnToolBar_1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_2, OnToolBar_2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_3, OnToolBar_3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Menu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ToolBar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_ALIGN_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadToolBar&lt;/span&gt;(IDR_TOOLBAR_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pToolBar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pToolBar = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，在上一节代码的基础上进行了如下部分修改：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入头文件 &lt;code&gt;afxext.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMyFrameWnd&lt;/code&gt;  类添加私有成员 &lt;code&gt;m_pToolBar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt;  函数中使 &lt;code&gt;m_pToolBar&lt;/code&gt;  指向新创建的对象，并进行工具栏的加载&lt;/li&gt;
&lt;li&gt;处理 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息的映射&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;工具栏把手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工具栏把手&#34;&gt;#&lt;/a&gt; 工具栏把手&lt;/h1&gt;
&lt;p&gt;工具栏不仅仅只能固定在菜单栏下方，它是可以拖动，漂浮的。&lt;br&gt;
而工具栏的把手，就是工具栏中，被允许被鼠标拖拽的控制区域。&lt;/p&gt;
&lt;h2 id=&#34;cbrs_gripper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cbrs_gripper&#34;&gt;#&lt;/a&gt; CBRS_GRIPPER&lt;/h2&gt;
&lt;p&gt;需要为工具栏添加把手时，需要在 &lt;code&gt;CToolBar::CreateEx&lt;/code&gt;  函数中添加 &lt;code&gt;CBRS_GRIPPER&lt;/code&gt;  样式。&lt;/p&gt;
&lt;h2 id=&#34;ctoolbarenabledocking&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ctoolbarenabledocking&#34;&gt;#&lt;/a&gt; CToolBar::EnableDocking&lt;/h2&gt;
&lt;p&gt;用于指定工具栏可以停放到窗口中的何处&lt;/p&gt;
&lt;h2 id=&#34;cframewndenabledocking&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cframewndenabledocking&#34;&gt;#&lt;/a&gt; CFrameWnd::EnableDocking&lt;/h2&gt;
&lt;p&gt;用于指定框架窗口允许被工具栏停放的位置&lt;/p&gt;
&lt;h2 id=&#34;cframewnddockcontrolbar&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cframewnddockcontrolbar&#34;&gt;#&lt;/a&gt; CFrameWnd::DockControlBar&lt;/h2&gt;
&lt;p&gt;设置工具栏当前停放的位置&lt;/p&gt;
&lt;h2 id=&#34;允许任意停放的工具栏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#允许任意停放的工具栏&#34;&gt;#&lt;/a&gt; 允许任意停放的工具栏&lt;/h2&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxext.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CToolBar* m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_1, OnToolBar_1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_2, OnToolBar_2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_TOOLBAR_BUTTON_3, OnToolBar_3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// Menu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// ToolBar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;CreateEx&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;, TBSTYLE_FLAT, WS_CHILD | WS_VISIBLE | CBRS_ALIGN_TOP | CBRS_GRIPPER);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadToolBar&lt;/span&gt;(IDR_TOOLBAR_1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pToolBar-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;EnableDocking&lt;/span&gt;(CBRS_ALIGN_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;EnableDocking&lt;/span&gt;(CBRS_ALIGN_ANY);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DockControlBar&lt;/span&gt;(m_pToolBar);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pToolBar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pToolBar;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pToolBar = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnToolBar_3&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;button 3&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，就留给读者自行调试了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/d43b.html</guid>
            <title>【MFC】菜单</title>
            <link>http://yuyuaqwq.github.io/posts/d43b.html</link>
            <category>MFC</category>
            <category>没饭吃</category>
            <category>C++</category>
            <category>界面开发</category>
            <pubDate>Sat, 15 Oct 2022 15:28:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;菜单简述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#菜单简述&#34;&gt;#&lt;/a&gt; 菜单简述&lt;/h1&gt;
&lt;p&gt;Windows 的菜单分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;窗口菜单&lt;/li&gt;
&lt;li&gt;弹出式菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;窗口菜单是挂接到窗口上的；&lt;br&gt;
弹出式菜单是根据程序设计者的需要在某处弹出的。&lt;/p&gt;
&lt;h1 id=&#34;添加菜单资源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加菜单资源&#34;&gt;#&lt;/a&gt; 添加菜单资源&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;右键 &lt;code&gt;项目&lt;/code&gt; ， &lt;code&gt;添加&lt;/code&gt;  -&amp;gt;  &lt;code&gt;资源&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;Menu&lt;/code&gt; ，点击 &lt;code&gt;新建&lt;/code&gt; ，进入资源编辑界面。&lt;/li&gt;
&lt;li&gt;顶层菜单 (类型为窗口菜单) 添加一个项 &lt;code&gt;新建&lt;/code&gt; 、顶层的子菜单 (类型为弹出式菜单) 添加一个项 &lt;code&gt;文件&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改顶层菜单的资源为 &lt;code&gt;IDR_MENU_TOP&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改顶层菜单的 &lt;code&gt;新建&lt;/code&gt; 项的子菜单的 &lt;code&gt;文件&lt;/code&gt; 项的资源为 &lt;code&gt;ID_MENU_FILE_NEW&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注：此处附注的菜单类型并不需要你在编辑时设置，是指明该菜单属于什么类型。&lt;br&gt;
顶层菜单的类型就是 &lt;code&gt;窗口菜单&lt;/code&gt; &lt;br&gt;
顶层菜单的子菜单的类型就是 &lt;code&gt;弹出式菜单&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;资源编辑界面示范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;img src=&#34;/posts/d43b/1.png&#34; class=&#34;&#34; title=&#34;这是一张图片&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用窗口菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用窗口菜单&#34;&gt;#&lt;/a&gt; 使用窗口菜单&lt;/h1&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码想必读者也比较熟悉了，有一些需要注意的改动如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CMyFrameWnd&lt;/code&gt;  添加私有成员 &lt;code&gt;CMenu* m_pMenu&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;添加了一个新的消息映射条目 &lt;code&gt;ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;为消息映射函数添加了宏 &lt;code&gt;afx_msg&lt;/code&gt; ；
&lt;ul&gt;
&lt;li&gt;并无特殊作用，仅为提高代码可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;挂接窗口菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#挂接窗口菜单&#34;&gt;#&lt;/a&gt; 挂接窗口菜单&lt;/h2&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;CMyFrameWnd::OnCreate&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;首先，代码中 &lt;code&gt;new&lt;/code&gt;  了一个 &lt;code&gt;CMenu&lt;/code&gt;  类对象，使我们添加的私有成员指向它，这是 MFC 封装的菜单类。&lt;br&gt;
其次，调用了 &lt;code&gt;CMenu::LoadMenu&lt;/code&gt; ，用于加载我们添加的菜单资源。&lt;br&gt;
最后，以当前 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象的身份，调用了 &lt;code&gt;CFrameWnd::SetMenu&lt;/code&gt;  成员函数。&lt;/p&gt;
&lt;p&gt;至此，我们完成了将窗口菜单挂接到 &lt;code&gt;CMyFrameWnd&lt;/code&gt;  类对象上的工作。&lt;/p&gt;
&lt;h2 id=&#34;处理菜单项回调事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#处理菜单项回调事件&#34;&gt;#&lt;/a&gt; 处理菜单项回调事件&lt;/h2&gt;
&lt;div class=&#34;note warning no-icon flat&#34;&gt;&lt;p&gt;&lt;code&gt;ON_COMMAND(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/code&gt; &lt;br&gt;
 &lt;code&gt;CMyFrameWnd::OnMenu_File_New&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;只需要通过 &lt;code&gt;ON_COMMAND&lt;/code&gt;  宏，就可以建立指定菜单资源被点击 ( &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息) 与回调函数的映射。&lt;/p&gt;
&lt;h2 id=&#34;wm_command&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wm_command&#34;&gt;#&lt;/a&gt; WM_COMMAND&lt;/h2&gt;
&lt;p&gt;命令消息，在菜单被点击等事件发生时产生。&lt;/p&gt;
&lt;p&gt;在 MFC 的消息处理架构中， &lt;code&gt;WM_COMMAND&lt;/code&gt;  的处理流程与我们先前接触的 &lt;code&gt;WM_CREATE&lt;/code&gt;  等消息是不同的。&lt;br&gt;
我们回到 &lt;code&gt;CWnd::OnWndMsg&lt;/code&gt;  函数，在函数开始部分就能看到相关源码。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;BOOL &lt;span class=&#34;title&#34;&gt;CWnd::OnWndMsg&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	LRESULT lResult = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;MessageMapFunctions&lt;/span&gt; mmf;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	mmf.pfn = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	CInternalGlobalLock winMsgLock;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;// special case for commands&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (message == WM_COMMAND)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;built_in&#34;&gt;OnCommand&lt;/span&gt;(wParam, lParam))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			lResult = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;span class=&#34;keyword&#34;&gt;goto&lt;/span&gt; LReturnTrue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;只要是 &lt;code&gt;WM_COMMAND&lt;/code&gt;  消息，会调用 &lt;code&gt;CWnd::OnCommand&lt;/code&gt; ，返回后就再次返回了。&lt;/p&gt;
&lt;p&gt;最终会走到全局静态函数 &lt;code&gt;_AfxDispatchCmdMsg&lt;/code&gt;  中回调 &lt;code&gt;CMyFrameWnd::OnMenu_File_New&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;由于代码较为繁琐，故不再向下深入，读者感兴趣可以自行调试。&lt;/p&gt;
&lt;h1 id=&#34;使用弹出式菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用弹出式菜单&#34;&gt;#&lt;/a&gt; 使用弹出式菜单&lt;/h1&gt;
&lt;h2 id=&#34;wm_contextmenu&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wm_contextmenu&#34;&gt;#&lt;/a&gt; WM_CONTEXTMENU&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DefWindowProc&lt;/code&gt;  在处理 &lt;code&gt;WM_RBUTTONUP&lt;/code&gt;  或 &lt;code&gt;WM_NCRBUTTONUP&lt;/code&gt;  消息，或是用户键入 &lt;code&gt;SHIFT+F10&lt;/code&gt;  时，生成 &lt;code&gt;WM_CONTEXTMENU&lt;/code&gt;  消息。&lt;/p&gt;
&lt;h2 id=&#34;实现右键客户区弹出菜单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现右键客户区弹出菜单&#34;&gt;#&lt;/a&gt; 实现右键客户区弹出菜单&lt;/h2&gt;
&lt;p&gt;我们知道，在菜单编辑界面中，顶层菜单的子菜单都是独立的弹出式菜单；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;故这些子菜单都是可以被单独弹出的&lt;/li&gt;
&lt;li&gt;而顶层菜单项被点击时弹出子菜单不需要我们处理，是因为 windows 替我们做好了相关的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们通过映射 &lt;code&gt;WM_CONTEXTMENU&lt;/code&gt;  消息，实现在客户区右键，弹出顶层菜单 &lt;code&gt;文件&lt;/code&gt; 的子菜单。&lt;/p&gt;
&lt;details class=&#34;folding-tag&#34; blue&gt;&lt;summary&gt; 代码示例 &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&#34;highlight c++&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;lt;afxwin.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;#&lt;span class=&#34;keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;resource.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyFrameWnd&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CFrameWnd &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;DECLARE_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;BEGIN_MESSAGE_MAP&lt;/span&gt;(CMyFrameWnd, CFrameWnd)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CREATE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CLOSE&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_COMMAND&lt;/span&gt;(ID_MENU_FILE_NEW, OnMenu_File_New)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;ON_WM_CONTEXTMENU&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;END_MESSAGE_MAP&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnCreate&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(LPCREATESTRUCT pCs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;LoadMenu&lt;/span&gt;(IDR_MENU_TOP);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;SetMenu&lt;/span&gt;(m_pMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnCreate&lt;/span&gt;(pCs);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnClose&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m_pMenu) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;delete&lt;/span&gt; m_pMenu;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMenu = &lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CFrameWnd::&lt;span class=&#34;built_in&#34;&gt;OnClose&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnContextMenu&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(CWnd* wnd, CPoint pos)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    CMenu* pNewMenu = m_pMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;GetSubMenu&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    pNewMenu-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;TrackPopupMenu&lt;/span&gt;(TPM_LEFTALIGN | TPM_TOPALIGN, pos.x, pos.y, wnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;afx_msg &lt;span class=&#34;type&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;CMyFrameWnd::OnMenu_File_New&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;AfxMessageBox&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;L&amp;quot;new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;CMyWinApp&lt;/span&gt; :&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; CWinApp &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;CMyWinApp&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;virtual&lt;/span&gt; BOOL &lt;span class=&#34;title&#34;&gt;InitInstance&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        CMyFrameWnd* frame = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; CMyFrameWnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;Create&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;nullptr&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;L&amp;quot;MFCBase&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m_pMainWnd = frame;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;ShowWindow&lt;/span&gt;(SW_SHOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        frame-&amp;gt;&lt;span class=&#34;built_in&#34;&gt;UpdateWindow&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CMyWinApp g_theApp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
              &lt;/div&gt;
            &lt;/details&gt;
&lt;p&gt;代码并不复杂，建议读者自行尝试调试运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考资料：&lt;br&gt;
&lt;a href=&#34;https://www.cnblogs.com/hanford/p/6163690.html&#34;&gt;https://www.cnblogs.com/hanford/p/6163690.html&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;https://www.cnblogs.com/greenleaf1976/p/16460330.html&#34;&gt;https://www.cnblogs.com/greenleaf1976/p/16460330.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/51b.html</guid>
            <title>【C/C++逆向】数据类型的表现形式</title>
            <link>http://yuyuaqwq.github.io/posts/51b.html</link>
            <category>逆向分析</category>
            <category>C/C++</category>
            <category>反汇编</category>
            <pubDate>Fri, 14 Oct 2022 17:49:00 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;咱也不知道发生了啥&#34; data-whm=&#34;咱也不知道发生了啥&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;dfea2844e4baf3c8dcd5a0ea14f21045fd66d72652f94d8b7b034e0193d5ff28&#34;&gt;db3f4eb17c2318c256622b6960219afda507dbc0f727563f20c8a378137edd144480af96f63ef9ac5ad29fe678f7a1b1&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;或许，需要什么魔法咒语？&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yuyuaqwq.github.io/posts/3fe5.html</guid>
            <title>【C/C++逆向】前言</title>
            <link>http://yuyuaqwq.github.io/posts/3fe5.html</link>
            <category>逆向分析</category>
            <category>C/C++</category>
            <category>反汇编</category>
            <pubDate>Fri, 14 Oct 2022 17:48:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;当前分类所收录的文章主要是我个人学习 C/C++ 逆向时记录的读书笔记。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主要参考资料&lt;br&gt;
《C++ 反汇编与逆向分析技术揭秘 (第 2 版)》. 钱林松、张延清&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
    </channel>
</rss>
